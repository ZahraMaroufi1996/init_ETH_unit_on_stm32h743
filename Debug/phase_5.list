
phase_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c48  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08009ee8  08009ee8  00019ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800a038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bf0  24000078  0800a0b0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c68  0800a0b0  00024c68  2**0
                  ALLOC
  9 .lwip_sec     000425f8  30000000  0800a0b0  00030000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003066f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004895  00000000  00000000  00050715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019a0  00000000  00000000  00054fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001848  00000000  00000000  00056950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000497e  00000000  00000000  00058198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ca9b  00000000  00000000  0005cb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170e1b  00000000  00000000  000795b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001ea3cc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000722c  00000000  00000000  001ea420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009ed0 	.word	0x08009ed0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08009ed0 	.word	0x08009ed0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buf[22] = {0};
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	821a      	strh	r2, [r3, #16]
	int i;
	uint32_t reg_val;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a2:	f000 fa8f 	bl	8000bc4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006a6:	4b4f      	ldr	r3, [pc, #316]	; (80007e4 <main+0x15c>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11b      	bne.n	80006ea <main+0x62>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006be:	4b49      	ldr	r3, [pc, #292]	; (80007e4 <main+0x15c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006c6:	f3bf 8f4f 	dsb	sy
}
 80006ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006cc:	f3bf 8f6f 	isb	sy
}
 80006d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <main+0x15c>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a43      	ldr	r2, [pc, #268]	; (80007e4 <main+0x15c>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
}
 80006e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e4:	f3bf 8f6f 	isb	sy
}
 80006e8:	e000      	b.n	80006ec <main+0x64>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006ec:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <main+0x15c>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d138      	bne.n	800076a <main+0xe2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006f8:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <main+0x15c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000700:	f3bf 8f4f 	dsb	sy
}
 8000704:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000706:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <main+0x15c>)
 8000708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800070e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000710:	0b5b      	lsrs	r3, r3, #13
 8000712:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000720:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	015a      	lsls	r2, r3, #5
 8000726:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800072a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800072c:	6a3a      	ldr	r2, [r7, #32]
 800072e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000730:	492c      	ldr	r1, [pc, #176]	; (80007e4 <main+0x15c>)
 8000732:	4313      	orrs	r3, r2
 8000734:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	623a      	str	r2, [r7, #32]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1ef      	bne.n	8000722 <main+0x9a>
    } while(sets-- != 0U);
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	627a      	str	r2, [r7, #36]	; 0x24
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1e5      	bne.n	8000718 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 800074c:	f3bf 8f4f 	dsb	sy
}
 8000750:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <main+0x15c>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <main+0x15c>)
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800075e:	f3bf 8f4f 	dsb	sy
}
 8000762:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000764:	f3bf 8f6f 	isb	sy
}
 8000768:	e000      	b.n	800076c <main+0xe4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800076a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fd64 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f846 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f000 f958 	bl	8000a28 <MX_GPIO_Init>
  MX_ETH_Init();
 8000778:	f000 f8be 	bl	80008f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800077c:	f000 f908 	bl	8000990 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  for (i=0;i<32;i++)
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000784:	e01d      	b.n	80007c2 <main+0x13a>
   {
     HAL_ETH_ReadPHYRegister(&heth, 0, i, &reg_val);
 8000786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2100      	movs	r1, #0
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <main+0x160>)
 800078e:	f001 fa1f 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>

     sprintf((char*)buf,"reg %02d -> 0x%04x\r\n",i,reg_val);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f107 0008 	add.w	r0, r7, #8
 8000798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800079a:	4914      	ldr	r1, [pc, #80]	; (80007ec <main+0x164>)
 800079c:	f008 ffe4 	bl	8009768 <siprintf>
     HAL_UART_Transmit (&huart3,(char*)buf,strlen(buf),500);
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fd9b 	bl	80002e0 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f107 0108 	add.w	r1, r7, #8
 80007b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <main+0x168>)
 80007b8:	f005 f898 	bl	80058ec <HAL_UART_Transmit>
  for (i=0;i<32;i++)
 80007bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007be:	3301      	adds	r3, #1
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	2b1f      	cmp	r3, #31
 80007c6:	ddde      	ble.n	8000786 <main+0xfe>
 	}
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007c8:	f006 f93a 	bl	8006a40 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BroadcastTask */
  BroadcastTaskHandle = osThreadNew(StartBroadcastTask, NULL, &BroadcastTask_attributes);
 80007cc:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <main+0x16c>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <main+0x170>)
 80007d2:	f006 f97f 	bl	8006ad4 <osThreadNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <main+0x174>)
 80007da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007dc:	f006 f954 	bl	8006a88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x158>
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	24004b0c 	.word	0x24004b0c
 80007ec:	08009ef8 	.word	0x08009ef8
 80007f0:	24004a78 	.word	0x24004a78
 80007f4:	08009f38 	.word	0x08009f38
 80007f8:	08000b29 	.word	0x08000b29
 80007fc:	24004b08 	.word	0x24004b08

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	; 0x70
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	224c      	movs	r2, #76	; 0x4c
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f008 fece 	bl	80095b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2220      	movs	r2, #32
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f008 fec8 	bl	80095b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000820:	2002      	movs	r0, #2
 8000822:	f002 f9c7 	bl	8002bb4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <SystemClock_Config+0xf0>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <SystemClock_Config+0xf0>)
 8000830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <SystemClock_Config+0xf0>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <SystemClock_Config+0xf4>)
 8000842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000844:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <SystemClock_Config+0xf4>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <SystemClock_Config+0xf4>)
 800084e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000858:	bf00      	nop
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <SystemClock_Config+0xf0>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000866:	d1f8      	bne.n	800085a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800086c:	2301      	movs	r3, #1
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000880:	233c      	movs	r3, #60	; 0x3c
 8000882:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000890:	230c      	movs	r3, #12
 8000892:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000894:	2300      	movs	r3, #0
 8000896:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 f9c1 	bl	8002c28 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008ac:	f000 f9dc 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	233f      	movs	r3, #63	; 0x3f
 80008b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2303      	movs	r3, #3
 80008b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008bc:	2308      	movs	r3, #8
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c4:	2340      	movs	r3, #64	; 0x40
 80008c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2104      	movs	r1, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fdb6 	bl	8003448 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80008e2:	f000 f9c1 	bl	8000c68 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3770      	adds	r7, #112	; 0x70
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	58024800 	.word	0x58024800
 80008f4:	58000400 	.word	0x58000400

080008f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_ETH_Init+0x80>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_ETH_Init+0x84>)
 8000900:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_ETH_Init+0x88>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_ETH_Init+0x88>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_ETH_Init+0x88>)
 8000910:	22e1      	movs	r2, #225	; 0xe1
 8000912:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_ETH_Init+0x88>)
 8000916:	2200      	movs	r2, #0
 8000918:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_ETH_Init+0x88>)
 800091c:	2200      	movs	r2, #0
 800091e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_ETH_Init+0x88>)
 8000922:	2200      	movs	r2, #0
 8000924:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_ETH_Init+0x80>)
 8000928:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_ETH_Init+0x88>)
 800092a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_ETH_Init+0x80>)
 800092e:	2201      	movs	r2, #1
 8000930:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_ETH_Init+0x80>)
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <MX_ETH_Init+0x8c>)
 8000936:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_ETH_Init+0x80>)
 800093a:	4a13      	ldr	r2, [pc, #76]	; (8000988 <MX_ETH_Init+0x90>)
 800093c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_ETH_Init+0x80>)
 8000940:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000944:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_ETH_Init+0x80>)
 8000948:	f000 fe4e 	bl	80015e8 <HAL_ETH_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000952:	f000 f989 	bl	8000c68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000956:	2234      	movs	r2, #52	; 0x34
 8000958:	2100      	movs	r1, #0
 800095a:	480c      	ldr	r0, [pc, #48]	; (800098c <MX_ETH_Init+0x94>)
 800095c:	f008 fe28 	bl	80095b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_ETH_Init+0x94>)
 8000962:	2221      	movs	r2, #33	; 0x21
 8000964:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_ETH_Init+0x94>)
 8000968:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800096c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_ETH_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24004b0c 	.word	0x24004b0c
 800097c:	40028000 	.word	0x40028000
 8000980:	24000094 	.word	0x24000094
 8000984:	30040060 	.word	0x30040060
 8000988:	30040000 	.word	0x30040000
 800098c:	24004b94 	.word	0x24004b94

08000990 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <MX_USART3_UART_Init+0x94>)
 8000998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009da:	f004 ff37 	bl	800584c <HAL_UART_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e4:	f000 f940 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009ec:	f005 ff1a 	bl	8006824 <HAL_UARTEx_SetTxFifoThreshold>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009f6:	f000 f937 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 80009fe:	f005 ff4f 	bl	80068a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f000 f92e 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_USART3_UART_Init+0x90>)
 8000a0e:	f005 fed0 	bl	80067b2 <HAL_UARTEx_DisableFifoMode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f926 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24004a78 	.word	0x24004a78
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b38      	ldr	r3, [pc, #224]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a36      	ldr	r2, [pc, #216]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	4a2f      	ldr	r2, [pc, #188]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2102      	movs	r1, #2
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <MX_GPIO_Init+0xfc>)
 8000af8:	f002 f828 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_GPIO_Init+0xfc>)
 8000b14:	f001 fe6a 	bl	80027ec <HAL_GPIO_Init>

}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	58024400 	.word	0x58024400
 8000b24:	58021000 	.word	0x58021000

08000b28 <StartBroadcastTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBroadcastTask */
void StartBroadcastTask(void *argument)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	//char payload[20] = "Hello";
	ETH_BufferTypeDef buffer1;
	//uint8_t buf[50];
	HAL_StatusTypeDef ret;

	HAL_ETH_Start(&heth);
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <StartBroadcastTask+0x80>)
 8000b32:	f000 fe33 	bl	800179c <HAL_ETH_Start>
//  MACAddr[2] = 0xE1;
//  MACAddr[3] = 0x00;
//  MACAddr[4] = 0x00;
//  MACAddr[5] = 0x00;

	memset(&Tx_Buff[0], 0xFF, 6);
 8000b36:	2206      	movs	r2, #6
 8000b38:	21ff      	movs	r1, #255	; 0xff
 8000b3a:	481c      	ldr	r0, [pc, #112]	; (8000bac <StartBroadcastTask+0x84>)
 8000b3c:	f008 fd38 	bl	80095b0 <memset>
	memcpy(&Tx_Buff[6], heth.Init.MACAddr, 6);
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <StartBroadcastTask+0x80>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2206      	movs	r2, #6
 8000b46:	4619      	mov	r1, r3
 8000b48:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <StartBroadcastTask+0x88>)
 8000b4a:	f008 fd23 	bl	8009594 <memcpy>
	//memcpy(&Tx_Buff[6], &MACAddr[0], 6);


	Tx_Buff[12] = 0x08;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <StartBroadcastTask+0x84>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	731a      	strb	r2, [r3, #12]
	Tx_Buff[13] = 0x00;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <StartBroadcastTask+0x84>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	735a      	strb	r2, [r3, #13]

	//memcpy(&Tx_Buff[14], "Helloooooooo", strlen("Helloooooooo"));
	strcpy((char *)&Tx_Buff[14], "Helloooooooo");
 8000b5a:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <StartBroadcastTask+0x8c>)
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <StartBroadcastTask+0x90>)
 8000b5e:	4614      	mov	r4, r2
 8000b60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b62:	6020      	str	r0, [r4, #0]
 8000b64:	6061      	str	r1, [r4, #4]
 8000b66:	60a2      	str	r2, [r4, #8]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	7323      	strb	r3, [r4, #12]

	buffer1.buffer = Tx_Buff;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <StartBroadcastTask+0x84>)
 8000b6e:	60bb      	str	r3, [r7, #8]
	buffer1.len = 14 + strlen("Helloooooooo");
 8000b70:	231a      	movs	r3, #26
 8000b72:	60fb      	str	r3, [r7, #12]
	buffer1.next = NULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]

	// set pointer to ethernet buffer
	TxConfig.Length = buffer1.len;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <StartBroadcastTask+0x94>)
 8000b7c:	6053      	str	r3, [r2, #4]
	TxConfig.TxBuffer = &buffer1;
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <StartBroadcastTask+0x94>)
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	6093      	str	r3, [r2, #8]

  /* Infinite loop */
  for(;;)
  {
  	ret = HAL_ETH_Transmit (&heth, &TxConfig,HAL_MAX_DELAY);
 8000b86:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8a:	490c      	ldr	r1, [pc, #48]	; (8000bbc <StartBroadcastTask+0x94>)
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <StartBroadcastTask+0x80>)
 8000b8e:	f000 fe61 	bl	8001854 <HAL_ETH_Transmit>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 8000b96:	2102      	movs	r1, #2
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <StartBroadcastTask+0x98>)
 8000b9a:	f001 fff0 	bl	8002b7e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba2:	f006 f829 	bl	8006bf8 <osDelay>
  	ret = HAL_ETH_Transmit (&heth, &TxConfig,HAL_MAX_DELAY);
 8000ba6:	e7ee      	b.n	8000b86 <StartBroadcastTask+0x5e>
 8000ba8:	24004b0c 	.word	0x24004b0c
 8000bac:	30042000 	.word	0x30042000
 8000bb0:	30042006 	.word	0x30042006
 8000bb4:	3004200e 	.word	0x3004200e
 8000bb8:	08009f10 	.word	0x08009f10
 8000bbc:	24004b94 	.word	0x24004b94
 8000bc0:	58021000 	.word	0x58021000

08000bc4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bd6:	f000 fc8b 	bl	80014f0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MPU_Config+0x78>)
 8000be4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000be6:	2307      	movs	r3, #7
 8000be8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fca9 	bl	8001560 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MPU_Config+0x7c>)
 8000c14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c16:	230d      	movs	r3, #13
 8000c18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c26:	463b      	mov	r3, r7
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fc99 	bl	8001560 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c2e:	2004      	movs	r0, #4
 8000c30:	f000 fc76 	bl	8001520 <HAL_MPU_Enable>

}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	30040000 	.word	0x30040000
 8000c40:	30044000 	.word	0x30044000

08000c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c56:	f000 fb2b 	bl	80012b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010000 	.word	0x40010000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x48>)
 8000c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_MspInit+0x48>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x48>)
 8000c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f06f 0001 	mvn.w	r0, #1
 8000ca0:	f000 fbfe 	bl	80014a0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	2005      	movs	r0, #5
 8000caa:	f000 fbf9 	bl	80014a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000cae:	2005      	movs	r0, #5
 8000cb0:	f000 fc10 	bl	80014d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a5d      	ldr	r2, [pc, #372]	; (8000e54 <HAL_ETH_MspInit+0x194>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	f040 80b3 	bne.w	8000e4a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ce4:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000ce6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cea:	4a5b      	ldr	r2, [pc, #364]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000cf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d02:	4b55      	ldr	r3, [pc, #340]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d08:	4a53      	ldr	r2, [pc, #332]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d12:	4b51      	ldr	r3, [pc, #324]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d20:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d26:	4a4c      	ldr	r2, [pc, #304]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d30:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a3d      	ldr	r2, [pc, #244]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a35      	ldr	r2, [pc, #212]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a2e      	ldr	r2, [pc, #184]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_ETH_MspInit+0x198>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000db6:	2332      	movs	r3, #50	; 0x32
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <HAL_ETH_MspInit+0x19c>)
 8000dd2:	f001 fd0b 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dd6:	2386      	movs	r3, #134	; 0x86
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de6:	230b      	movs	r3, #11
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <HAL_ETH_MspInit+0x1a0>)
 8000df2:	f001 fcfb 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e08:	230b      	movs	r3, #11
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4814      	ldr	r0, [pc, #80]	; (8000e64 <HAL_ETH_MspInit+0x1a4>)
 8000e14:	f001 fcea 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <HAL_ETH_MspInit+0x1a8>)
 8000e36:	f001 fcd9 	bl	80027ec <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	203d      	movs	r0, #61	; 0x3d
 8000e40:	f000 fb2e 	bl	80014a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000e44:	203d      	movs	r0, #61	; 0x3d
 8000e46:	f000 fb45 	bl	80014d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3738      	adds	r7, #56	; 0x38
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40028000 	.word	0x40028000
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020800 	.word	0x58020800
 8000e60:	58020000 	.word	0x58020000
 8000e64:	58020400 	.word	0x58020400
 8000e68:	58021800 	.word	0x58021800

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0b8      	sub	sp, #224	; 0xe0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	22bc      	movs	r2, #188	; 0xbc
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f008 fb8f 	bl	80095b0 <memset>
  if(huart->Instance==USART3)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_UART_MspInit+0xc0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d142      	bne.n	8000f22 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fe9a 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eb6:	f7ff fed7 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_UART_MspInit+0xc4>)
 8000ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <HAL_UART_MspInit+0xc4>)
 8000ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_UART_MspInit+0xc4>)
 8000ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_UART_MspInit+0xc4>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_UART_MspInit+0xc4>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_UART_MspInit+0xc4>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f10:	2307      	movs	r3, #7
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_UART_MspInit+0xc8>)
 8000f1e:	f001 fc65 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	37e0      	adds	r7, #224	; 0xe0
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004800 	.word	0x40004800
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020c00 	.word	0x58020c00

08000f38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d844      	bhi.n	8000fd0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000f46:	2200      	movs	r2, #0
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	2019      	movs	r0, #25
 8000f4c:	f000 faa8 	bl	80014a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f50:	2019      	movs	r0, #25
 8000f52:	f000 fabf 	bl	80014d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f56:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <HAL_InitTick+0xb0>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_InitTick+0xb4>)
 8000f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f62:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_InitTick+0xb4>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_InitTick+0xb4>)
 8000f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f7a:	f107 020c 	add.w	r2, r7, #12
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fdeb 	bl	8003b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f8a:	f002 fdd3 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_InitTick+0xb8>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9b      	lsrs	r3, r3, #18
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_InitTick+0xbc>)
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_InitTick+0xc0>)
 8000fa6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0xbc>)
 8000faa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fb0:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_InitTick+0xbc>)
 8000fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_InitTick+0xbc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_InitTick+0xbc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_InitTick+0xbc>)
 8000fc4:	f004 f970 	bl	80052a8 <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d107      	bne.n	8000fde <HAL_InitTick+0xa6>
 8000fce:	e001      	b.n	8000fd4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e005      	b.n	8000fe0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <HAL_InitTick+0xbc>)
 8000fd6:	f004 f9c9 	bl	800536c <HAL_TIM_Base_Start_IT>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3738      	adds	r7, #56	; 0x38
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	24000008 	.word	0x24000008
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	431bde83 	.word	0x431bde83
 8000ff4:	24004bc8 	.word	0x24004bc8
 8000ff8:	40010000 	.word	0x40010000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM1_UP_IRQHandler+0x10>)
 800103e:	f004 fa05 	bl	800544c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	24004bc8 	.word	0x24004bc8

0800104c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <ETH_IRQHandler+0x10>)
 8001052:	f000 fc89 	bl	8001968 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	24004b0c 	.word	0x24004b0c

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f008 fa54 	bl	800953c <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	24080000 	.word	0x24080000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	2400009c 	.word	0x2400009c
 80010c8:	24004c68 	.word	0x24004c68

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <SystemInit+0xec>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a38      	ldr	r2, [pc, #224]	; (80011b8 <SystemInit+0xec>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <SystemInit+0xf0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	d807      	bhi.n	80010fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <SystemInit+0xf0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 030f 	bic.w	r3, r3, #15
 80010f4:	4a31      	ldr	r2, [pc, #196]	; (80011bc <SystemInit+0xf0>)
 80010f6:	f043 0307 	orr.w	r3, r3, #7
 80010fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <SystemInit+0xf4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <SystemInit+0xf4>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <SystemInit+0xf4>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <SystemInit+0xf4>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	492b      	ldr	r1, [pc, #172]	; (80011c0 <SystemInit+0xf4>)
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <SystemInit+0xf8>)
 8001116:	4013      	ands	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <SystemInit+0xf0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <SystemInit+0xf0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f023 030f 	bic.w	r3, r3, #15
 800112e:	4a23      	ldr	r2, [pc, #140]	; (80011bc <SystemInit+0xf0>)
 8001130:	f043 0307 	orr.w	r3, r3, #7
 8001134:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <SystemInit+0xf4>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <SystemInit+0xf4>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <SystemInit+0xf4>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <SystemInit+0xf4>)
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <SystemInit+0xfc>)
 800114c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <SystemInit+0xf4>)
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <SystemInit+0x100>)
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <SystemInit+0xf4>)
 8001156:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <SystemInit+0x104>)
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <SystemInit+0xf4>)
 800115c:	2200      	movs	r2, #0
 800115e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <SystemInit+0xf4>)
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <SystemInit+0x104>)
 8001164:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <SystemInit+0xf4>)
 8001168:	2200      	movs	r2, #0
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <SystemInit+0xf4>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <SystemInit+0x104>)
 8001170:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <SystemInit+0xf4>)
 8001174:	2200      	movs	r2, #0
 8001176:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <SystemInit+0xf4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <SystemInit+0xf4>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <SystemInit+0xf4>)
 8001186:	2200      	movs	r2, #0
 8001188:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <SystemInit+0x108>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <SystemInit+0x10c>)
 8001190:	4013      	ands	r3, r2
 8001192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001196:	d202      	bcs.n	800119e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <SystemInit+0x110>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <SystemInit+0x114>)
 80011a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SystemInit+0xec>)
 80011a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	52002000 	.word	0x52002000
 80011c0:	58024400 	.word	0x58024400
 80011c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011c8:	02020200 	.word	0x02020200
 80011cc:	01ff0000 	.word	0x01ff0000
 80011d0:	01010280 	.word	0x01010280
 80011d4:	5c001000 	.word	0x5c001000
 80011d8:	ffff0000 	.word	0xffff0000
 80011dc:	51008108 	.word	0x51008108
 80011e0:	52004000 	.word	0x52004000

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800121c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e8:	f7ff ff70 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f008 f999 	bl	8009548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001216:	f7ff fa37 	bl	8000688 <main>
  bx  lr
 800121a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001220:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001224:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001228:	0800a038 	.word	0x0800a038
  ldr r2, =_sbss
 800122c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001230:	24004c68 	.word	0x24004c68

08001234 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC3_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123e:	2003      	movs	r0, #3
 8001240:	f000 f923 	bl	800148a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001244:	f002 fab6 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_Init+0x68>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	4913      	ldr	r1, [pc, #76]	; (80012a4 <HAL_Init+0x6c>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_Init+0x68>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_Init+0x6c>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_Init+0x70>)
 800127a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_Init+0x74>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	200f      	movs	r0, #15
 8001284:	f7ff fe58 	bl	8000f38 <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e002      	b.n	8001298 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001292:	f7ff fcef 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400
 80012a4:	08009f5c 	.word	0x08009f5c
 80012a8:	24000004 	.word	0x24000004
 80012ac:	24000000 	.word	0x24000000

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2400000c 	.word	0x2400000c
 80012d4:	24004c14 	.word	0x24004c14

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	24004c14 	.word	0x24004c14

080012f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetREVID+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0c1b      	lsrs	r3, r3, #16
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	5c001000 	.word	0x5c001000

08001308 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001318:	4904      	ldr	r1, [pc, #16]	; (800132c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	58000400 	.word	0x58000400

08001330 <__NVIC_SetPriorityGrouping>:
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	4313      	orrs	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	05fa0000 	.word	0x05fa0000

08001378 <__NVIC_GetPriorityGrouping>:
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff4c 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ae:	f7ff ff63 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	6978      	ldr	r0, [r7, #20]
 80014ba:	f7ff ffb3 	bl	8001424 <NVIC_EncodePriority>
 80014be:	4602      	mov	r2, r0
 80014c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff82 	bl	80013d0 <__NVIC_SetPriority>
}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff56 	bl	8001394 <__NVIC_EnableIRQ>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014f4:	f3bf 8f5f 	dmb	sy
}
 80014f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_MPU_Disable+0x28>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_MPU_Disable+0x28>)
 8001500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001504:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_MPU_Disable+0x2c>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	e000ed90 	.word	0xe000ed90

08001520 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_MPU_Enable+0x38>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_MPU_Enable+0x3c>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_MPU_Enable+0x3c>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001544:	f3bf 8f6f 	isb	sy
}
 8001548:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed90 	.word	0xe000ed90
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	785a      	ldrb	r2, [r3, #1]
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_MPU_ConfigRegion+0x84>)
 800156e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d029      	beq.n	80015cc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_MPU_ConfigRegion+0x84>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7b1b      	ldrb	r3, [r3, #12]
 8001584:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7adb      	ldrb	r3, [r3, #11]
 800158a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800158c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7a9b      	ldrb	r3, [r3, #10]
 8001592:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001594:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b5b      	ldrb	r3, [r3, #13]
 800159a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800159c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7b9b      	ldrb	r3, [r3, #14]
 80015a2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7bdb      	ldrb	r3, [r3, #15]
 80015aa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7a5b      	ldrb	r3, [r3, #9]
 80015b2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7a1b      	ldrb	r3, [r3, #8]
 80015ba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015bc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015c6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80015ca:	e005      	b.n	80015d8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_MPU_ConfigRegion+0x84>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_MPU_ConfigRegion+0x84>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed90 	.word	0xe000ed90

080015e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0c6      	b.n	8001788 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fb5c 	bl	8000cc0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2223      	movs	r2, #35	; 0x23
 800160c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	4b60      	ldr	r3, [pc, #384]	; (8001790 <HAL_ETH_Init+0x1a8>)
 8001610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001614:	4a5e      	ldr	r2, [pc, #376]	; (8001790 <HAL_ETH_Init+0x1a8>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_ETH_Init+0x1a8>)
 8001620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7a1b      	ldrb	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fe67 	bl	8001308 <HAL_SYSCFG_ETHInterfaceSelect>
 800163a:	e003      	b.n	8001644 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800163c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001640:	f7ff fe62 	bl	8001308 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800165c:	f7ff fe3c 	bl	80012d8 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001662:	e00f      	b.n	8001684 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001664:	f7ff fe38 	bl	80012d8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001672:	d907      	bls.n	8001684 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2204      	movs	r2, #4
 8001678:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	22e0      	movs	r2, #224	; 0xe0
 800167e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e081      	b.n	8001788 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1e6      	bne.n	8001664 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fd2e 	bl	80020f8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800169c:	f002 fa04 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a3c      	ldr	r2, [pc, #240]	; (8001794 <HAL_ETH_Init+0x1ac>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9a      	lsrs	r2, r3, #18
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3a01      	subs	r2, #1
 80016b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fc81 	bl	8001fbc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80016d4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	22e0      	movs	r2, #224	; 0xe0
 80016ec:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e04a      	b.n	8001788 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80016fa:	4413      	add	r3, r2
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_ETH_Init+0x1b0>)
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6952      	ldr	r2, [r2, #20]
 8001706:	0052      	lsls	r2, r2, #1
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	6809      	ldr	r1, [r1, #0]
 800170c:	431a      	orrs	r2, r3
 800170e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001712:	440b      	add	r3, r1
 8001714:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fd46 	bl	80021a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fd8a 	bl	8002236 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	3305      	adds	r3, #5
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021a      	lsls	r2, r3, #8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	3304      	adds	r3, #4
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	3303      	adds	r3, #3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	061a      	lsls	r2, r3, #24
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001760:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800176e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001770:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2210      	movs	r2, #16
 800177e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2210      	movs	r2, #16
 8001784:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	58024400 	.word	0x58024400
 8001794:	431bde83 	.word	0x431bde83
 8001798:	ffff8001 	.word	0xffff8001

0800179c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d14c      	bne.n	8001846 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2223      	movs	r2, #35	; 0x23
 80017b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0202 	orr.w	r2, r2, #2
 80017c0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6811      	ldr	r1, [r2, #0]
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80017fe:	440b      	add	r3, r1
 8001800:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	f241 1308 	movw	r3, #4360	; 0x1108
 800180a:	4413      	add	r3, r2
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6811      	ldr	r1, [r2, #0]
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	f241 1308 	movw	r3, #4360	; 0x1108
 800181a:	440b      	add	r3, r1
 800181c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001830:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001834:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2210      	movs	r2, #16
 800183a:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2222      	movs	r2, #34	; 0x22
 8001840:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e073      	b.n	800195e <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800187a:	2b10      	cmp	r3, #16
 800187c:	d16e      	bne.n	800195c <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800187e:	2200      	movs	r2, #0
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fd34 	bl	80022f0 <ETH_Prepare_Tx_Descriptors>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001892:	f043 0202 	orr.w	r2, r3, #2
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e05f      	b.n	800195e <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3206      	adds	r2, #6
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d904      	bls.n	80018c8 <HAL_ETH_Transmit+0x74>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	1f1a      	subs	r2, r3, #4
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	3106      	adds	r1, #6
 80018d4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80018d8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80018dc:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80018de:	f7ff fcfb 	bl	80012d8 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80018e4:	e034      	b.n	8001950 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d011      	beq.n	800191c <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fc:	f043 0208 	orr.w	r2, r3, #8
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	22e0      	movs	r2, #224	; 0xe0
 8001916:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e020      	b.n	800195e <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001922:	d015      	beq.n	8001950 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001924:	f7ff fcd8 	bl	80012d8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	d302      	bcc.n	800193a <HAL_ETH_Transmit+0xe6>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193e:	f043 0204 	orr.w	r2, r3, #4
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	22e0      	movs	r2, #224	; 0xe0
 800194a:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e006      	b.n	800195e <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	dbc6      	blt.n	80018e6 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197e:	2b40      	cmp	r3, #64	; 0x40
 8001980:	d113      	bne.n	80019aa <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f241 1334 	movw	r3, #4404	; 0x1134
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001992:	2b40      	cmp	r3, #64	; 0x40
 8001994:	d109      	bne.n	80019aa <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8de 	bl	8001b58 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019a4:	f248 0240 	movw	r2, #32832	; 0x8040
 80019a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d113      	bne.n	80019e4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f241 1334 	movw	r3, #4404	; 0x1134
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d109      	bne.n	80019e4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f8b7 	bl	8001b44 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019de:	f248 0201 	movw	r2, #32769	; 0x8001
 80019e2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019f6:	d149      	bne.n	8001a8c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a00:	4413      	add	r3, r2
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a0c:	d13e      	bne.n	8001a8c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a12:	f043 0208 	orr.w	r2, r3, #8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2c:	d11b      	bne.n	8001a66 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f241 1302 	movw	r3, #4354	; 0x1102
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6811      	ldr	r1, [r2, #0]
 8001a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a56:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a5a:	440b      	add	r3, r1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	22e0      	movs	r2, #224	; 0xe0
 8001a62:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a64:	e00f      	b.n	8001a86 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a80:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001a84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f870 	bl	8001b6c <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a94:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001a98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001a9c:	d10e      	bne.n	8001abc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	22e0      	movs	r2, #224	; 0xe0
 8001aae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f865 	bl	8001b80 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d10f      	bne.n	8001aec <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ad4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f858 	bl	8001b94 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d10f      	bne.n	8001b1c <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f84a 	bl	8001ba8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_ETH_IRQHandler+0x1d8>)
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_ETH_IRQHandler+0x1d8>)
 8001b2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f843 	bl	8001bbc <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	58000080 	.word	0x58000080

08001b44 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e03e      	b.n	8001c70 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bfa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	055b      	lsls	r3, r3, #21
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f043 030c 	orr.w	r3, r3, #12
 8001c1e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001c32:	f7ff fb51 	bl	80012d8 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c38:	e009      	b.n	8001c4e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001c3a:	f7ff fb4d 	bl	80012d8 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c48:	d901      	bls.n	8001c4e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e010      	b.n	8001c70 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ed      	bne.n	8001c3a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001c8a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001c92:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	7b1b      	ldrb	r3, [r3, #12]
 8001c98:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001c9a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	7b5b      	ldrb	r3, [r3, #13]
 8001ca0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ca2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	7b9b      	ldrb	r3, [r3, #14]
 8001ca8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001caa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	7bdb      	ldrb	r3, [r3, #15]
 8001cb0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001cb2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	7c12      	ldrb	r2, [r2, #16]
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d102      	bne.n	8001cc2 <ETH_SetMACConfig+0x4a>
 8001cbc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cc0:	e000      	b.n	8001cc4 <ETH_SetMACConfig+0x4c>
 8001cc2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cc4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	7c52      	ldrb	r2, [r2, #17]
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	d102      	bne.n	8001cd4 <ETH_SetMACConfig+0x5c>
 8001cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cd2:	e000      	b.n	8001cd6 <ETH_SetMACConfig+0x5e>
 8001cd4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cd6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7c9b      	ldrb	r3, [r3, #18]
 8001cdc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cde:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ce4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001cea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	7f1b      	ldrb	r3, [r3, #28]
 8001cf0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001cf2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	7f5b      	ldrb	r3, [r3, #29]
 8001cf8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001cfa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	7f92      	ldrb	r2, [r2, #30]
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d102      	bne.n	8001d0a <ETH_SetMACConfig+0x92>
 8001d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d08:	e000      	b.n	8001d0c <ETH_SetMACConfig+0x94>
 8001d0a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001d0c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	7fdb      	ldrb	r3, [r3, #31]
 8001d12:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001d14:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d102      	bne.n	8001d26 <ETH_SetMACConfig+0xae>
 8001d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d24:	e000      	b.n	8001d28 <ETH_SetMACConfig+0xb0>
 8001d26:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001d28:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001d2e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d36:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001d38:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b56      	ldr	r3, [pc, #344]	; (8001ea4 <ETH_SetMACConfig+0x22c>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d62:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d64:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d6c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001d6e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d76:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001d78:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d102      	bne.n	8001d8a <ETH_SetMACConfig+0x112>
 8001d84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d88:	e000      	b.n	8001d8c <ETH_SetMACConfig+0x114>
 8001d8a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001d8c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <ETH_SetMACConfig+0x230>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	68f9      	ldr	r1, [r7, #12]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <ETH_SetMACConfig+0x234>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dd4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001dda:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d101      	bne.n	8001dea <ETH_SetMACConfig+0x172>
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	e000      	b.n	8001dec <ETH_SetMACConfig+0x174>
 8001dea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001dec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dfe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2a:	f023 0103 	bic.w	r1, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001e42:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d101      	bne.n	8001e66 <ETH_SetMACConfig+0x1ee>
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	e000      	b.n	8001e68 <ETH_SetMACConfig+0x1f0>
 8001e66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e68:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e72:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e88:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	00048083 	.word	0x00048083
 8001ea8:	c0f88000 	.word	0xc0f88000
 8001eac:	fffffef0 	.word	0xfffffef0

08001eb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <ETH_SetDMAConfig+0xf8>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	6809      	ldr	r1, [r1, #0]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001ed6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ee2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	7b1b      	ldrb	r3, [r3, #12]
 8001ee8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ef6:	4413      	add	r3, r2
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <ETH_SetDMAConfig+0xfc>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6811      	ldr	r1, [r2, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	f241 0304 	movw	r3, #4100	; 0x1004
 8001f0a:	440b      	add	r3, r1
 8001f0c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	7b5b      	ldrb	r3, [r3, #13]
 8001f12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <ETH_SetDMAConfig+0x100>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6811      	ldr	r1, [r2, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001f36:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	7d1b      	ldrb	r3, [r3, #20]
 8001f40:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f42:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7f5b      	ldrb	r3, [r3, #29]
 8001f48:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f56:	4413      	add	r3, r2
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <ETH_SetDMAConfig+0x104>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6811      	ldr	r1, [r2, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f6a:	440b      	add	r3, r1
 8001f6c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7f1b      	ldrb	r3, [r3, #28]
 8001f72:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f84:	4413      	add	r3, r2
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <ETH_SetDMAConfig+0x108>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6811      	ldr	r1, [r2, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f98:	440b      	add	r3, r1
 8001f9a:	601a      	str	r2, [r3, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	ffff87fd 	.word	0xffff87fd
 8001fac:	ffff2ffe 	.word	0xffff2ffe
 8001fb0:	fffec000 	.word	0xfffec000
 8001fb4:	ffc0efef 	.word	0xffc0efef
 8001fb8:	7fc0ffff 	.word	0x7fc0ffff

08001fbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0a4      	sub	sp, #144	; 0x90
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002004:	2300      	movs	r3, #0
 8002006:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002014:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002018:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002036:	2300      	movs	r3, #0
 8002038:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800203a:	2300      	movs	r3, #0
 800203c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800203e:	2300      	movs	r3, #0
 8002040:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800204e:	2301      	movs	r3, #1
 8002050:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002054:	2320      	movs	r3, #32
 8002056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800205a:	2301      	movs	r3, #1
 800205c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002066:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800206c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002070:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002096:	2300      	movs	r3, #0
 8002098:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fde6 	bl	8001c78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020ac:	2301      	movs	r3, #1
 80020ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020b0:	2301      	movs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80020dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fee1 	bl	8001eb0 <ETH_SetDMAConfig>
}
 80020ee:	bf00      	nop
 80020f0:	3790      	adds	r7, #144	; 0x90
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002108:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002110:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002112:	f001 fcc9 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8002116:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d908      	bls.n	8002132 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d804      	bhi.n	8002132 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e027      	b.n	8002182 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d908      	bls.n	800214c <ETH_MAC_MDIO_ClkConfig+0x54>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d204      	bcs.n	800214c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e01a      	b.n	8002182 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d303      	bcc.n	800215c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d911      	bls.n	8002180 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d908      	bls.n	8002176 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d804      	bhi.n	8002176 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e005      	b.n	8002182 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e000      	b.n	8002182 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002180:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	01312cff 	.word	0x01312cff
 8002198:	02160ebf 	.word	0x02160ebf
 800219c:	03938700 	.word	0x03938700
 80021a0:	05f5e0ff 	.word	0x05f5e0ff
 80021a4:	08f0d17f 	.word	0x08f0d17f

080021a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e01d      	b.n	80021f2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	3206      	adds	r2, #6
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d9de      	bls.n	80021b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f241 132c 	movw	r3, #4396	; 0x112c
 8002206:	4413      	add	r3, r2
 8002208:	2203      	movs	r2, #3
 800220a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68d9      	ldr	r1, [r3, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	f241 1314 	movw	r3, #4372	; 0x1114
 8002218:	4413      	add	r3, r2
 800221a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002228:	601a      	str	r2, [r3, #0]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e024      	b.n	800228e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6919      	ldr	r1, [r3, #16]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3310      	adds	r3, #16
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d9d7      	bls.n	8002244 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f241 1330 	movw	r3, #4400	; 0x1130
 80022ba:	4413      	add	r3, r2
 80022bc:	2203      	movs	r2, #3
 80022be:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6919      	ldr	r1, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80022cc:	4413      	add	r3, r2
 80022ce:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	f241 1328 	movw	r3, #4392	; 0x1128
 80022e0:	4413      	add	r3, r2
 80022e2:	6019      	str	r1, [r3, #0]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08d      	sub	sp, #52	; 0x34
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3318      	adds	r3, #24
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800230e:	2300      	movs	r3, #0
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800232e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002332:	d007      	beq.n	8002344 <ETH_Prepare_Tx_Descriptors+0x54>
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	3304      	adds	r3, #4
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002344:	2302      	movs	r3, #2
 8002346:	e24a      	b.n	80027de <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d044      	beq.n	80023de <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b72      	ldr	r3, [pc, #456]	; (8002524 <ETH_Prepare_Tx_Descriptors+0x234>)
 800235a:	4013      	ands	r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002360:	431a      	orrs	r2, r3
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002380:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d027      	beq.n	80023de <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	b29a      	uxth	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	431a      	orrs	r2, r3
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023cc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <ETH_Prepare_Tx_Descriptors+0x238>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	6992      	ldr	r2, [r2, #24]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <ETH_Prepare_Tx_Descriptors+0x130>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d030      	beq.n	8002482 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	3301      	adds	r3, #1
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	2b03      	cmp	r3, #3
 8002442:	d902      	bls.n	800244a <ETH_Prepare_Tx_Descriptors+0x15a>
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	3b04      	subs	r3, #4
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002452:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	3301      	adds	r3, #1
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002466:	d10c      	bne.n	8002482 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	e1ad      	b.n	80027de <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	3301      	adds	r3, #1
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002498:	4013      	ands	r3, r2
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	6852      	ldr	r2, [r2, #4]
 800249e:	431a      	orrs	r2, r3
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <ETH_Prepare_Tx_Descriptors+0x23c>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	6852      	ldr	r2, [r2, #4]
 80024c8:	0412      	lsls	r2, r2, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e008      	b.n	80024e4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <ETH_Prepare_Tx_Descriptors+0x23c>)
 80024de:	4013      	ands	r3, r2
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d021      	beq.n	8002534 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	04db      	lsls	r3, r3, #19
 80024fe:	431a      	orrs	r2, r3
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <ETH_Prepare_Tx_Descriptors+0x240>)
 800250a:	4013      	ands	r3, r2
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	69d2      	ldr	r2, [r2, #28]
 8002510:	431a      	orrs	r2, r3
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	e02e      	b.n	8002582 <ETH_Prepare_Tx_Descriptors+0x292>
 8002524:	ffff0000 	.word	0xffff0000
 8002528:	ffffc000 	.word	0xffffc000
 800252c:	c000ffff 	.word	0xc000ffff
 8002530:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b93      	ldr	r3, [pc, #588]	; (8002788 <ETH_Prepare_Tx_Descriptors+0x498>)
 800253a:	4013      	ands	r3, r2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	6852      	ldr	r2, [r2, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	431a      	orrs	r2, r3
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	431a      	orrs	r2, r3
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80cb 	beq.w	8002768 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	431a      	orrs	r2, r3
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80025e4:	e0c0      	b.n	8002768 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	3301      	adds	r3, #1
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d902      	bls.n	8002604 <ETH_Prepare_Tx_Descriptors+0x314>
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	3b04      	subs	r3, #4
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002626:	d007      	beq.n	8002638 <ETH_Prepare_Tx_Descriptors+0x348>
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	3304      	adds	r3, #4
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d026      	beq.n	8002686 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	e016      	b.n	800267a <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	3301      	adds	r3, #1
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b03      	cmp	r3, #3
 8002662:	d902      	bls.n	800266a <ETH_Prepare_Tx_Descriptors+0x37a>
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	3b04      	subs	r3, #4
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002672:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3301      	adds	r3, #1
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	429a      	cmp	r2, r3
 8002680:	d3e4      	bcc.n	800264c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8002682:	2302      	movs	r3, #2
 8002684:	e0ab      	b.n	80027de <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	3301      	adds	r3, #1
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b3a      	ldr	r3, [pc, #232]	; (800278c <ETH_Prepare_Tx_Descriptors+0x49c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	6852      	ldr	r2, [r2, #4]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	6852      	ldr	r2, [r2, #4]
 80026d2:	0412      	lsls	r2, r2, #16
 80026d4:	431a      	orrs	r2, r3
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	e008      	b.n	80026ee <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2200      	movs	r2, #0
 80026e0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00f      	beq.n	800271a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	69d2      	ldr	r2, [r2, #28]
 8002706:	431a      	orrs	r2, r3
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e017      	b.n	800274a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002720:	4013      	ands	r3, r2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	6852      	ldr	r2, [r2, #4]
 8002726:	431a      	orrs	r2, r3
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	431a      	orrs	r2, r3
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	3301      	adds	r3, #1
 800274e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f af3a 	bne.w	80025e6 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00f      	beq.n	8002798 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	e00e      	b.n	80027a4 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8002786:	bf00      	nop
 8002788:	ffff8000 	.word	0xffff8000
 800278c:	ffffc000 	.word	0xffffc000
 8002790:	c000ffff 	.word	0xc000ffff
 8002794:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b4:	6979      	ldr	r1, [r7, #20]
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	3304      	adds	r3, #4
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80027c6:	b672      	cpsid	i
}
 80027c8:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80027d8:	b662      	cpsie	i
}
 80027da:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3734      	adds	r7, #52	; 0x34
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <HAL_GPIO_Init+0x234>)
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027fe:	e194      	b.n	8002b2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8186 	beq.w	8002b24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d00b      	beq.n	8002838 <HAL_GPIO_Init+0x4c>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282c:	2b11      	cmp	r3, #17
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0201 	and.w	r2, r3, #1
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0xee>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80e0 	beq.w	8002b24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_GPIO_Init+0x238>)
 8002966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800296a:	4a2e      	ldr	r2, [pc, #184]	; (8002a24 <HAL_GPIO_Init+0x238>)
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_GPIO_Init+0x238>)
 8002976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002982:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <HAL_GPIO_Init+0x23c>)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	220f      	movs	r2, #15
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_GPIO_Init+0x240>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d052      	beq.n	8002a54 <HAL_GPIO_Init+0x268>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_GPIO_Init+0x244>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_GPIO_Init+0x22e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_GPIO_Init+0x248>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x22a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_GPIO_Init+0x24c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x226>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_GPIO_Init+0x250>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x222>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <HAL_GPIO_Init+0x254>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x21e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_GPIO_Init+0x258>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x21a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_GPIO_Init+0x25c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x216>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_GPIO_Init+0x260>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x212>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_GPIO_Init+0x264>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x20e>
 80029f6:	2309      	movs	r3, #9
 80029f8:	e02d      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 80029fa:	230a      	movs	r3, #10
 80029fc:	e02b      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e029      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e027      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a06:	2306      	movs	r3, #6
 8002a08:	e025      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	e023      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e021      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e01f      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e01d      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e01b      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a1e:	bf00      	nop
 8002a20:	58000080 	.word	0x58000080
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58000400 	.word	0x58000400
 8002a2c:	58020000 	.word	0x58020000
 8002a30:	58020400 	.word	0x58020400
 8002a34:	58020800 	.word	0x58020800
 8002a38:	58020c00 	.word	0x58020c00
 8002a3c:	58021000 	.word	0x58021000
 8002a40:	58021400 	.word	0x58021400
 8002a44:	58021800 	.word	0x58021800
 8002a48:	58021c00 	.word	0x58021c00
 8002a4c:	58022000 	.word	0x58022000
 8002a50:	58022400 	.word	0x58022400
 8002a54:	2300      	movs	r3, #0
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	f002 0203 	and.w	r2, r2, #3
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	4093      	lsls	r3, r2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a66:	4938      	ldr	r1, [pc, #224]	; (8002b48 <HAL_GPIO_Init+0x35c>)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f ae63 	bne.w	8002800 <HAL_GPIO_Init+0x14>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	3724      	adds	r7, #36	; 0x24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	58000400 	.word	0x58000400

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	041a      	lsls	r2, r3, #16
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_PWREx_ConfigSupply+0x70>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00a      	beq.n	8002bde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_PWREx_ConfigSupply+0x70>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e01f      	b.n	8002c1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e01d      	b.n	8002c1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_PWREx_ConfigSupply+0x70>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	490f      	ldr	r1, [pc, #60]	; (8002c24 <HAL_PWREx_ConfigSupply+0x70>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bee:	f7fe fb73 	bl	80012d8 <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bf4:	e009      	b.n	8002c0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bf6:	f7fe fb6f 	bl	80012d8 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c04:	d901      	bls.n	8002c0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_PWREx_ConfigSupply+0x70>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c16:	d1ee      	bne.n	8002bf6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	58024800 	.word	0x58024800

08002c28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08c      	sub	sp, #48	; 0x30
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e3ff      	b.n	800343a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8087 	beq.w	8002d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c48:	4b99      	ldr	r3, [pc, #612]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c52:	4b97      	ldr	r3, [pc, #604]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d007      	beq.n	8002c6e <HAL_RCC_OscConfig+0x46>
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	2b18      	cmp	r3, #24
 8002c62:	d110      	bne.n	8002c86 <HAL_RCC_OscConfig+0x5e>
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d10b      	bne.n	8002c86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6e:	4b90      	ldr	r3, [pc, #576]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d06c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x12c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d168      	bne.n	8002d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e3d9      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x76>
 8002c90:	4b87      	ldr	r3, [pc, #540]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a86      	ldr	r2, [pc, #536]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e02e      	b.n	8002cfc <HAL_RCC_OscConfig+0xd4>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x98>
 8002ca6:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a81      	ldr	r2, [pc, #516]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b7f      	ldr	r3, [pc, #508]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7e      	ldr	r2, [pc, #504]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e01d      	b.n	8002cfc <HAL_RCC_OscConfig+0xd4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xbc>
 8002cca:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0xd4>
 8002ce4:	4b72      	ldr	r3, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a71      	ldr	r2, [pc, #452]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fae8 	bl	80012d8 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fae4 	bl	80012d8 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e38d      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d1e:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0xe4>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fad4 	bl	80012d8 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fe fad0 	bl	80012d8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e379      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d46:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x10c>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80ae 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d64:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d6e:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_RCC_OscConfig+0x162>
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	2b18      	cmp	r3, #24
 8002d7e:	d13a      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1ce>
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d135      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e34b      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	f7fe faa5 	bl	80012f0 <HAL_GetREVID>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d817      	bhi.n	8002de0 <HAL_RCC_OscConfig+0x1b8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d108      	bne.n	8002dca <HAL_RCC_OscConfig+0x1a2>
 8002db8:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002dc0:	4a3b      	ldr	r2, [pc, #236]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc8:	e07a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	031b      	lsls	r3, r3, #12
 8002dd8:	4935      	ldr	r1, [pc, #212]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dde:	e06f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	4930      	ldr	r1, [pc, #192]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df4:	e064      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d045      	beq.n	8002e8a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0219 	bic.w	r2, r3, #25
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4929      	ldr	r1, [pc, #164]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe fa62 	bl	80012d8 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe fa5e 	bl	80012d8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e307      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	f7fe fa5b 	bl	80012f0 <HAL_GetREVID>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d817      	bhi.n	8002e74 <HAL_RCC_OscConfig+0x24c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d108      	bne.n	8002e5e <HAL_RCC_OscConfig+0x236>
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5a:	6053      	str	r3, [r2, #4]
 8002e5c:	e030      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	031b      	lsls	r3, r3, #12
 8002e6c:	4910      	ldr	r1, [pc, #64]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
 8002e72:	e025      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
 8002e88:	e01a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <HAL_RCC_OscConfig+0x288>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe fa1f 	bl	80012d8 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7fe fa1b 	bl	80012d8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d903      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e2c4      	b.n	800343a <HAL_RCC_OscConfig+0x812>
 8002eb0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb4:	4ba4      	ldr	r3, [pc, #656]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a9 	beq.w	8003020 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ece:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed8:	4b9b      	ldr	r3, [pc, #620]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d007      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2cc>
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b18      	cmp	r3, #24
 8002ee8:	d13a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x338>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d135      	bne.n	8002f60 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef4:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2e4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e296      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f0c:	f7fe f9f0 	bl	80012f0 <HAL_GetREVID>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d817      	bhi.n	8002f4a <HAL_RCC_OscConfig+0x322>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d108      	bne.n	8002f34 <HAL_RCC_OscConfig+0x30c>
 8002f22:	4b89      	ldr	r3, [pc, #548]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f2a:	4a87      	ldr	r2, [pc, #540]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f32:	e075      	b.n	8003020 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f34:	4b84      	ldr	r3, [pc, #528]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	069b      	lsls	r3, r3, #26
 8002f42:	4981      	ldr	r1, [pc, #516]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f48:	e06a      	b.n	8003020 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	497b      	ldr	r1, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f5e:	e05f      	b.n	8003020 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d042      	beq.n	8002fee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f68:	4b77      	ldr	r3, [pc, #476]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a76      	ldr	r2, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f9b0 	bl	80012d8 <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f7c:	f7fe f9ac 	bl	80012d8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e255      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f8e:	4b6e      	ldr	r3, [pc, #440]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f9a:	f7fe f9a9 	bl	80012f0 <HAL_GetREVID>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d817      	bhi.n	8002fd8 <HAL_RCC_OscConfig+0x3b0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d108      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x39a>
 8002fb0:	4b65      	ldr	r3, [pc, #404]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fb8:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fbe:	6053      	str	r3, [r2, #4]
 8002fc0:	e02e      	b.n	8003020 <HAL_RCC_OscConfig+0x3f8>
 8002fc2:	4b61      	ldr	r3, [pc, #388]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	069b      	lsls	r3, r3, #26
 8002fd0:	495d      	ldr	r1, [pc, #372]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
 8002fd6:	e023      	b.n	8003020 <HAL_RCC_OscConfig+0x3f8>
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	4958      	ldr	r1, [pc, #352]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
 8002fec:	e018      	b.n	8003020 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a55      	ldr	r2, [pc, #340]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8002ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe f96d 	bl	80012d8 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003002:	f7fe f969 	bl	80012d8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e212      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d036      	beq.n	800309a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d019      	beq.n	8003068 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003034:	4b44      	ldr	r3, [pc, #272]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8003036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003038:	4a43      	ldr	r2, [pc, #268]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe f94a 	bl	80012d8 <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003048:	f7fe f946 	bl	80012d8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1ef      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x420>
 8003066:	e018      	b.n	800309a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003068:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	4a36      	ldr	r2, [pc, #216]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f930 	bl	80012d8 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe f92c 	bl	80012d8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1d5      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308e:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d036      	beq.n	8003114 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a25      	ldr	r2, [pc, #148]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 80030b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ba:	f7fe f90d 	bl	80012d8 <HAL_GetTick>
 80030be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030c2:	f7fe f909 	bl	80012d8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1b2      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x49a>
 80030e0:	e018      	b.n	8003114 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 80030e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ee:	f7fe f8f3 	bl	80012d8 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe f8ef 	bl	80012d8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e198      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_RCC_OscConfig+0x520>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8085 	beq.w	800322c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_RCC_OscConfig+0x524>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_OscConfig+0x524>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312e:	f7fe f8d3 	bl	80012d8 <HAL_GetTick>
 8003132:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003134:	e00c      	b.n	8003150 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe f8cf 	bl	80012d8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d905      	bls.n	8003150 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e178      	b.n	800343a <HAL_RCC_OscConfig+0x812>
 8003148:	58024400 	.word	0x58024400
 800314c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003150:	4b96      	ldr	r3, [pc, #600]	; (80033ac <HAL_RCC_OscConfig+0x784>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ec      	beq.n	8003136 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x54a>
 8003164:	4b92      	ldr	r3, [pc, #584]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a91      	ldr	r2, [pc, #580]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	e02d      	b.n	80031ce <HAL_RCC_OscConfig+0x5a6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x56c>
 800317a:	4b8d      	ldr	r3, [pc, #564]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a8c      	ldr	r2, [pc, #560]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
 8003186:	4b8a      	ldr	r3, [pc, #552]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a89      	ldr	r2, [pc, #548]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	e01c      	b.n	80031ce <HAL_RCC_OscConfig+0x5a6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d10c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x58e>
 800319c:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a83      	ldr	r2, [pc, #524]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
 80031a8:	4b81      	ldr	r3, [pc, #516]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a80      	ldr	r2, [pc, #512]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0x5a6>
 80031b6:	4b7e      	ldr	r3, [pc, #504]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	4a7d      	ldr	r2, [pc, #500]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6713      	str	r3, [r2, #112]	; 0x70
 80031c2:	4b7b      	ldr	r3, [pc, #492]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a7a      	ldr	r2, [pc, #488]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fe f87f 	bl	80012d8 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe f87b 	bl	80012d8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e122      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f4:	4b6e      	ldr	r3, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCC_OscConfig+0x5b6>
 8003200:	e014      	b.n	800322c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe f869 	bl	80012d8 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe f865 	bl	80012d8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e10c      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003220:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8101 	beq.w	8003438 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003236:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800323e:	2b18      	cmp	r3, #24
 8003240:	f000 80bc 	beq.w	80033bc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b02      	cmp	r3, #2
 800324a:	f040 8095 	bne.w	8003378 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a57      	ldr	r2, [pc, #348]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe f83d 	bl	80012d8 <HAL_GetTick>
 800325e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe f839 	bl	80012d8 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0e2      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003274:	4b4e      	ldr	r3, [pc, #312]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCC_OscConfig+0x78c>)
 8003286:	4013      	ands	r3, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	430a      	orrs	r2, r1
 8003294:	4946      	ldr	r1, [pc, #280]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003296:	4313      	orrs	r3, r2
 8003298:	628b      	str	r3, [r1, #40]	; 0x28
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	3b01      	subs	r3, #1
 80032a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	3b01      	subs	r3, #1
 80032aa:	025b      	lsls	r3, r3, #9
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	3b01      	subs	r3, #1
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	3b01      	subs	r3, #1
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032ca:	4939      	ldr	r1, [pc, #228]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80032d0:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032dc:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <HAL_RCC_OscConfig+0x790>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032e8:	00d2      	lsls	r2, r2, #3
 80032ea:	4931      	ldr	r1, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032f0:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	f023 020c 	bic.w	r2, r3, #12
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	492c      	ldr	r1, [pc, #176]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	f023 0202 	bic.w	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	4928      	ldr	r1, [pc, #160]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003310:	4313      	orrs	r3, r2
 8003312:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800331a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003320:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800332c:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fd ffc2 	bl	80012d8 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003358:	f7fd ffbe 	bl	80012d8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e067      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x730>
 8003376:	e05f      	b.n	8003438 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0c      	ldr	r2, [pc, #48]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 800337e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd ffa8 	bl	80012d8 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338c:	f7fd ffa4 	bl	80012d8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e04d      	b.n	800343a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <HAL_RCC_OscConfig+0x788>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x764>
 80033aa:	e045      	b.n	8003438 <HAL_RCC_OscConfig+0x810>
 80033ac:	58024800 	.word	0x58024800
 80033b0:	58024400 	.word	0x58024400
 80033b4:	fffffc0c 	.word	0xfffffc0c
 80033b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_OscConfig+0x81c>)
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_OscConfig+0x81c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d031      	beq.n	8003434 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f003 0203 	and.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d12a      	bne.n	8003434 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d122      	bne.n	8003434 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d11a      	bne.n	8003434 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0a5b      	lsrs	r3, r3, #9
 8003402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d111      	bne.n	8003434 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d108      	bne.n	8003434 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	0e1b      	lsrs	r3, r3, #24
 8003426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3730      	adds	r7, #48	; 0x30
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	58024400 	.word	0x58024400

08003448 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e19c      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b8a      	ldr	r3, [pc, #552]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d910      	bls.n	800348c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b87      	ldr	r3, [pc, #540]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 020f 	bic.w	r2, r3, #15
 8003472:	4985      	ldr	r1, [pc, #532]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b83      	ldr	r3, [pc, #524]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e184      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d010      	beq.n	80034ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	4b7b      	ldr	r3, [pc, #492]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d908      	bls.n	80034ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034a8:	4b78      	ldr	r3, [pc, #480]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	4975      	ldr	r1, [pc, #468]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034d6:	4b6d      	ldr	r3, [pc, #436]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	496a      	ldr	r1, [pc, #424]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	4b64      	ldr	r3, [pc, #400]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003500:	429a      	cmp	r2, r3
 8003502:	d908      	bls.n	8003516 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	495e      	ldr	r1, [pc, #376]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003512:	4313      	orrs	r3, r2
 8003514:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d010      	beq.n	8003544 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800352e:	429a      	cmp	r2, r3
 8003530:	d908      	bls.n	8003544 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003532:	4b56      	ldr	r3, [pc, #344]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4953      	ldr	r1, [pc, #332]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003540:	4313      	orrs	r3, r2
 8003542:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	4b4d      	ldr	r3, [pc, #308]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	429a      	cmp	r2, r3
 800355e:	d908      	bls.n	8003572 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b4a      	ldr	r3, [pc, #296]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f023 020f 	bic.w	r2, r3, #15
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4947      	ldr	r1, [pc, #284]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 800356e:	4313      	orrs	r3, r2
 8003570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d055      	beq.n	800362a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	4940      	ldr	r1, [pc, #256]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 800358c:	4313      	orrs	r3, r2
 800358e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003598:	4b3c      	ldr	r3, [pc, #240]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d121      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0f6      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d115      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0ea      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0de      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035d8:	4b2c      	ldr	r3, [pc, #176]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0d6      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f023 0207 	bic.w	r2, r3, #7
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4925      	ldr	r1, [pc, #148]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd fe6d 	bl	80012d8 <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003600:	e00a      	b.n	8003618 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003602:	f7fd fe69 	bl	80012d8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0be      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003618:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	429a      	cmp	r2, r3
 8003628:	d1eb      	bne.n	8003602 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	429a      	cmp	r2, r3
 8003644:	d208      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f023 020f 	bic.w	r2, r3, #15
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RCC_ClockConfig+0x244>)
 8003654:	4313      	orrs	r3, r2
 8003656:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d214      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 020f 	bic.w	r2, r3, #15
 800366e:	4906      	ldr	r1, [pc, #24]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_RCC_ClockConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e086      	b.n	8003796 <HAL_RCC_ClockConfig+0x34e>
 8003688:	52002000 	.word	0x52002000
 800368c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d208      	bcs.n	80036be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036ac:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	4939      	ldr	r1, [pc, #228]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d010      	beq.n	80036ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d208      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	492e      	ldr	r1, [pc, #184]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003704:	429a      	cmp	r2, r3
 8003706:	d208      	bcs.n	800371a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4922      	ldr	r1, [pc, #136]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 8003716:	4313      	orrs	r3, r2
 8003718:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003732:	429a      	cmp	r2, r3
 8003734:	d208      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4917      	ldr	r1, [pc, #92]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 8003744:	4313      	orrs	r3, r2
 8003746:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003748:	f000 f834 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	4912      	ldr	r1, [pc, #72]	; (80037a4 <HAL_RCC_ClockConfig+0x35c>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_RCC_ClockConfig+0x358>)
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <HAL_RCC_ClockConfig+0x35c>)
 8003770:	5cd3      	ldrb	r3, [r2, r3]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x360>)
 800377e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003780:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x364>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x368>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fbd4 	bl	8000f38 <HAL_InitTick>
 8003790:	4603      	mov	r3, r0
 8003792:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	58024400 	.word	0x58024400
 80037a4:	08009f5c 	.word	0x08009f5c
 80037a8:	24000004 	.word	0x24000004
 80037ac:	24000000 	.word	0x24000000
 80037b0:	24000008 	.word	0x24000008

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ba:	4bb3      	ldr	r3, [pc, #716]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c2:	2b18      	cmp	r3, #24
 80037c4:	f200 8155 	bhi.w	8003a72 <HAL_RCC_GetSysClockFreq+0x2be>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	08003835 	.word	0x08003835
 80037d4:	08003a73 	.word	0x08003a73
 80037d8:	08003a73 	.word	0x08003a73
 80037dc:	08003a73 	.word	0x08003a73
 80037e0:	08003a73 	.word	0x08003a73
 80037e4:	08003a73 	.word	0x08003a73
 80037e8:	08003a73 	.word	0x08003a73
 80037ec:	08003a73 	.word	0x08003a73
 80037f0:	0800385b 	.word	0x0800385b
 80037f4:	08003a73 	.word	0x08003a73
 80037f8:	08003a73 	.word	0x08003a73
 80037fc:	08003a73 	.word	0x08003a73
 8003800:	08003a73 	.word	0x08003a73
 8003804:	08003a73 	.word	0x08003a73
 8003808:	08003a73 	.word	0x08003a73
 800380c:	08003a73 	.word	0x08003a73
 8003810:	08003861 	.word	0x08003861
 8003814:	08003a73 	.word	0x08003a73
 8003818:	08003a73 	.word	0x08003a73
 800381c:	08003a73 	.word	0x08003a73
 8003820:	08003a73 	.word	0x08003a73
 8003824:	08003a73 	.word	0x08003a73
 8003828:	08003a73 	.word	0x08003a73
 800382c:	08003a73 	.word	0x08003a73
 8003830:	08003867 	.word	0x08003867
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003834:	4b94      	ldr	r3, [pc, #592]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003840:	4b91      	ldr	r3, [pc, #580]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	08db      	lsrs	r3, r3, #3
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	4a90      	ldr	r2, [pc, #576]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
 8003850:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003852:	e111      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003854:	4b8d      	ldr	r3, [pc, #564]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003856:	61bb      	str	r3, [r7, #24]
    break;
 8003858:	e10e      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800385a:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800385c:	61bb      	str	r3, [r7, #24]
    break;
 800385e:	e10b      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003860:	4b8c      	ldr	r3, [pc, #560]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003862:	61bb      	str	r3, [r7, #24]
    break;
 8003864:	e108      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003866:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003870:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800387c:	4b82      	ldr	r3, [pc, #520]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003886:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	08db      	lsrs	r3, r3, #3
 800388c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80e1 	beq.w	8003a6c <HAL_RCC_GetSysClockFreq+0x2b8>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	f000 8083 	beq.w	80039b8 <HAL_RCC_GetSysClockFreq+0x204>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f200 80a1 	bhi.w	80039fc <HAL_RCC_GetSysClockFreq+0x248>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x114>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d056      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038c6:	e099      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038c8:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02d      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038d4:	4b6c      	ldr	r3, [pc, #432]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	4a6b      	ldr	r2, [pc, #428]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b62      	ldr	r3, [pc, #392]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003912:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800392e:	e087      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a02 	vldr	s12, [r7, #8]
 8003956:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003972:	e065      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003996:	ed97 6a02 	vldr	s12, [r7, #8]
 800399a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800399e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039b6:	e043      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039da:	ed97 6a02 	vldr	s12, [r7, #8]
 80039de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039fa:	e021      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	0a5b      	lsrs	r3, r3, #9
 8003a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a64:	ee17 3a90 	vmov	r3, s15
 8003a68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a6a:	e005      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
    break;
 8003a70:	e002      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a74:	61bb      	str	r3, [r7, #24]
    break;
 8003a76:	bf00      	nop
  }

  return sysclockfreq;
 8003a78:	69bb      	ldr	r3, [r7, #24]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3724      	adds	r7, #36	; 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	03d09000 	.word	0x03d09000
 8003a90:	003d0900 	.word	0x003d0900
 8003a94:	017d7840 	.word	0x017d7840
 8003a98:	46000000 	.word	0x46000000
 8003a9c:	4c742400 	.word	0x4c742400
 8003aa0:	4a742400 	.word	0x4a742400
 8003aa4:	4bbebc20 	.word	0x4bbebc20

08003aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003aae:	f7ff fe81 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490f      	ldr	r1, [pc, #60]	; (8003afc <HAL_RCC_GetHCLKFreq+0x54>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_GetHCLKFreq+0x54>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ae4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ae6:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x58>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	58024400 	.word	0x58024400
 8003afc:	08009f5c 	.word	0x08009f5c
 8003b00:	24000004 	.word	0x24000004
 8003b04:	24000000 	.word	0x24000000

08003b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b0c:	f7ff ffcc 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4904      	ldr	r1, [pc, #16]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	08009f5c 	.word	0x08009f5c

08003b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b38:	f7ff ffb6 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	08009f5c 	.word	0x08009f5c

08003b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0207 	and.w	r2, r3, #7
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetClockConfig+0x80>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	52002000 	.word	0x52002000

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bec:	2300      	movs	r3, #0
 8003bee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d03f      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c08:	d02a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c0e:	d824      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c14:	d018      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c1a:	d81e      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c24:	d007      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c26:	e018      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4bab      	ldr	r3, [pc, #684]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	4aaa      	ldr	r2, [pc, #680]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c34:	e015      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f9cf 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c46:	e00c      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3324      	adds	r3, #36	; 0x24
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fa78 	bl	8005144 <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c68:	4b9b      	ldr	r3, [pc, #620]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	4998      	ldr	r1, [pc, #608]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	650b      	str	r3, [r1, #80]	; 0x50
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03d      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d826      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cb1 	.word	0x08003cb1
 8003ca0:	08003cbf 	.word	0x08003cbf
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	08003ce9 	.word	0x08003ce9
 8003cac:	08003ce9 	.word	0x08003ce9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb0:	4b89      	ldr	r3, [pc, #548]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	4a88      	ldr	r2, [pc, #544]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cbc:	e015      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 f98b 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cce:	e00c      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3324      	adds	r3, #36	; 0x24
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fa34 	bl	8005144 <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b79      	ldr	r3, [pc, #484]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	f023 0207 	bic.w	r2, r3, #7
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	4976      	ldr	r1, [pc, #472]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	650b      	str	r3, [r1, #80]	; 0x50
 8003d02:	e001      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d042      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1c:	d02b      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d825      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d24:	2bc0      	cmp	r3, #192	; 0xc0
 8003d26:	d028      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d28:	2bc0      	cmp	r3, #192	; 0xc0
 8003d2a:	d821      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d2c:	2b80      	cmp	r3, #128	; 0x80
 8003d2e:	d016      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d30:	2b80      	cmp	r3, #128	; 0x80
 8003d32:	d81d      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d007      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003d3c:	e018      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3e:	4b66      	ldr	r3, [pc, #408]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	4a65      	ldr	r2, [pc, #404]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d4a:	e017      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f944 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d5c:	e00e      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3324      	adds	r3, #36	; 0x24
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 f9ed 	bl	8005144 <RCCEx_PLL3_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d6e:	e005      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
      break;
 8003d74:	e002      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d82:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	4952      	ldr	r1, [pc, #328]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	650b      	str	r3, [r1, #80]	; 0x50
 8003d94:	e001      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d049      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db0:	d030      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003db2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db6:	d82a      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003db8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dbc:	d02c      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003dbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dc2:	d824      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc8:	d018      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dce:	d81e      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd8:	d007      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003dda:	e018      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a3d      	ldr	r2, [pc, #244]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003de8:	e017      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 f8f5 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003dfa:	e00e      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3324      	adds	r3, #36	; 0x24
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 f99e 	bl	8005144 <RCCEx_PLL3_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e0c:	e005      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e20:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e2e:	492a      	ldr	r1, [pc, #168]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	658b      	str	r3, [r1, #88]	; 0x58
 8003e34:	e001      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d04c      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e50:	d030      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e56:	d82a      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e5c:	d02c      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003e5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e62:	d824      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e68:	d018      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e6e:	d81e      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e78:	d007      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003e7a:	e018      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e88:	e017      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f8a5 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e00e      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3324      	adds	r3, #36	; 0x24
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f94e 	bl	8005144 <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eac:	e005      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ece:	4902      	ldr	r1, [pc, #8]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed4:	e004      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d032      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	2b30      	cmp	r3, #48	; 0x30
 8003ef2:	d01c      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ef4:	2b30      	cmp	r3, #48	; 0x30
 8003ef6:	d817      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d00c      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d813      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d016      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d10f      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4baf      	ldr	r3, [pc, #700]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4aae      	ldr	r2, [pc, #696]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f14:	e00e      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 f85f 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f26:	e005      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f2c:	e002      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f3a:	4ba3      	ldr	r3, [pc, #652]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f46:	49a0      	ldr	r1, [pc, #640]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f4c:	e001      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d047      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f66:	d030      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6c:	d82a      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f72:	d02c      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003f74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f78:	d824      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7e:	d018      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	d81e      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	d007      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003f90:	e018      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f92:	4b8d      	ldr	r3, [pc, #564]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4a8c      	ldr	r2, [pc, #560]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f9e:	e017      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 f81a 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fb0:	e00e      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3324      	adds	r3, #36	; 0x24
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f8c3 	bl	8005144 <RCCEx_PLL3_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fc2:	e005      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc8:	e002      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003fca:	bf00      	nop
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fd6:	4b7c      	ldr	r3, [pc, #496]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fda:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	4979      	ldr	r1, [pc, #484]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	650b      	str	r3, [r1, #80]	; 0x50
 8003fe8:	e001      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d049      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004002:	d02e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004008:	d828      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800400a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800400e:	d02a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004014:	d822      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800401a:	d026      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800401c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004020:	d81c      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004026:	d010      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800402c:	d816      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004036:	d111      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ffce 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004048:	e012      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f001 f877 	bl	8005144 <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800405a:	e009      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004062:	bf00      	nop
 8004064:	e004      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800406e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004076:	4b54      	ldr	r3, [pc, #336]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004082:	4951      	ldr	r1, [pc, #324]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004084:	4313      	orrs	r3, r2
 8004086:	650b      	str	r3, [r1, #80]	; 0x50
 8004088:	e001      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d04b      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a4:	d02e      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80040a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040aa:	d828      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d02a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d822      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040bc:	d026      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80040be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c2:	d81c      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c8:	d010      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80040ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ce:	d816      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80040d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d8:	d111      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	2101      	movs	r1, #1
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 ff7d 	bl	8004fe0 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040ea:	e012      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3324      	adds	r3, #36	; 0x24
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 f826 	bl	8005144 <RCCEx_PLL3_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040fc:	e009      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
      break;
 8004102:	e006      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004104:	bf00      	nop
 8004106:	e004      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004108:	bf00      	nop
 800410a:	e002      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800410c:	bf00      	nop
 800410e:	e000      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004118:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004126:	4928      	ldr	r1, [pc, #160]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	658b      	str	r3, [r1, #88]	; 0x58
 800412c:	e001      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02f      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004146:	d00e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414c:	d814      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d015      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004156:	d10f      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800415e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004164:	e00c      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f000 ff37 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004176:	e003      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
      break;
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800417e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	490d      	ldr	r1, [pc, #52]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	650b      	str	r3, [r1, #80]	; 0x50
 8004198:	e001      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d033      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d81c      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041f3 	.word	0x080041f3
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041db 	.word	0x080041db
 80041c4:	080041f3 	.word	0x080041f3
 80041c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041cc:	4bb8      	ldr	r3, [pc, #736]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	4ab7      	ldr	r2, [pc, #732]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041d8:	e00c      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	2102      	movs	r1, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fefd 	bl	8004fe0 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
      break;
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80041f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041fa:	4bad      	ldr	r3, [pc, #692]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	49aa      	ldr	r1, [pc, #680]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800420c:	e001      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8086 	beq.w	800432c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004220:	4ba4      	ldr	r3, [pc, #656]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4aa3      	ldr	r2, [pc, #652]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422c:	f7fd f854 	bl	80012d8 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004232:	e009      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004234:	f7fd f850 	bl	80012d8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d902      	bls.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	75fb      	strb	r3, [r7, #23]
        break;
 8004246:	e005      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004248:	4b9a      	ldr	r3, [pc, #616]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ef      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d166      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800425a:	4b95      	ldr	r3, [pc, #596]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800425c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004264:	4053      	eors	r3, r2
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d013      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426e:	4b90      	ldr	r3, [pc, #576]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004278:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a8c      	ldr	r2, [pc, #560]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004284:	4b8a      	ldr	r3, [pc, #552]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a89      	ldr	r2, [pc, #548]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004290:	4a87      	ldr	r2, [pc, #540]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800429c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a0:	d115      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd f819 	bl	80012d8 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a8:	e00b      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fd f815 	bl	80012d8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d902      	bls.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	75fb      	strb	r3, [r7, #23]
            break;
 80042c0:	e005      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c2:	4b7b      	ldr	r3, [pc, #492]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ed      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d126      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e2:	d10d      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80042e4:	4b72      	ldr	r3, [pc, #456]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f2:	0919      	lsrs	r1, r3, #4
 80042f4:	4b70      	ldr	r3, [pc, #448]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80042f6:	400b      	ands	r3, r1
 80042f8:	496d      	ldr	r1, [pc, #436]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	610b      	str	r3, [r1, #16]
 80042fe:	e005      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004300:	4b6b      	ldr	r3, [pc, #428]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4a6a      	ldr	r2, [pc, #424]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004306:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800430a:	6113      	str	r3, [r2, #16]
 800430c:	4b68      	ldr	r3, [pc, #416]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800430e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431a:	4965      	ldr	r1, [pc, #404]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	670b      	str	r3, [r1, #112]	; 0x70
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	75bb      	strb	r3, [r7, #22]
 8004326:	e001      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d07e      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433c:	2b28      	cmp	r3, #40	; 0x28
 800433e:	d867      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	08004417 	.word	0x08004417
 800434c:	08004411 	.word	0x08004411
 8004350:	08004411 	.word	0x08004411
 8004354:	08004411 	.word	0x08004411
 8004358:	08004411 	.word	0x08004411
 800435c:	08004411 	.word	0x08004411
 8004360:	08004411 	.word	0x08004411
 8004364:	08004411 	.word	0x08004411
 8004368:	080043ed 	.word	0x080043ed
 800436c:	08004411 	.word	0x08004411
 8004370:	08004411 	.word	0x08004411
 8004374:	08004411 	.word	0x08004411
 8004378:	08004411 	.word	0x08004411
 800437c:	08004411 	.word	0x08004411
 8004380:	08004411 	.word	0x08004411
 8004384:	08004411 	.word	0x08004411
 8004388:	080043ff 	.word	0x080043ff
 800438c:	08004411 	.word	0x08004411
 8004390:	08004411 	.word	0x08004411
 8004394:	08004411 	.word	0x08004411
 8004398:	08004411 	.word	0x08004411
 800439c:	08004411 	.word	0x08004411
 80043a0:	08004411 	.word	0x08004411
 80043a4:	08004411 	.word	0x08004411
 80043a8:	08004417 	.word	0x08004417
 80043ac:	08004411 	.word	0x08004411
 80043b0:	08004411 	.word	0x08004411
 80043b4:	08004411 	.word	0x08004411
 80043b8:	08004411 	.word	0x08004411
 80043bc:	08004411 	.word	0x08004411
 80043c0:	08004411 	.word	0x08004411
 80043c4:	08004411 	.word	0x08004411
 80043c8:	08004417 	.word	0x08004417
 80043cc:	08004411 	.word	0x08004411
 80043d0:	08004411 	.word	0x08004411
 80043d4:	08004411 	.word	0x08004411
 80043d8:	08004411 	.word	0x08004411
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004411 	.word	0x08004411
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004417 	.word	0x08004417
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	2101      	movs	r1, #1
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fdf4 	bl	8004fe0 <RCCEx_PLL2_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043fc:	e00c      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3324      	adds	r3, #36	; 0x24
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fe9d 	bl	8005144 <RCCEx_PLL3_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800440e:	e003      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
      break;
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442a:	4921      	ldr	r1, [pc, #132]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	654b      	str	r3, [r1, #84]	; 0x54
 8004430:	e001      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d03e      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	2b05      	cmp	r3, #5
 8004448:	d820      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004493 	.word	0x08004493
 8004454:	08004469 	.word	0x08004469
 8004458:	0800447b 	.word	0x0800447b
 800445c:	08004493 	.word	0x08004493
 8004460:	08004493 	.word	0x08004493
 8004464:	08004493 	.word	0x08004493
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	2101      	movs	r1, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fdb6 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004478:	e00c      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3324      	adds	r3, #36	; 0x24
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fe5f 	bl	8005144 <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800448a:	e003      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
      break;
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d110      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f023 0207 	bic.w	r2, r3, #7
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a6:	4902      	ldr	r1, [pc, #8]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	654b      	str	r3, [r1, #84]	; 0x54
 80044ac:	e008      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
 80044b4:	58024800 	.word	0x58024800
 80044b8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d039      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d820      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80044d6:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	0800451f 	.word	0x0800451f
 80044e0:	080044f5 	.word	0x080044f5
 80044e4:	08004507 	.word	0x08004507
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800451f 	.word	0x0800451f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	2101      	movs	r1, #1
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fd70 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004504:	e00c      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3324      	adds	r3, #36	; 0x24
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fe19 	bl	8005144 <RCCEx_PLL3_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004516:	e003      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
      break;
 800451c:	e000      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800451e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004526:	4bb7      	ldr	r3, [pc, #732]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	f023 0207 	bic.w	r2, r3, #7
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	49b3      	ldr	r1, [pc, #716]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004536:	4313      	orrs	r3, r2
 8004538:	658b      	str	r3, [r1, #88]	; 0x58
 800453a:	e001      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d04b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004556:	d02e      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455c:	d828      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d02a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d822      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800456a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800456e:	d026      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004574:	d81c      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457a:	d010      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004580:	d816      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01d      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800458a:	d111      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fd24 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800459c:	e012      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3324      	adds	r3, #36	; 0x24
 80045a2:	2102      	movs	r1, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fdcd 	bl	8005144 <RCCEx_PLL3_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045ae:	e009      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	75fb      	strb	r3, [r7, #23]
      break;
 80045b4:	e006      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045b6:	bf00      	nop
 80045b8:	e004      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ca:	4b8e      	ldr	r3, [pc, #568]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d8:	498a      	ldr	r1, [pc, #552]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	654b      	str	r3, [r1, #84]	; 0x54
 80045de:	e001      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04b      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045fa:	d02e      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80045fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004600:	d828      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	d02a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460c:	d822      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800460e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004612:	d026      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004618:	d81c      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d010      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004624:	d816      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01d      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800462a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462e:	d111      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fcd2 	bl	8004fe0 <RCCEx_PLL2_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004640:	e012      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3324      	adds	r3, #36	; 0x24
 8004646:	2102      	movs	r1, #2
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fd7b 	bl	8005144 <RCCEx_PLL3_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004652:	e009      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
      break;
 8004658:	e006      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800467c:	4961      	ldr	r1, [pc, #388]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800467e:	4313      	orrs	r3, r2
 8004680:	658b      	str	r3, [r1, #88]	; 0x58
 8004682:	e001      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	d04b      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800469a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800469e:	d02e      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80046a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046a4:	d828      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046aa:	d02a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b0:	d822      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b6:	d026      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80046b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046bc:	d81c      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c2:	d010      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80046c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c8:	d816      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d2:	d111      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fc80 	bl	8004fe0 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046e4:	e012      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fd29 	bl	8005144 <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80046fe:	bf00      	nop
 8004700:	e004      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004702:	bf00      	nop
 8004704:	e002      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800470a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004712:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004720:	4938      	ldr	r1, [pc, #224]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004722:	4313      	orrs	r3, r2
 8004724:	658b      	str	r3, [r1, #88]	; 0x58
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d10a      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3324      	adds	r3, #36	; 0x24
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fcfa 	bl	8005144 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800475a:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	4926      	ldr	r1, [pc, #152]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800476a:	4313      	orrs	r3, r2
 800476c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3324      	adds	r3, #36	; 0x24
 800478a:	2102      	movs	r1, #2
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fcd9 	bl	8005144 <RCCEx_PLL3_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047aa:	4916      	ldr	r1, [pc, #88]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d036      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c6:	d01f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80047c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047cc:	d817      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80047d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d6:	d009      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80047d8:	e011      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fbfd 	bl	8004fe0 <RCCEx_PLL2_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047ea:	e00e      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	2102      	movs	r1, #2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fca6 	bl	8005144 <RCCEx_PLL3_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047fc:	e005      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
      break;
 8004802:	e002      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004804:	58024400 	.word	0x58024400
      break;
 8004808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004810:	4b93      	ldr	r3, [pc, #588]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800481e:	4990      	ldr	r1, [pc, #576]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	658b      	str	r3, [r1, #88]	; 0x58
 8004824:	e001      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d033      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004840:	d01c      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004846:	d816      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800484e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004852:	d007      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004854:	e00f      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004856:	4b82      	ldr	r3, [pc, #520]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a81      	ldr	r2, [pc, #516]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800485c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004862:	e00c      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3324      	adds	r3, #36	; 0x24
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fc6a 	bl	8005144 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004874:	e003      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
      break;
 800487a:	e000      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800487c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004884:	4b76      	ldr	r3, [pc, #472]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004892:	4973      	ldr	r1, [pc, #460]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004894:	4313      	orrs	r3, r2
 8004896:	654b      	str	r3, [r1, #84]	; 0x54
 8004898:	e001      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d029      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80048b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b6:	d007      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80048b8:	e00f      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ba:	4b69      	ldr	r3, [pc, #420]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	4a68      	ldr	r2, [pc, #416]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048c6:	e00b      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	2102      	movs	r1, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb86 	bl	8004fe0 <RCCEx_PLL2_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048d8:	e002      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
      break;
 80048de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048e6:	4b5e      	ldr	r3, [pc, #376]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	495b      	ldr	r1, [pc, #364]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048f8:	e001      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3324      	adds	r3, #36	; 0x24
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fc17 	bl	8005144 <RCCEx_PLL3_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d030      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004934:	d017      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800493a:	d811      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800493c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004940:	d013      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004946:	d80b      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d010      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800494c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004950:	d106      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004952:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a42      	ldr	r2, [pc, #264]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800495e:	e007      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75fb      	strb	r3, [r7, #23]
      break;
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800496e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004976:	4b3a      	ldr	r3, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004982:	4937      	ldr	r1, [pc, #220]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	654b      	str	r3, [r1, #84]	; 0x54
 8004988:	e001      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800499a:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	492e      	ldr	r1, [pc, #184]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049b8:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049c6:	4926      	ldr	r1, [pc, #152]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e4:	491e      	ldr	r1, [pc, #120]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049f6:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a00:	6113      	str	r3, [r2, #16]
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a0c:	4914      	ldr	r1, [pc, #80]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	da08      	bge.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a1a:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a26:	490e      	ldr	r1, [pc, #56]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	4906      	ldr	r1, [pc, #24]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a4c:	7dbb      	ldrb	r3, [r7, #22]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	58024400 	.word	0x58024400

08004a64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a68:	f7ff f81e 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4904      	ldr	r1, [pc, #16]	; (8004a8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	08009f5c 	.word	0x08009f5c

08004a90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a98:	4ba1      	ldr	r3, [pc, #644]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004aa2:	4b9f      	ldr	r3, [pc, #636]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	0b1b      	lsrs	r3, r3, #12
 8004aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004aae:	4b9c      	ldr	r3, [pc, #624]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004aba:	4b99      	ldr	r3, [pc, #612]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	08db      	lsrs	r3, r3, #3
 8004ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8111 	beq.w	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	f000 8083 	beq.w	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	f200 80a1 	bhi.w	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d056      	beq.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004afa:	e099      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004afc:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02d      	beq.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b08:	4b85      	ldr	r3, [pc, #532]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	4a84      	ldr	r2, [pc, #528]	; (8004d24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
 8004b18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b7b      	ldr	r3, [pc, #492]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b62:	e087      	b.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ba6:	e065      	b.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bea:	e043      	b.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b48      	ldr	r3, [pc, #288]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c2e:	e021      	b.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	0a5b      	lsrs	r3, r3, #9
 8004c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9a:	ee17 2a90 	vmov	r2, s15
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc8:	ee17 2a90 	vmov	r2, s15
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf6:	ee17 2a90 	vmov	r2, s15
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cfe:	e008      	b.n	8004d12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	3724      	adds	r7, #36	; 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400
 8004d24:	03d09000 	.word	0x03d09000
 8004d28:	46000000 	.word	0x46000000
 8004d2c:	4c742400 	.word	0x4c742400
 8004d30:	4a742400 	.word	0x4a742400
 8004d34:	4bbebc20 	.word	0x4bbebc20

08004d38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d40:	4ba1      	ldr	r3, [pc, #644]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d4a:	4b9f      	ldr	r3, [pc, #636]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	0d1b      	lsrs	r3, r3, #20
 8004d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d56:	4b9c      	ldr	r3, [pc, #624]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d62:	4b99      	ldr	r3, [pc, #612]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	08db      	lsrs	r3, r3, #3
 8004d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8111 	beq.w	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	f000 8083 	beq.w	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	f200 80a1 	bhi.w	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d056      	beq.n	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004da2:	e099      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004da4:	4b88      	ldr	r3, [pc, #544]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d02d      	beq.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004db0:	4b85      	ldr	r3, [pc, #532]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	08db      	lsrs	r3, r3, #3
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	4a84      	ldr	r2, [pc, #528]	; (8004fcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b7b      	ldr	r3, [pc, #492]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e0a:	e087      	b.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e4e:	e065      	b.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e92:	e043      	b.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea6:	4b48      	ldr	r3, [pc, #288]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ed6:	e021      	b.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eea:	4b37      	ldr	r3, [pc, #220]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f1c:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	0a5b      	lsrs	r3, r3, #9
 8004f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f42:	ee17 2a90 	vmov	r2, s15
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f70:	ee17 2a90 	vmov	r2, s15
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f78:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	0e1b      	lsrs	r3, r3, #24
 8004f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9e:	ee17 2a90 	vmov	r2, s15
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fa6:	e008      	b.n	8004fba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
}
 8004fba:	bf00      	nop
 8004fbc:	3724      	adds	r7, #36	; 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	03d09000 	.word	0x03d09000
 8004fd0:	46000000 	.word	0x46000000
 8004fd4:	4c742400 	.word	0x4c742400
 8004fd8:	4a742400 	.word	0x4a742400
 8004fdc:	4bbebc20 	.word	0x4bbebc20

08004fe0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fee:	4b53      	ldr	r3, [pc, #332]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d101      	bne.n	8004ffe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e099      	b.n	8005132 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ffe:	4b4f      	ldr	r3, [pc, #316]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a4e      	ldr	r2, [pc, #312]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005004:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500a:	f7fc f965 	bl	80012d8 <HAL_GetTick>
 800500e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005010:	e008      	b.n	8005024 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005012:	f7fc f961 	bl	80012d8 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e086      	b.n	8005132 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005024:	4b45      	ldr	r3, [pc, #276]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005030:	4b42      	ldr	r3, [pc, #264]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	031b      	lsls	r3, r3, #12
 800503e:	493f      	ldr	r1, [pc, #252]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	628b      	str	r3, [r1, #40]	; 0x28
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	3b01      	subs	r3, #1
 800504a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	3b01      	subs	r3, #1
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	b29b      	uxth	r3, r3
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	3b01      	subs	r3, #1
 800506e:	061b      	lsls	r3, r3, #24
 8005070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005074:	4931      	ldr	r1, [pc, #196]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800507a:	4b30      	ldr	r3, [pc, #192]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	492d      	ldr	r1, [pc, #180]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800508c:	4b2b      	ldr	r3, [pc, #172]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	f023 0220 	bic.w	r2, r3, #32
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	4928      	ldr	r1, [pc, #160]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	4a26      	ldr	r2, [pc, #152]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f023 0310 	bic.w	r3, r3, #16
 80050a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <RCCEx_PLL2_Config+0x160>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	69d2      	ldr	r2, [r2, #28]
 80050b6:	00d2      	lsls	r2, r2, #3
 80050b8:	4920      	ldr	r1, [pc, #128]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050be:	4b1f      	ldr	r3, [pc, #124]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050c4:	f043 0310 	orr.w	r3, r3, #16
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050d0:	4b1a      	ldr	r3, [pc, #104]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050dc:	e00f      	b.n	80050fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d106      	bne.n	80050f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f0:	e005      	b.n	80050fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	4a11      	ldr	r2, [pc, #68]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a0e      	ldr	r2, [pc, #56]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510a:	f7fc f8e5 	bl	80012d8 <HAL_GetTick>
 800510e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005110:	e008      	b.n	8005124 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005112:	f7fc f8e1 	bl	80012d8 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e006      	b.n	8005132 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	ffff0007 	.word	0xffff0007

08005144 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005152:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b03      	cmp	r3, #3
 800515c:	d101      	bne.n	8005162 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e099      	b.n	8005296 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005162:	4b4f      	ldr	r3, [pc, #316]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a4e      	ldr	r2, [pc, #312]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516e:	f7fc f8b3 	bl	80012d8 <HAL_GetTick>
 8005172:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005174:	e008      	b.n	8005188 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005176:	f7fc f8af 	bl	80012d8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e086      	b.n	8005296 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005188:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005194:	4b42      	ldr	r3, [pc, #264]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	051b      	lsls	r3, r3, #20
 80051a2:	493f      	ldr	r1, [pc, #252]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	628b      	str	r3, [r1, #40]	; 0x28
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	025b      	lsls	r3, r3, #9
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051d8:	4931      	ldr	r1, [pc, #196]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051de:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	492d      	ldr	r1, [pc, #180]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051f0:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4928      	ldr	r1, [pc, #160]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005202:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800520e:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005212:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <RCCEx_PLL3_Config+0x160>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	69d2      	ldr	r2, [r2, #28]
 800521a:	00d2      	lsls	r2, r2, #3
 800521c:	4920      	ldr	r1, [pc, #128]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005234:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800523a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800523e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005240:	e00f      	b.n	8005262 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005248:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800524e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005254:	e005      	b.n	8005262 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	4a11      	ldr	r2, [pc, #68]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800525c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005260:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526e:	f7fc f833 	bl	80012d8 <HAL_GetTick>
 8005272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005274:	e008      	b.n	8005288 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005276:	f7fc f82f 	bl	80012d8 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e006      	b.n	8005296 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	58024400 	.word	0x58024400
 80052a4:	ffff0007 	.word	0xffff0007

080052a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e049      	b.n	800534e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f841 	bl	8005356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 f9f8 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e04f      	b.n	8005424 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a23      	ldr	r2, [pc, #140]	; (8005430 <HAL_TIM_Base_Start_IT+0xc4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01d      	beq.n	80053e2 <HAL_TIM_Base_Start_IT+0x76>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ae:	d018      	beq.n	80053e2 <HAL_TIM_Base_Start_IT+0x76>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1f      	ldr	r2, [pc, #124]	; (8005434 <HAL_TIM_Base_Start_IT+0xc8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d013      	beq.n	80053e2 <HAL_TIM_Base_Start_IT+0x76>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <HAL_TIM_Base_Start_IT+0xcc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIM_Base_Start_IT+0x76>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1c      	ldr	r2, [pc, #112]	; (800543c <HAL_TIM_Base_Start_IT+0xd0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d009      	beq.n	80053e2 <HAL_TIM_Base_Start_IT+0x76>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <HAL_TIM_Base_Start_IT+0xd4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIM_Base_Start_IT+0x76>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a19      	ldr	r2, [pc, #100]	; (8005444 <HAL_TIM_Base_Start_IT+0xd8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d115      	bne.n	800540e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <HAL_TIM_Base_Start_IT+0xdc>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	d015      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0xb4>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fa:	d011      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	e008      	b.n	8005420 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0201 	orr.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e000      	b.n	8005422 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40010400 	.word	0x40010400
 8005444:	40001800 	.word	0x40001800
 8005448:	00010007 	.word	0x00010007

0800544c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	d122      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b02      	cmp	r3, #2
 800546e:	d11b      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0202 	mvn.w	r2, #2
 8005478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f905 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8f7 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f908 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d122      	bne.n	80054fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0204 	mvn.w	r2, #4
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f8db 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f8cd 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8de 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b08      	cmp	r3, #8
 8005508:	d122      	bne.n	8005550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0208 	mvn.w	r2, #8
 8005520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2204      	movs	r2, #4
 8005526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8b1 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8a3 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8b4 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b10      	cmp	r3, #16
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b10      	cmp	r3, #16
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0210 	mvn.w	r2, #16
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2208      	movs	r2, #8
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f887 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f879 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f88a 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10e      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0201 	mvn.w	r2, #1
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fb fb3a 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	2b80      	cmp	r3, #128	; 0x80
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f914 	bl	8005824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560a:	d10e      	bne.n	800562a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d107      	bne.n	800562a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f907 	bl	8005838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d10e      	bne.n	8005656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d107      	bne.n	8005656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f838 	bl	80056c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b20      	cmp	r3, #32
 8005662:	d10e      	bne.n	8005682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b20      	cmp	r3, #32
 8005670:	d107      	bne.n	8005682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0220 	mvn.w	r2, #32
 800567a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8c7 	bl	8005810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a40      	ldr	r2, [pc, #256]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3d      	ldr	r2, [pc, #244]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3b      	ldr	r2, [pc, #236]	; (80057fc <TIM_Base_SetConfig+0x120>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <TIM_Base_SetConfig+0x124>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2f      	ldr	r2, [pc, #188]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01f      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d01b      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d017      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <TIM_Base_SetConfig+0x120>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00f      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a29      	ldr	r2, [pc, #164]	; (8005800 <TIM_Base_SetConfig+0x124>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00b      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a28      	ldr	r2, [pc, #160]	; (8005804 <TIM_Base_SetConfig+0x128>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d007      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a27      	ldr	r2, [pc, #156]	; (8005808 <TIM_Base_SetConfig+0x12c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a26      	ldr	r2, [pc, #152]	; (800580c <TIM_Base_SetConfig+0x130>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00f      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a12      	ldr	r2, [pc, #72]	; (8005800 <TIM_Base_SetConfig+0x124>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00b      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a11      	ldr	r2, [pc, #68]	; (8005804 <TIM_Base_SetConfig+0x128>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d007      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a10      	ldr	r2, [pc, #64]	; (8005808 <TIM_Base_SetConfig+0x12c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a0f      	ldr	r2, [pc, #60]	; (800580c <TIM_Base_SetConfig+0x130>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010400 	.word	0x40010400
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800

08005810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e042      	b.n	80058e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fb fafb 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2224      	movs	r2, #36	; 0x24
 800587a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0201 	bic.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f8c2 	bl	8005a18 <UART_SetConfig>
 8005894:	4603      	mov	r3, r0
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e022      	b.n	80058e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fe16 	bl	80064d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fe9d 	bl	800661c <UART_CheckIdleState>
 80058e2:	4603      	mov	r3, r0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	2b20      	cmp	r3, #32
 8005904:	f040 8083 	bne.w	8005a0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Transmit+0x28>
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e07b      	b.n	8005a10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_UART_Transmit+0x3a>
 8005922:	2302      	movs	r3, #2
 8005924:	e074      	b.n	8005a10 <HAL_UART_Transmit+0x124>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2221      	movs	r2, #33	; 0x21
 800593a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800593e:	f7fb fccb 	bl	80012d8 <HAL_GetTick>
 8005942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595c:	d108      	bne.n	8005970 <HAL_UART_Transmit+0x84>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	e003      	b.n	8005978 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005980:	e02c      	b.n	80059dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2200      	movs	r2, #0
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fe90 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e039      	b.n	8005a10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	3302      	adds	r3, #2
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e007      	b.n	80059ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1cc      	bne.n	8005982 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2200      	movs	r2, #0
 80059f0:	2140      	movs	r1, #64	; 0x40
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fe5d 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e006      	b.n	8005a10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e000      	b.n	8005a10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005a0e:	2302      	movs	r3, #2
  }
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a18:	b5b0      	push	{r4, r5, r7, lr}
 8005a1a:	b08e      	sub	sp, #56	; 0x38
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4bbf      	ldr	r3, [pc, #764]	; (8005d44 <UART_SetConfig+0x32c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4ab5      	ldr	r2, [pc, #724]	; (8005d48 <UART_SetConfig+0x330>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	4bb0      	ldr	r3, [pc, #704]	; (8005d4c <UART_SetConfig+0x334>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	f023 010f 	bic.w	r1, r3, #15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4aa7      	ldr	r2, [pc, #668]	; (8005d50 <UART_SetConfig+0x338>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d176      	bne.n	8005ba4 <UART_SetConfig+0x18c>
 8005ab6:	4ba7      	ldr	r3, [pc, #668]	; (8005d54 <UART_SetConfig+0x33c>)
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005abe:	2b28      	cmp	r3, #40	; 0x28
 8005ac0:	d86c      	bhi.n	8005b9c <UART_SetConfig+0x184>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0xb0>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005b6d 	.word	0x08005b6d
 8005acc:	08005b9d 	.word	0x08005b9d
 8005ad0:	08005b9d 	.word	0x08005b9d
 8005ad4:	08005b9d 	.word	0x08005b9d
 8005ad8:	08005b9d 	.word	0x08005b9d
 8005adc:	08005b9d 	.word	0x08005b9d
 8005ae0:	08005b9d 	.word	0x08005b9d
 8005ae4:	08005b9d 	.word	0x08005b9d
 8005ae8:	08005b75 	.word	0x08005b75
 8005aec:	08005b9d 	.word	0x08005b9d
 8005af0:	08005b9d 	.word	0x08005b9d
 8005af4:	08005b9d 	.word	0x08005b9d
 8005af8:	08005b9d 	.word	0x08005b9d
 8005afc:	08005b9d 	.word	0x08005b9d
 8005b00:	08005b9d 	.word	0x08005b9d
 8005b04:	08005b9d 	.word	0x08005b9d
 8005b08:	08005b7d 	.word	0x08005b7d
 8005b0c:	08005b9d 	.word	0x08005b9d
 8005b10:	08005b9d 	.word	0x08005b9d
 8005b14:	08005b9d 	.word	0x08005b9d
 8005b18:	08005b9d 	.word	0x08005b9d
 8005b1c:	08005b9d 	.word	0x08005b9d
 8005b20:	08005b9d 	.word	0x08005b9d
 8005b24:	08005b9d 	.word	0x08005b9d
 8005b28:	08005b85 	.word	0x08005b85
 8005b2c:	08005b9d 	.word	0x08005b9d
 8005b30:	08005b9d 	.word	0x08005b9d
 8005b34:	08005b9d 	.word	0x08005b9d
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005b9d 	.word	0x08005b9d
 8005b40:	08005b9d 	.word	0x08005b9d
 8005b44:	08005b9d 	.word	0x08005b9d
 8005b48:	08005b8d 	.word	0x08005b8d
 8005b4c:	08005b9d 	.word	0x08005b9d
 8005b50:	08005b9d 	.word	0x08005b9d
 8005b54:	08005b9d 	.word	0x08005b9d
 8005b58:	08005b9d 	.word	0x08005b9d
 8005b5c:	08005b9d 	.word	0x08005b9d
 8005b60:	08005b9d 	.word	0x08005b9d
 8005b64:	08005b9d 	.word	0x08005b9d
 8005b68:	08005b95 	.word	0x08005b95
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e222      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7a:	e21e      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b82:	e21a      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8a:	e216      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b92:	e212      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9a:	e20e      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba2:	e20a      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a6b      	ldr	r2, [pc, #428]	; (8005d58 <UART_SetConfig+0x340>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d130      	bne.n	8005c10 <UART_SetConfig+0x1f8>
 8005bae:	4b69      	ldr	r3, [pc, #420]	; (8005d54 <UART_SetConfig+0x33c>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d826      	bhi.n	8005c08 <UART_SetConfig+0x1f0>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x1a8>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005bd9 	.word	0x08005bd9
 8005bc4:	08005be1 	.word	0x08005be1
 8005bc8:	08005be9 	.word	0x08005be9
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf9 	.word	0x08005bf9
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e1ec      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005be0:	2304      	movs	r3, #4
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e1e8      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005be8:	2308      	movs	r3, #8
 8005bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bee:	e1e4      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf6:	e1e0      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfe:	e1dc      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c06:	e1d8      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0e:	e1d4      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a51      	ldr	r2, [pc, #324]	; (8005d5c <UART_SetConfig+0x344>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d130      	bne.n	8005c7c <UART_SetConfig+0x264>
 8005c1a:	4b4e      	ldr	r3, [pc, #312]	; (8005d54 <UART_SetConfig+0x33c>)
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d826      	bhi.n	8005c74 <UART_SetConfig+0x25c>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x214>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c4d 	.word	0x08005c4d
 8005c34:	08005c55 	.word	0x08005c55
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c65 	.word	0x08005c65
 8005c40:	08005c6d 	.word	0x08005c6d
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4a:	e1b6      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c52:	e1b2      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c54:	2308      	movs	r3, #8
 8005c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5a:	e1ae      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c62:	e1aa      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c64:	2320      	movs	r3, #32
 8005c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6a:	e1a6      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c72:	e1a2      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c7a:	e19e      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a37      	ldr	r2, [pc, #220]	; (8005d60 <UART_SetConfig+0x348>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d130      	bne.n	8005ce8 <UART_SetConfig+0x2d0>
 8005c86:	4b33      	ldr	r3, [pc, #204]	; (8005d54 <UART_SetConfig+0x33c>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d826      	bhi.n	8005ce0 <UART_SetConfig+0x2c8>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0x280>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005cc1 	.word	0x08005cc1
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb6:	e180      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cbe:	e17c      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc6:	e178      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cce:	e174      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd6:	e170      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005cd8:	2340      	movs	r3, #64	; 0x40
 8005cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cde:	e16c      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce6:	e168      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <UART_SetConfig+0x34c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d142      	bne.n	8005d78 <UART_SetConfig+0x360>
 8005cf2:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <UART_SetConfig+0x33c>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d838      	bhi.n	8005d70 <UART_SetConfig+0x358>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x2ec>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d22:	e14a      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2a:	e146      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d32:	e142      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3a:	e13e      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e13a      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005d44:	cfff69f3 	.word	0xcfff69f3
 8005d48:	58000c00 	.word	0x58000c00
 8005d4c:	11fff4ff 	.word	0x11fff4ff
 8005d50:	40011000 	.word	0x40011000
 8005d54:	58024400 	.word	0x58024400
 8005d58:	40004400 	.word	0x40004400
 8005d5c:	40004800 	.word	0x40004800
 8005d60:	40004c00 	.word	0x40004c00
 8005d64:	40005000 	.word	0x40005000
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	e124      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d76:	e120      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4acc      	ldr	r2, [pc, #816]	; (80060b0 <UART_SetConfig+0x698>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d176      	bne.n	8005e70 <UART_SetConfig+0x458>
 8005d82:	4bcc      	ldr	r3, [pc, #816]	; (80060b4 <UART_SetConfig+0x69c>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8a:	2b28      	cmp	r3, #40	; 0x28
 8005d8c:	d86c      	bhi.n	8005e68 <UART_SetConfig+0x450>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x37c>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005e39 	.word	0x08005e39
 8005d98:	08005e69 	.word	0x08005e69
 8005d9c:	08005e69 	.word	0x08005e69
 8005da0:	08005e69 	.word	0x08005e69
 8005da4:	08005e69 	.word	0x08005e69
 8005da8:	08005e69 	.word	0x08005e69
 8005dac:	08005e69 	.word	0x08005e69
 8005db0:	08005e69 	.word	0x08005e69
 8005db4:	08005e41 	.word	0x08005e41
 8005db8:	08005e69 	.word	0x08005e69
 8005dbc:	08005e69 	.word	0x08005e69
 8005dc0:	08005e69 	.word	0x08005e69
 8005dc4:	08005e69 	.word	0x08005e69
 8005dc8:	08005e69 	.word	0x08005e69
 8005dcc:	08005e69 	.word	0x08005e69
 8005dd0:	08005e69 	.word	0x08005e69
 8005dd4:	08005e49 	.word	0x08005e49
 8005dd8:	08005e69 	.word	0x08005e69
 8005ddc:	08005e69 	.word	0x08005e69
 8005de0:	08005e69 	.word	0x08005e69
 8005de4:	08005e69 	.word	0x08005e69
 8005de8:	08005e69 	.word	0x08005e69
 8005dec:	08005e69 	.word	0x08005e69
 8005df0:	08005e69 	.word	0x08005e69
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005e69 	.word	0x08005e69
 8005dfc:	08005e69 	.word	0x08005e69
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	08005e69 	.word	0x08005e69
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005e69 	.word	0x08005e69
 8005e14:	08005e59 	.word	0x08005e59
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	08005e69 	.word	0x08005e69
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e69 	.word	0x08005e69
 8005e28:	08005e69 	.word	0x08005e69
 8005e2c:	08005e69 	.word	0x08005e69
 8005e30:	08005e69 	.word	0x08005e69
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e0bc      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e0b8      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e0b4      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e0b0      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005e58:	2320      	movs	r3, #32
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e0ac      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005e60:	2340      	movs	r3, #64	; 0x40
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e0a8      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e0a4      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a90      	ldr	r2, [pc, #576]	; (80060b8 <UART_SetConfig+0x6a0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d130      	bne.n	8005edc <UART_SetConfig+0x4c4>
 8005e7a:	4b8e      	ldr	r3, [pc, #568]	; (80060b4 <UART_SetConfig+0x69c>)
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d826      	bhi.n	8005ed4 <UART_SetConfig+0x4bc>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0x474>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005ea5 	.word	0x08005ea5
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	08005eb5 	.word	0x08005eb5
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005ec5 	.word	0x08005ec5
 8005ea0:	08005ecd 	.word	0x08005ecd
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e086      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005eac:	2304      	movs	r3, #4
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	e082      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eba:	e07e      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec2:	e07a      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eca:	e076      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005ecc:	2340      	movs	r3, #64	; 0x40
 8005ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed2:	e072      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eda:	e06e      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a76      	ldr	r2, [pc, #472]	; (80060bc <UART_SetConfig+0x6a4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d130      	bne.n	8005f48 <UART_SetConfig+0x530>
 8005ee6:	4b73      	ldr	r3, [pc, #460]	; (80060b4 <UART_SetConfig+0x69c>)
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d826      	bhi.n	8005f40 <UART_SetConfig+0x528>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x4e0>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f11 	.word	0x08005f11
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	08005f21 	.word	0x08005f21
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f31 	.word	0x08005f31
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e050      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1e:	e04c      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f26:	e048      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2e:	e044      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f30:	2320      	movs	r3, #32
 8005f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f36:	e040      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f38:	2340      	movs	r3, #64	; 0x40
 8005f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3e:	e03c      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f46:	e038      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5c      	ldr	r2, [pc, #368]	; (80060c0 <UART_SetConfig+0x6a8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d130      	bne.n	8005fb4 <UART_SetConfig+0x59c>
 8005f52:	4b58      	ldr	r3, [pc, #352]	; (80060b4 <UART_SetConfig+0x69c>)
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d826      	bhi.n	8005fac <UART_SetConfig+0x594>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x54c>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005f85 	.word	0x08005f85
 8005f6c:	08005f8d 	.word	0x08005f8d
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f82:	e01a      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f84:	2304      	movs	r3, #4
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8a:	e016      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f92:	e012      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f94:	2310      	movs	r3, #16
 8005f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9a:	e00e      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa2:	e00a      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005faa:	e006      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb2:	e002      	b.n	8005fba <UART_SetConfig+0x5a2>
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a40      	ldr	r2, [pc, #256]	; (80060c0 <UART_SetConfig+0x6a8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	f040 80ef 	bne.w	80061a4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	dc46      	bgt.n	800605c <UART_SetConfig+0x644>
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	f2c0 8081 	blt.w	80060d6 <UART_SetConfig+0x6be>
 8005fd4:	3b02      	subs	r3, #2
 8005fd6:	2b1e      	cmp	r3, #30
 8005fd8:	d87d      	bhi.n	80060d6 <UART_SetConfig+0x6be>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0x5c8>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006063 	.word	0x08006063
 8005fe4:	080060d7 	.word	0x080060d7
 8005fe8:	0800606b 	.word	0x0800606b
 8005fec:	080060d7 	.word	0x080060d7
 8005ff0:	080060d7 	.word	0x080060d7
 8005ff4:	080060d7 	.word	0x080060d7
 8005ff8:	0800607b 	.word	0x0800607b
 8005ffc:	080060d7 	.word	0x080060d7
 8006000:	080060d7 	.word	0x080060d7
 8006004:	080060d7 	.word	0x080060d7
 8006008:	080060d7 	.word	0x080060d7
 800600c:	080060d7 	.word	0x080060d7
 8006010:	080060d7 	.word	0x080060d7
 8006014:	080060d7 	.word	0x080060d7
 8006018:	0800608b 	.word	0x0800608b
 800601c:	080060d7 	.word	0x080060d7
 8006020:	080060d7 	.word	0x080060d7
 8006024:	080060d7 	.word	0x080060d7
 8006028:	080060d7 	.word	0x080060d7
 800602c:	080060d7 	.word	0x080060d7
 8006030:	080060d7 	.word	0x080060d7
 8006034:	080060d7 	.word	0x080060d7
 8006038:	080060d7 	.word	0x080060d7
 800603c:	080060d7 	.word	0x080060d7
 8006040:	080060d7 	.word	0x080060d7
 8006044:	080060d7 	.word	0x080060d7
 8006048:	080060d7 	.word	0x080060d7
 800604c:	080060d7 	.word	0x080060d7
 8006050:	080060d7 	.word	0x080060d7
 8006054:	080060d7 	.word	0x080060d7
 8006058:	080060c9 	.word	0x080060c9
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d036      	beq.n	80060ce <UART_SetConfig+0x6b6>
 8006060:	e039      	b.n	80060d6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006062:	f7fe fcff 	bl	8004a64 <HAL_RCCEx_GetD3PCLK1Freq>
 8006066:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006068:	e03b      	b.n	80060e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606a:	f107 0314 	add.w	r3, r7, #20
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fd0e 	bl	8004a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006078:	e033      	b.n	80060e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800607a:	f107 0308 	add.w	r3, r7, #8
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fe5a 	bl	8004d38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006088:	e02b      	b.n	80060e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800608a:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <UART_SetConfig+0x69c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006096:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <UART_SetConfig+0x69c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	08db      	lsrs	r3, r3, #3
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <UART_SetConfig+0x6ac>)
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060a8:	e01b      	b.n	80060e2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <UART_SetConfig+0x6ac>)
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060ae:	e018      	b.n	80060e2 <UART_SetConfig+0x6ca>
 80060b0:	40011400 	.word	0x40011400
 80060b4:	58024400 	.word	0x58024400
 80060b8:	40007800 	.word	0x40007800
 80060bc:	40007c00 	.word	0x40007c00
 80060c0:	58000c00 	.word	0x58000c00
 80060c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060c8:	4bc4      	ldr	r3, [pc, #784]	; (80063dc <UART_SetConfig+0x9c4>)
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060cc:	e009      	b.n	80060e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060d4:	e005      	b.n	80060e2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80060e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 81da 	beq.w	800649e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	4abc      	ldr	r2, [pc, #752]	; (80063e0 <UART_SetConfig+0x9c8>)
 80060f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060fc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	4413      	add	r3, r2
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	429a      	cmp	r2, r3
 800610c:	d305      	bcc.n	800611a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	429a      	cmp	r2, r3
 8006118:	d903      	bls.n	8006122 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006120:	e1bd      	b.n	800649e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	4618      	mov	r0, r3
 8006126:	f04f 0100 	mov.w	r1, #0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	4aac      	ldr	r2, [pc, #688]	; (80063e0 <UART_SetConfig+0x9c8>)
 8006130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006134:	b29a      	uxth	r2, r3
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	f7fa f929 	bl	8000390 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	020b      	lsls	r3, r1, #8
 8006150:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006154:	0202      	lsls	r2, r0, #8
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	6849      	ldr	r1, [r1, #4]
 800615a:	0849      	lsrs	r1, r1, #1
 800615c:	4608      	mov	r0, r1
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	1814      	adds	r4, r2, r0
 8006164:	eb43 0501 	adc.w	r5, r3, r1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	461a      	mov	r2, r3
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	4620      	mov	r0, r4
 8006174:	4629      	mov	r1, r5
 8006176:	f7fa f90b 	bl	8000390 <__aeabi_uldivmod>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4613      	mov	r3, r2
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006188:	d308      	bcc.n	800619c <UART_SetConfig+0x784>
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006190:	d204      	bcs.n	800619c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	e180      	b.n	800649e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80061a2:	e17c      	b.n	800649e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	f040 80bf 	bne.w	800632e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80061b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	dc49      	bgt.n	800624c <UART_SetConfig+0x834>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	db7c      	blt.n	80062b6 <UART_SetConfig+0x89e>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d87a      	bhi.n	80062b6 <UART_SetConfig+0x89e>
 80061c0:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x7b0>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	08006253 	.word	0x08006253
 80061cc:	0800625b 	.word	0x0800625b
 80061d0:	080062b7 	.word	0x080062b7
 80061d4:	080062b7 	.word	0x080062b7
 80061d8:	08006263 	.word	0x08006263
 80061dc:	080062b7 	.word	0x080062b7
 80061e0:	080062b7 	.word	0x080062b7
 80061e4:	080062b7 	.word	0x080062b7
 80061e8:	08006273 	.word	0x08006273
 80061ec:	080062b7 	.word	0x080062b7
 80061f0:	080062b7 	.word	0x080062b7
 80061f4:	080062b7 	.word	0x080062b7
 80061f8:	080062b7 	.word	0x080062b7
 80061fc:	080062b7 	.word	0x080062b7
 8006200:	080062b7 	.word	0x080062b7
 8006204:	080062b7 	.word	0x080062b7
 8006208:	08006283 	.word	0x08006283
 800620c:	080062b7 	.word	0x080062b7
 8006210:	080062b7 	.word	0x080062b7
 8006214:	080062b7 	.word	0x080062b7
 8006218:	080062b7 	.word	0x080062b7
 800621c:	080062b7 	.word	0x080062b7
 8006220:	080062b7 	.word	0x080062b7
 8006224:	080062b7 	.word	0x080062b7
 8006228:	080062b7 	.word	0x080062b7
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062b7 	.word	0x080062b7
 8006234:	080062b7 	.word	0x080062b7
 8006238:	080062b7 	.word	0x080062b7
 800623c:	080062b7 	.word	0x080062b7
 8006240:	080062b7 	.word	0x080062b7
 8006244:	080062b7 	.word	0x080062b7
 8006248:	080062a9 	.word	0x080062a9
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	d02e      	beq.n	80062ae <UART_SetConfig+0x896>
 8006250:	e031      	b.n	80062b6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006252:	f7fd fc59 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8006256:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006258:	e033      	b.n	80062c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800625a:	f7fd fc6b 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 800625e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006260:	e02f      	b.n	80062c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006262:	f107 0314 	add.w	r3, r7, #20
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fc12 	bl	8004a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006270:	e027      	b.n	80062c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006272:	f107 0308 	add.w	r3, r7, #8
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fd5e 	bl	8004d38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006280:	e01f      	b.n	80062c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006282:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <UART_SetConfig+0x9cc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800628e:	4b55      	ldr	r3, [pc, #340]	; (80063e4 <UART_SetConfig+0x9cc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	4a53      	ldr	r2, [pc, #332]	; (80063e8 <UART_SetConfig+0x9d0>)
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062a0:	e00f      	b.n	80062c2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80062a2:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <UART_SetConfig+0x9d0>)
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a6:	e00c      	b.n	80062c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062a8:	4b4c      	ldr	r3, [pc, #304]	; (80063dc <UART_SetConfig+0x9c4>)
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ac:	e009      	b.n	80062c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b4:	e005      	b.n	80062c2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80062c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80ea 	beq.w	800649e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	4a44      	ldr	r2, [pc, #272]	; (80063e0 <UART_SetConfig+0x9c8>)
 80062d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062dc:	005a      	lsls	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d916      	bls.n	8006326 <UART_SetConfig+0x90e>
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d212      	bcs.n	8006326 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	b29b      	uxth	r3, r3
 8006304:	f023 030f 	bic.w	r3, r3, #15
 8006308:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	b29a      	uxth	r2, r3
 8006316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006318:	4313      	orrs	r3, r2
 800631a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006322:	60da      	str	r2, [r3, #12]
 8006324:	e0bb      	b.n	800649e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800632c:	e0b7      	b.n	800649e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800632e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006332:	2b20      	cmp	r3, #32
 8006334:	dc4a      	bgt.n	80063cc <UART_SetConfig+0x9b4>
 8006336:	2b00      	cmp	r3, #0
 8006338:	f2c0 8086 	blt.w	8006448 <UART_SetConfig+0xa30>
 800633c:	2b20      	cmp	r3, #32
 800633e:	f200 8083 	bhi.w	8006448 <UART_SetConfig+0xa30>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <UART_SetConfig+0x930>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	080063d3 	.word	0x080063d3
 800634c:	080063ed 	.word	0x080063ed
 8006350:	08006449 	.word	0x08006449
 8006354:	08006449 	.word	0x08006449
 8006358:	080063f5 	.word	0x080063f5
 800635c:	08006449 	.word	0x08006449
 8006360:	08006449 	.word	0x08006449
 8006364:	08006449 	.word	0x08006449
 8006368:	08006405 	.word	0x08006405
 800636c:	08006449 	.word	0x08006449
 8006370:	08006449 	.word	0x08006449
 8006374:	08006449 	.word	0x08006449
 8006378:	08006449 	.word	0x08006449
 800637c:	08006449 	.word	0x08006449
 8006380:	08006449 	.word	0x08006449
 8006384:	08006449 	.word	0x08006449
 8006388:	08006415 	.word	0x08006415
 800638c:	08006449 	.word	0x08006449
 8006390:	08006449 	.word	0x08006449
 8006394:	08006449 	.word	0x08006449
 8006398:	08006449 	.word	0x08006449
 800639c:	08006449 	.word	0x08006449
 80063a0:	08006449 	.word	0x08006449
 80063a4:	08006449 	.word	0x08006449
 80063a8:	08006449 	.word	0x08006449
 80063ac:	08006449 	.word	0x08006449
 80063b0:	08006449 	.word	0x08006449
 80063b4:	08006449 	.word	0x08006449
 80063b8:	08006449 	.word	0x08006449
 80063bc:	08006449 	.word	0x08006449
 80063c0:	08006449 	.word	0x08006449
 80063c4:	08006449 	.word	0x08006449
 80063c8:	0800643b 	.word	0x0800643b
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d037      	beq.n	8006440 <UART_SetConfig+0xa28>
 80063d0:	e03a      	b.n	8006448 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d2:	f7fd fb99 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 80063d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063d8:	e03c      	b.n	8006454 <UART_SetConfig+0xa3c>
 80063da:	bf00      	nop
 80063dc:	003d0900 	.word	0x003d0900
 80063e0:	08009f6c 	.word	0x08009f6c
 80063e4:	58024400 	.word	0x58024400
 80063e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ec:	f7fd fba2 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 80063f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063f2:	e02f      	b.n	8006454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fb49 	bl	8004a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006402:	e027      	b.n	8006454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006404:	f107 0308 	add.w	r3, r7, #8
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fc95 	bl	8004d38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006412:	e01f      	b.n	8006454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006414:	4b2c      	ldr	r3, [pc, #176]	; (80064c8 <UART_SetConfig+0xab0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006420:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <UART_SetConfig+0xab0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	08db      	lsrs	r3, r3, #3
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	4a28      	ldr	r2, [pc, #160]	; (80064cc <UART_SetConfig+0xab4>)
 800642c:	fa22 f303 	lsr.w	r3, r2, r3
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006432:	e00f      	b.n	8006454 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006434:	4b25      	ldr	r3, [pc, #148]	; (80064cc <UART_SetConfig+0xab4>)
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006438:	e00c      	b.n	8006454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800643a:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <UART_SetConfig+0xab8>)
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800643e:	e009      	b.n	8006454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006446:	e005      	b.n	8006454 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006452:	bf00      	nop
    }

    if (pclk != 0U)
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d021      	beq.n	800649e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <UART_SetConfig+0xabc>)
 8006460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006464:	461a      	mov	r2, r3
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	fbb3 f2f2 	udiv	r2, r3, r2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	441a      	add	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	b29b      	uxth	r3, r3
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d908      	bls.n	8006498 <UART_SetConfig+0xa80>
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648c:	d204      	bcs.n	8006498 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e002      	b.n	800649e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3738      	adds	r7, #56	; 0x38
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bdb0      	pop	{r4, r5, r7, pc}
 80064c6:	bf00      	nop
 80064c8:	58024400 	.word	0x58024400
 80064cc:	03d09000 	.word	0x03d09000
 80064d0:	003d0900 	.word	0x003d0900
 80064d4:	08009f6c 	.word	0x08009f6c

080064d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01a      	beq.n	80065ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d6:	d10a      	bne.n	80065ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
  }
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800662c:	f7fa fe54 	bl	80012d8 <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d10e      	bne.n	800665e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f82f 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e025      	b.n	80066aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b04      	cmp	r3, #4
 800666a:	d10e      	bne.n	800668a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f819 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e00f      	b.n	80066aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c2:	e062      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	d05e      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066cc:	f7fa fe04 	bl	80012d8 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d302      	bcc.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d11d      	bne.n	800671e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e045      	b.n	80067aa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02e      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673a:	d126      	bne.n	800678a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006744:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006754:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e00f      	b.n	80067aa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4013      	ands	r3, r2
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	429a      	cmp	r2, r3
 8006798:	bf0c      	ite	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	2300      	movne	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d08d      	beq.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e027      	b.n	8006818 <HAL_UARTEx_DisableFifoMode+0x66>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2224      	movs	r2, #36	; 0x24
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0201 	bic.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006838:	2302      	movs	r3, #2
 800683a:	e02d      	b.n	8006898 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f84f 	bl	800691c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e02d      	b.n	8006914 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2224      	movs	r2, #36	; 0x24
 80068c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0201 	bic.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f811 	bl	800691c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006928:	2b00      	cmp	r3, #0
 800692a:	d108      	bne.n	800693e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800693c:	e031      	b.n	80069a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800693e:	2310      	movs	r3, #16
 8006940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006942:	2310      	movs	r3, #16
 8006944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	0e5b      	lsrs	r3, r3, #25
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	0f5b      	lsrs	r3, r3, #29
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	7b3a      	ldrb	r2, [r7, #12]
 800696a:	4911      	ldr	r1, [pc, #68]	; (80069b0 <UARTEx_SetNbDataToProcess+0x94>)
 800696c:	5c8a      	ldrb	r2, [r1, r2]
 800696e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006972:	7b3a      	ldrb	r2, [r7, #12]
 8006974:	490f      	ldr	r1, [pc, #60]	; (80069b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006978:	fb93 f3f2 	sdiv	r3, r3, r2
 800697c:	b29a      	uxth	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	7b7a      	ldrb	r2, [r7, #13]
 8006988:	4909      	ldr	r1, [pc, #36]	; (80069b0 <UARTEx_SetNbDataToProcess+0x94>)
 800698a:	5c8a      	ldrb	r2, [r1, r2]
 800698c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006990:	7b7a      	ldrb	r2, [r7, #13]
 8006992:	4908      	ldr	r1, [pc, #32]	; (80069b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006996:	fb93 f3f2 	sdiv	r3, r3, r2
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	08009f84 	.word	0x08009f84
 80069b4:	08009f8c 	.word	0x08009f8c

080069b8 <__NVIC_SetPriority>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	6039      	str	r1, [r7, #0]
 80069c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	db0a      	blt.n	80069e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	490c      	ldr	r1, [pc, #48]	; (8006a04 <__NVIC_SetPriority+0x4c>)
 80069d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069d6:	0112      	lsls	r2, r2, #4
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	440b      	add	r3, r1
 80069dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069e0:	e00a      	b.n	80069f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	4908      	ldr	r1, [pc, #32]	; (8006a08 <__NVIC_SetPriority+0x50>)
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	3b04      	subs	r3, #4
 80069f0:	0112      	lsls	r2, r2, #4
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	440b      	add	r3, r1
 80069f6:	761a      	strb	r2, [r3, #24]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	e000e100 	.word	0xe000e100
 8006a08:	e000ed00 	.word	0xe000ed00

08006a0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a10:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <SysTick_Handler+0x1c>)
 8006a12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a14:	f001 fd28 	bl	8008468 <xTaskGetSchedulerState>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d001      	beq.n	8006a22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a1e:	f002 fb13 	bl	8009048 <xPortSysTickHandler>
  }
}
 8006a22:	bf00      	nop
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	e000e010 	.word	0xe000e010

08006a2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a30:	2100      	movs	r1, #0
 8006a32:	f06f 0004 	mvn.w	r0, #4
 8006a36:	f7ff ffbf 	bl	80069b8 <__NVIC_SetPriority>
#endif
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a46:	f3ef 8305 	mrs	r3, IPSR
 8006a4a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a52:	f06f 0305 	mvn.w	r3, #5
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	e00c      	b.n	8006a74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <osKernelInitialize+0x44>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d105      	bne.n	8006a6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <osKernelInitialize+0x44>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	e002      	b.n	8006a74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a74:	687b      	ldr	r3, [r7, #4]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	240000a0 	.word	0x240000a0

08006a88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a8e:	f3ef 8305 	mrs	r3, IPSR
 8006a92:	603b      	str	r3, [r7, #0]
  return(result);
 8006a94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a9a:	f06f 0305 	mvn.w	r3, #5
 8006a9e:	607b      	str	r3, [r7, #4]
 8006aa0:	e010      	b.n	8006ac4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <osKernelStart+0x48>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d109      	bne.n	8006abe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006aaa:	f7ff ffbf 	bl	8006a2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006aae:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <osKernelStart+0x48>)
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ab4:	f001 f87c 	bl	8007bb0 <vTaskStartScheduler>
      stat = osOK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	e002      	b.n	8006ac4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ac4:	687b      	ldr	r3, [r7, #4]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	240000a0 	.word	0x240000a0

08006ad4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08e      	sub	sp, #56	; 0x38
 8006ad8:	af04      	add	r7, sp, #16
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae4:	f3ef 8305 	mrs	r3, IPSR
 8006ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8006aea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d17e      	bne.n	8006bee <osThreadNew+0x11a>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d07b      	beq.n	8006bee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006af6:	2380      	movs	r3, #128	; 0x80
 8006af8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006afa:	2318      	movs	r3, #24
 8006afc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d045      	beq.n	8006b9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <osThreadNew+0x48>
        name = attr->name;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <osThreadNew+0x6e>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b38      	cmp	r3, #56	; 0x38
 8006b34:	d805      	bhi.n	8006b42 <osThreadNew+0x6e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <osThreadNew+0x72>
        return (NULL);
 8006b42:	2300      	movs	r3, #0
 8006b44:	e054      	b.n	8006bf0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	089b      	lsrs	r3, r3, #2
 8006b54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00e      	beq.n	8006b7c <osThreadNew+0xa8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	2bbb      	cmp	r3, #187	; 0xbb
 8006b64:	d90a      	bls.n	8006b7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <osThreadNew+0xa8>
        mem = 1;
 8006b76:	2301      	movs	r3, #1
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	e010      	b.n	8006b9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10c      	bne.n	8006b9e <osThreadNew+0xca>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d108      	bne.n	8006b9e <osThreadNew+0xca>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <osThreadNew+0xca>
          mem = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	e001      	b.n	8006b9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d110      	bne.n	8006bc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bac:	9202      	str	r2, [sp, #8]
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fe0c 	bl	80077d8 <xTaskCreateStatic>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	e013      	b.n	8006bee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d110      	bne.n	8006bee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f107 0310 	add.w	r3, r7, #16
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fe57 	bl	8007892 <xTaskCreate>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <osThreadNew+0x11a>
            hTask = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bee:	693b      	ldr	r3, [r7, #16]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3728      	adds	r7, #40	; 0x28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c00:	f3ef 8305 	mrs	r3, IPSR
 8006c04:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <osDelay+0x1c>
    stat = osErrorISR;
 8006c0c:	f06f 0305 	mvn.w	r3, #5
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e007      	b.n	8006c24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 ff92 	bl	8007b48 <vTaskDelay>
    }
  }

  return (stat);
 8006c24:	68fb      	ldr	r3, [r7, #12]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4a06      	ldr	r2, [pc, #24]	; (8006c60 <vApplicationGetIdleTaskMemory+0x30>)
 8006c46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2280      	movs	r2, #128	; 0x80
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	240000a4 	.word	0x240000a4
 8006c60:	24000160 	.word	0x24000160

08006c64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a06      	ldr	r2, [pc, #24]	; (8006c94 <vApplicationGetTimerTaskMemory+0x30>)
 8006c7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	24000360 	.word	0x24000360
 8006c94:	2400041c 	.word	0x2400041c

08006c98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f103 0208 	add.w	r2, r3, #8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f103 0208 	add.w	r2, r3, #8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f103 0208 	add.w	r2, r3, #8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d103      	bne.n	8006d5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e00c      	b.n	8006d74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e002      	b.n	8006d68 <vListInsert+0x2e>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d2f6      	bcs.n	8006d62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	601a      	str	r2, [r3, #0]
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6892      	ldr	r2, [r2, #8]
 8006dc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6852      	ldr	r2, [r2, #4]
 8006dcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d103      	bne.n	8006de0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e2a:	f002 f87b 	bl	8008f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	441a      	add	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	68f9      	ldr	r1, [r7, #12]
 8006e5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	22ff      	movs	r2, #255	; 0xff
 8006e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d114      	bne.n	8006eaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01a      	beq.n	8006ebe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3310      	adds	r3, #16
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 f929 	bl	80080e4 <xTaskRemoveFromEventList>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d012      	beq.n	8006ebe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <xQueueGenericReset+0xcc>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	e009      	b.n	8006ebe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3310      	adds	r3, #16
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff fef2 	bl	8006c98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3324      	adds	r3, #36	; 0x24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff feed 	bl	8006c98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ebe:	f002 f861 	bl	8008f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ec2:	2301      	movs	r3, #1
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08e      	sub	sp, #56	; 0x38
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <xQueueGenericCreateStatic+0x52>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <xQueueGenericCreateStatic+0x56>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <xQueueGenericCreateStatic+0x58>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	623b      	str	r3, [r7, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <xQueueGenericCreateStatic+0x7e>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <xQueueGenericCreateStatic+0x82>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueGenericCreateStatic+0x84>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61fb      	str	r3, [r7, #28]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f6e:	2350      	movs	r3, #80	; 0x50
 8006f70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b50      	cmp	r3, #80	; 0x50
 8006f76:	d00a      	beq.n	8006f8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	61bb      	str	r3, [r7, #24]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00d      	beq.n	8006fb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4613      	mov	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f805 	bl	8006fc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3730      	adds	r7, #48	; 0x30
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d103      	bne.n	8006fdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fee:	2101      	movs	r1, #1
 8006ff0:	69b8      	ldr	r0, [r7, #24]
 8006ff2:	f7ff ff05 	bl	8006e00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08e      	sub	sp, #56	; 0x38
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007016:	2300      	movs	r3, #0
 8007018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <xQueueGenericSend+0x32>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d103      	bne.n	8007048 <xQueueGenericSend+0x40>
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <xQueueGenericSend+0x44>
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <xQueueGenericSend+0x46>
 800704c:	2300      	movs	r3, #0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <xQueueGenericSend+0x60>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d103      	bne.n	8007076 <xQueueGenericSend+0x6e>
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <xQueueGenericSend+0x72>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <xQueueGenericSend+0x74>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xQueueGenericSend+0x8e>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	623b      	str	r3, [r7, #32]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007096:	f001 f9e7 	bl	8008468 <xTaskGetSchedulerState>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <xQueueGenericSend+0x9e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <xQueueGenericSend+0xa2>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <xQueueGenericSend+0xa4>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	61fb      	str	r3, [r7, #28]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070c6:	f001 ff2d 	bl	8008f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d302      	bcc.n	80070dc <xQueueGenericSend+0xd4>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d129      	bne.n	8007130 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070e2:	f000 fa0b 	bl	80074fc <prvCopyDataToQueue>
 80070e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	3324      	adds	r3, #36	; 0x24
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fff5 	bl	80080e4 <xTaskRemoveFromEventList>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d013      	beq.n	8007128 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007100:	4b3f      	ldr	r3, [pc, #252]	; (8007200 <xQueueGenericSend+0x1f8>)
 8007102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	e00a      	b.n	8007128 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007118:	4b39      	ldr	r3, [pc, #228]	; (8007200 <xQueueGenericSend+0x1f8>)
 800711a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007128:	f001 ff2c 	bl	8008f84 <vPortExitCritical>
				return pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	e063      	b.n	80071f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007136:	f001 ff25 	bl	8008f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800713a:	2300      	movs	r3, #0
 800713c:	e05c      	b.n	80071f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007144:	f107 0314 	add.w	r3, r7, #20
 8007148:	4618      	mov	r0, r3
 800714a:	f001 f82f 	bl	80081ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800714e:	2301      	movs	r3, #1
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007152:	f001 ff17 	bl	8008f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007156:	f000 fd9b 	bl	8007c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800715a:	f001 fee3 	bl	8008f24 <vPortEnterCritical>
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007164:	b25b      	sxtb	r3, r3
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d103      	bne.n	8007174 <xQueueGenericSend+0x16c>
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717a:	b25b      	sxtb	r3, r3
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d103      	bne.n	800718a <xQueueGenericSend+0x182>
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800718a:	f001 fefb 	bl	8008f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800718e:	1d3a      	adds	r2, r7, #4
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	4611      	mov	r1, r2
 8007196:	4618      	mov	r0, r3
 8007198:	f001 f81e 	bl	80081d8 <xTaskCheckForTimeOut>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d124      	bne.n	80071ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a4:	f000 faa2 	bl	80076ec <prvIsQueueFull>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d018      	beq.n	80071e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	3310      	adds	r3, #16
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4611      	mov	r1, r2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 ff44 	bl	8008044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071be:	f000 fa2d 	bl	800761c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071c2:	f000 fd73 	bl	8007cac <xTaskResumeAll>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f47f af7c 	bne.w	80070c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <xQueueGenericSend+0x1f8>)
 80071d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	e772      	b.n	80070c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071e2:	f000 fa1b 	bl	800761c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071e6:	f000 fd61 	bl	8007cac <xTaskResumeAll>
 80071ea:	e76c      	b.n	80070c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ee:	f000 fa15 	bl	800761c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071f2:	f000 fd5b 	bl	8007cac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3738      	adds	r7, #56	; 0x38
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b090      	sub	sp, #64	; 0x40
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <xQueueGenericSendFromISR+0x3c>
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <xQueueGenericSendFromISR+0x40>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <xQueueGenericSendFromISR+0x42>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d103      	bne.n	800726e <xQueueGenericSendFromISR+0x6a>
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <xQueueGenericSendFromISR+0x6e>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <xQueueGenericSendFromISR+0x70>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	623b      	str	r3, [r7, #32]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800728e:	f001 ff2b 	bl	80090e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007292:	f3ef 8211 	mrs	r2, BASEPRI
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	61fa      	str	r2, [r7, #28]
 80072a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d302      	bcc.n	80072c0 <xQueueGenericSendFromISR+0xbc>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d12f      	bne.n	8007320 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072d6:	f000 f911 	bl	80074fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e2:	d112      	bne.n	800730a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d016      	beq.n	800731a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fef7 	bl	80080e4 <xTaskRemoveFromEventList>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00e      	beq.n	800731a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e007      	b.n	800731a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800730a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800730e:	3301      	adds	r3, #1
 8007310:	b2db      	uxtb	r3, r3
 8007312:	b25a      	sxtb	r2, r3
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800731a:	2301      	movs	r3, #1
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800731e:	e001      	b.n	8007324 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007320:	2300      	movs	r3, #0
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007326:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800732e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007332:	4618      	mov	r0, r3
 8007334:	3740      	adds	r7, #64	; 0x40
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	; 0x30
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10a      	bne.n	800736c <xQueueReceive+0x30>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	623b      	str	r3, [r7, #32]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <xQueueReceive+0x3e>
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <xQueueReceive+0x42>
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <xQueueReceive+0x44>
 800737e:	2300      	movs	r3, #0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <xQueueReceive+0x5e>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	61fb      	str	r3, [r7, #28]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800739a:	f001 f865 	bl	8008468 <xTaskGetSchedulerState>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <xQueueReceive+0x6e>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <xQueueReceive+0x72>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <xQueueReceive+0x74>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xQueueReceive+0x8e>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	61bb      	str	r3, [r7, #24]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073ca:	f001 fdab 	bl	8008f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01f      	beq.n	800741a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073de:	f000 f8f7 	bl	80075d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00f      	beq.n	8007412 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	3310      	adds	r3, #16
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fe74 	bl	80080e4 <xTaskRemoveFromEventList>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007402:	4b3d      	ldr	r3, [pc, #244]	; (80074f8 <xQueueReceive+0x1bc>)
 8007404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007412:	f001 fdb7 	bl	8008f84 <vPortExitCritical>
				return pdPASS;
 8007416:	2301      	movs	r3, #1
 8007418:	e069      	b.n	80074ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007420:	f001 fdb0 	bl	8008f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007424:	2300      	movs	r3, #0
 8007426:	e062      	b.n	80074ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800742e:	f107 0310 	add.w	r3, r7, #16
 8007432:	4618      	mov	r0, r3
 8007434:	f000 feba 	bl	80081ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800743c:	f001 fda2 	bl	8008f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007440:	f000 fc26 	bl	8007c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007444:	f001 fd6e 	bl	8008f24 <vPortEnterCritical>
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800744e:	b25b      	sxtb	r3, r3
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007454:	d103      	bne.n	800745e <xQueueReceive+0x122>
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007464:	b25b      	sxtb	r3, r3
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746a:	d103      	bne.n	8007474 <xQueueReceive+0x138>
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007474:	f001 fd86 	bl	8008f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007478:	1d3a      	adds	r2, r7, #4
 800747a:	f107 0310 	add.w	r3, r7, #16
 800747e:	4611      	mov	r1, r2
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fea9 	bl	80081d8 <xTaskCheckForTimeOut>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d123      	bne.n	80074d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800748c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748e:	f000 f917 	bl	80076c0 <prvIsQueueEmpty>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d017      	beq.n	80074c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	3324      	adds	r3, #36	; 0x24
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4611      	mov	r1, r2
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fdcf 	bl	8008044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a8:	f000 f8b8 	bl	800761c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074ac:	f000 fbfe 	bl	8007cac <xTaskResumeAll>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d189      	bne.n	80073ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <xQueueReceive+0x1bc>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	e780      	b.n	80073ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ca:	f000 f8a7 	bl	800761c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ce:	f000 fbed 	bl	8007cac <xTaskResumeAll>
 80074d2:	e77a      	b.n	80073ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d6:	f000 f8a1 	bl	800761c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074da:	f000 fbe7 	bl	8007cac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e0:	f000 f8ee 	bl	80076c0 <prvIsQueueEmpty>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f43f af6f 	beq.w	80073ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3730      	adds	r7, #48	; 0x30
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10d      	bne.n	8007536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d14d      	bne.n	80075be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 ffbc 	bl	80084a4 <xTaskPriorityDisinherit>
 800752c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	609a      	str	r2, [r3, #8]
 8007534:	e043      	b.n	80075be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d119      	bne.n	8007570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6858      	ldr	r0, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	461a      	mov	r2, r3
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	f002 f824 	bl	8009594 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	429a      	cmp	r2, r3
 8007564:	d32b      	bcc.n	80075be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	e026      	b.n	80075be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68d8      	ldr	r0, [r3, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	461a      	mov	r2, r3
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	f002 f80a 	bl	8009594 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	425b      	negs	r3, r3
 800758a:	441a      	add	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d207      	bcs.n	80075ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	425b      	negs	r3, r3
 80075a6:	441a      	add	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d105      	bne.n	80075be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075c6:	697b      	ldr	r3, [r7, #20]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d018      	beq.n	8007614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	441a      	add	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d303      	bcc.n	8007604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68d9      	ldr	r1, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	461a      	mov	r2, r3
 800760e:	6838      	ldr	r0, [r7, #0]
 8007610:	f001 ffc0 	bl	8009594 <memcpy>
	}
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007624:	f001 fc7e 	bl	8008f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800762e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007630:	e011      	b.n	8007656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b00      	cmp	r3, #0
 8007638:	d012      	beq.n	8007660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3324      	adds	r3, #36	; 0x24
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fd50 	bl	80080e4 <xTaskRemoveFromEventList>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800764a:	f000 fe27 	bl	800829c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	3b01      	subs	r3, #1
 8007652:	b2db      	uxtb	r3, r3
 8007654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800765a:	2b00      	cmp	r3, #0
 800765c:	dce9      	bgt.n	8007632 <prvUnlockQueue+0x16>
 800765e:	e000      	b.n	8007662 <prvUnlockQueue+0x46>
					break;
 8007660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800766a:	f001 fc8b 	bl	8008f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800766e:	f001 fc59 	bl	8008f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800767a:	e011      	b.n	80076a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d012      	beq.n	80076aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3310      	adds	r3, #16
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fd2b 	bl	80080e4 <xTaskRemoveFromEventList>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007694:	f000 fe02 	bl	800829c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	3b01      	subs	r3, #1
 800769c:	b2db      	uxtb	r3, r3
 800769e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dce9      	bgt.n	800767c <prvUnlockQueue+0x60>
 80076a8:	e000      	b.n	80076ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	22ff      	movs	r2, #255	; 0xff
 80076b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076b4:	f001 fc66 	bl	8008f84 <vPortExitCritical>
}
 80076b8:	bf00      	nop
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076c8:	f001 fc2c 	bl	8008f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e001      	b.n	80076de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076de:	f001 fc51 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 80076e2:	68fb      	ldr	r3, [r7, #12]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076f4:	f001 fc16 	bl	8008f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007700:	429a      	cmp	r2, r3
 8007702:	d102      	bne.n	800770a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e001      	b.n	800770e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800770e:	f001 fc39 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	e014      	b.n	8007756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800772c:	4a0f      	ldr	r2, [pc, #60]	; (800776c <vQueueAddToRegistry+0x50>)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007738:	490c      	ldr	r1, [pc, #48]	; (800776c <vQueueAddToRegistry+0x50>)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007742:	4a0a      	ldr	r2, [pc, #40]	; (800776c <vQueueAddToRegistry+0x50>)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	4413      	add	r3, r2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800774e:	e006      	b.n	800775e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3301      	adds	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b07      	cmp	r3, #7
 800775a:	d9e7      	bls.n	800772c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	24004c18 	.word	0x24004c18

08007770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007780:	f001 fbd0 	bl	8008f24 <vPortEnterCritical>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800778a:	b25b      	sxtb	r3, r3
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d103      	bne.n	800779a <vQueueWaitForMessageRestricted+0x2a>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a0:	b25b      	sxtb	r3, r3
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d103      	bne.n	80077b0 <vQueueWaitForMessageRestricted+0x40>
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077b0:	f001 fbe8 	bl	8008f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	3324      	adds	r3, #36	; 0x24
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fc61 	bl	800808c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077ca:	6978      	ldr	r0, [r7, #20]
 80077cc:	f7ff ff26 	bl	800761c <prvUnlockQueue>
	}
 80077d0:	bf00      	nop
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08e      	sub	sp, #56	; 0x38
 80077dc:	af04      	add	r7, sp, #16
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xTaskCreateStatic+0x2a>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	623b      	str	r3, [r7, #32]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <xTaskCreateStatic+0x46>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	61fb      	str	r3, [r7, #28]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800781e:	23bc      	movs	r3, #188	; 0xbc
 8007820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2bbc      	cmp	r3, #188	; 0xbc
 8007826:	d00a      	beq.n	800783e <xTaskCreateStatic+0x66>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	61bb      	str	r3, [r7, #24]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800783e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01e      	beq.n	8007884 <xTaskCreateStatic+0xac>
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01b      	beq.n	8007884 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	2202      	movs	r2, #2
 800785a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800785e:	2300      	movs	r3, #0
 8007860:	9303      	str	r3, [sp, #12]
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	9302      	str	r3, [sp, #8]
 8007866:	f107 0314 	add.w	r3, r7, #20
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f850 	bl	800791c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800787c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800787e:	f000 f8f3 	bl	8007a68 <prvAddNewTaskToReadyList>
 8007882:	e001      	b.n	8007888 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007888:	697b      	ldr	r3, [r7, #20]
	}
 800788a:	4618      	mov	r0, r3
 800788c:	3728      	adds	r7, #40	; 0x28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007892:	b580      	push	{r7, lr}
 8007894:	b08c      	sub	sp, #48	; 0x30
 8007896:	af04      	add	r7, sp, #16
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 fc5e 	bl	8009168 <pvPortMalloc>
 80078ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078b4:	20bc      	movs	r0, #188	; 0xbc
 80078b6:	f001 fc57 	bl	8009168 <pvPortMalloc>
 80078ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
 80078c8:	e005      	b.n	80078d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078ca:	6978      	ldr	r0, [r7, #20]
 80078cc:	f001 fd18 	bl	8009300 <vPortFree>
 80078d0:	e001      	b.n	80078d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d017      	beq.n	800790c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078e4:	88fa      	ldrh	r2, [r7, #6]
 80078e6:	2300      	movs	r3, #0
 80078e8:	9303      	str	r3, [sp, #12]
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f80e 	bl	800791c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007900:	69f8      	ldr	r0, [r7, #28]
 8007902:	f000 f8b1 	bl	8007a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007906:	2301      	movs	r3, #1
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e002      	b.n	8007912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800790c:	f04f 33ff 	mov.w	r3, #4294967295
 8007910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007912:	69bb      	ldr	r3, [r7, #24]
	}
 8007914:	4618      	mov	r0, r3
 8007916:	3720      	adds	r7, #32
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	461a      	mov	r2, r3
 8007934:	21a5      	movs	r1, #165	; 0xa5
 8007936:	f001 fe3b 	bl	80095b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007944:	440b      	add	r3, r1
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	f023 0307 	bic.w	r3, r3, #7
 8007952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <prvInitialiseNewTask+0x58>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	617b      	str	r3, [r7, #20]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01f      	beq.n	80079ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	e012      	b.n	80079a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	7819      	ldrb	r1, [r3, #0]
 8007988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	3334      	adds	r3, #52	; 0x34
 8007990:	460a      	mov	r2, r1
 8007992:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d006      	beq.n	80079ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	3301      	adds	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	2b0f      	cmp	r3, #15
 80079aa:	d9e9      	bls.n	8007980 <prvInitialiseNewTask+0x64>
 80079ac:	e000      	b.n	80079b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80079ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b8:	e003      	b.n	80079c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	2b37      	cmp	r3, #55	; 0x37
 80079c6:	d901      	bls.n	80079cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079c8:	2337      	movs	r3, #55	; 0x37
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	2200      	movs	r2, #0
 80079dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	3304      	adds	r3, #4
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff f978 	bl	8006cd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	3318      	adds	r3, #24
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff f973 	bl	8006cd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	3354      	adds	r3, #84	; 0x54
 8007a1c:	2260      	movs	r2, #96	; 0x60
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 fdc5 	bl	80095b0 <memset>
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	4a0c      	ldr	r2, [pc, #48]	; (8007a5c <prvInitialiseNewTask+0x140>)
 8007a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <prvInitialiseNewTask+0x144>)
 8007a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	4a0b      	ldr	r2, [pc, #44]	; (8007a64 <prvInitialiseNewTask+0x148>)
 8007a36:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	69b8      	ldr	r0, [r7, #24]
 8007a3e:	f001 f941 	bl	8008cc4 <pxPortInitialiseStack>
 8007a42:	4602      	mov	r2, r0
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a54:	bf00      	nop
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	08009fb4 	.word	0x08009fb4
 8007a60:	08009fd4 	.word	0x08009fd4
 8007a64:	08009f94 	.word	0x08009f94

08007a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a70:	f001 fa58 	bl	8008f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a74:	4b2d      	ldr	r3, [pc, #180]	; (8007b2c <prvAddNewTaskToReadyList+0xc4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <prvAddNewTaskToReadyList+0xc4>)
 8007a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a7e:	4b2c      	ldr	r3, [pc, #176]	; (8007b30 <prvAddNewTaskToReadyList+0xc8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d109      	bne.n	8007a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a86:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <prvAddNewTaskToReadyList+0xc8>)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a8c:	4b27      	ldr	r3, [pc, #156]	; (8007b2c <prvAddNewTaskToReadyList+0xc4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d110      	bne.n	8007ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a94:	f000 fc26 	bl	80082e4 <prvInitialiseTaskLists>
 8007a98:	e00d      	b.n	8007ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a9a:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <prvAddNewTaskToReadyList+0xcc>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aa2:	4b23      	ldr	r3, [pc, #140]	; (8007b30 <prvAddNewTaskToReadyList+0xc8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d802      	bhi.n	8007ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ab0:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <prvAddNewTaskToReadyList+0xc8>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ab6:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <prvAddNewTaskToReadyList+0xd0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a1e      	ldr	r2, [pc, #120]	; (8007b38 <prvAddNewTaskToReadyList+0xd0>)
 8007abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <prvAddNewTaskToReadyList+0xd0>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	4b1b      	ldr	r3, [pc, #108]	; (8007b3c <prvAddNewTaskToReadyList+0xd4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d903      	bls.n	8007adc <prvAddNewTaskToReadyList+0x74>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <prvAddNewTaskToReadyList+0xd4>)
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4a15      	ldr	r2, [pc, #84]	; (8007b40 <prvAddNewTaskToReadyList+0xd8>)
 8007aea:	441a      	add	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7ff f8fd 	bl	8006cf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007af8:	f001 fa44 	bl	8008f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007afc:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <prvAddNewTaskToReadyList+0xcc>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00e      	beq.n	8007b22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <prvAddNewTaskToReadyList+0xc8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d207      	bcs.n	8007b22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b12:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <prvAddNewTaskToReadyList+0xdc>)
 8007b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	24000cf0 	.word	0x24000cf0
 8007b30:	2400081c 	.word	0x2400081c
 8007b34:	24000cfc 	.word	0x24000cfc
 8007b38:	24000d0c 	.word	0x24000d0c
 8007b3c:	24000cf8 	.word	0x24000cf8
 8007b40:	24000820 	.word	0x24000820
 8007b44:	e000ed04 	.word	0xe000ed04

08007b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d017      	beq.n	8007b8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b5a:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <vTaskDelay+0x60>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <vTaskDelay+0x30>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	60bb      	str	r3, [r7, #8]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b78:	f000 f88a 	bl	8007c90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fcfe 	bl	8008580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b84:	f000 f892 	bl	8007cac <xTaskResumeAll>
 8007b88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d107      	bne.n	8007ba0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b90:	4b06      	ldr	r3, [pc, #24]	; (8007bac <vTaskDelay+0x64>)
 8007b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ba0:	bf00      	nop
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	24000d18 	.word	0x24000d18
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bbe:	463a      	mov	r2, r7
 8007bc0:	1d39      	adds	r1, r7, #4
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff f832 	bl	8006c30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	9202      	str	r2, [sp, #8]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	460a      	mov	r2, r1
 8007bde:	4924      	ldr	r1, [pc, #144]	; (8007c70 <vTaskStartScheduler+0xc0>)
 8007be0:	4824      	ldr	r0, [pc, #144]	; (8007c74 <vTaskStartScheduler+0xc4>)
 8007be2:	f7ff fdf9 	bl	80077d8 <xTaskCreateStatic>
 8007be6:	4603      	mov	r3, r0
 8007be8:	4a23      	ldr	r2, [pc, #140]	; (8007c78 <vTaskStartScheduler+0xc8>)
 8007bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bec:	4b22      	ldr	r3, [pc, #136]	; (8007c78 <vTaskStartScheduler+0xc8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e001      	b.n	8007bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c04:	f000 fd10 	bl	8008628 <xTimerCreateTimerTask>
 8007c08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d11b      	bne.n	8007c48 <vTaskStartScheduler+0x98>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	613b      	str	r3, [r7, #16]
}
 8007c22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c24:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <vTaskStartScheduler+0xcc>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3354      	adds	r3, #84	; 0x54
 8007c2a:	4a15      	ldr	r2, [pc, #84]	; (8007c80 <vTaskStartScheduler+0xd0>)
 8007c2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c2e:	4b15      	ldr	r3, [pc, #84]	; (8007c84 <vTaskStartScheduler+0xd4>)
 8007c30:	f04f 32ff 	mov.w	r2, #4294967295
 8007c34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <vTaskStartScheduler+0xd8>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c3c:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <vTaskStartScheduler+0xdc>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c42:	f001 f8cd 	bl	8008de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c46:	e00e      	b.n	8007c66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4e:	d10a      	bne.n	8007c66 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	60fb      	str	r3, [r7, #12]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <vTaskStartScheduler+0xb4>
}
 8007c66:	bf00      	nop
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	08009f20 	.word	0x08009f20
 8007c74:	080082b5 	.word	0x080082b5
 8007c78:	24000d14 	.word	0x24000d14
 8007c7c:	2400081c 	.word	0x2400081c
 8007c80:	24000014 	.word	0x24000014
 8007c84:	24000d10 	.word	0x24000d10
 8007c88:	24000cfc 	.word	0x24000cfc
 8007c8c:	24000cf4 	.word	0x24000cf4

08007c90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <vTaskSuspendAll+0x18>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	4a03      	ldr	r2, [pc, #12]	; (8007ca8 <vTaskSuspendAll+0x18>)
 8007c9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c9e:	bf00      	nop
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	24000d18 	.word	0x24000d18

08007cac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cba:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <xTaskResumeAll+0x118>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	603b      	str	r3, [r7, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cd8:	f001 f924 	bl	8008f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cdc:	4b39      	ldr	r3, [pc, #228]	; (8007dc4 <xTaskResumeAll+0x118>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	4a38      	ldr	r2, [pc, #224]	; (8007dc4 <xTaskResumeAll+0x118>)
 8007ce4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce6:	4b37      	ldr	r3, [pc, #220]	; (8007dc4 <xTaskResumeAll+0x118>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d162      	bne.n	8007db4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cee:	4b36      	ldr	r3, [pc, #216]	; (8007dc8 <xTaskResumeAll+0x11c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d05e      	beq.n	8007db4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cf6:	e02f      	b.n	8007d58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf8:	4b34      	ldr	r3, [pc, #208]	; (8007dcc <xTaskResumeAll+0x120>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3318      	adds	r3, #24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff f851 	bl	8006dac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f84c 	bl	8006dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4b2d      	ldr	r3, [pc, #180]	; (8007dd0 <xTaskResumeAll+0x124>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d903      	bls.n	8007d28 <xTaskResumeAll+0x7c>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	4a2a      	ldr	r2, [pc, #168]	; (8007dd0 <xTaskResumeAll+0x124>)
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4a27      	ldr	r2, [pc, #156]	; (8007dd4 <xTaskResumeAll+0x128>)
 8007d36:	441a      	add	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7fe ffd7 	bl	8006cf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4b23      	ldr	r3, [pc, #140]	; (8007dd8 <xTaskResumeAll+0x12c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d302      	bcc.n	8007d58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d52:	4b22      	ldr	r3, [pc, #136]	; (8007ddc <xTaskResumeAll+0x130>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d58:	4b1c      	ldr	r3, [pc, #112]	; (8007dcc <xTaskResumeAll+0x120>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1cb      	bne.n	8007cf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d66:	f000 fb5f 	bl	8008428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <xTaskResumeAll+0x134>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d010      	beq.n	8007d98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d76:	f000 f847 	bl	8007e08 <xTaskIncrementTick>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <xTaskResumeAll+0x130>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f1      	bne.n	8007d76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d92:	4b13      	ldr	r3, [pc, #76]	; (8007de0 <xTaskResumeAll+0x134>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d98:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <xTaskResumeAll+0x130>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007da4:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <xTaskResumeAll+0x138>)
 8007da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007db4:	f001 f8e6 	bl	8008f84 <vPortExitCritical>

	return xAlreadyYielded;
 8007db8:	68bb      	ldr	r3, [r7, #8]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	24000d18 	.word	0x24000d18
 8007dc8:	24000cf0 	.word	0x24000cf0
 8007dcc:	24000cb0 	.word	0x24000cb0
 8007dd0:	24000cf8 	.word	0x24000cf8
 8007dd4:	24000820 	.word	0x24000820
 8007dd8:	2400081c 	.word	0x2400081c
 8007ddc:	24000d04 	.word	0x24000d04
 8007de0:	24000d00 	.word	0x24000d00
 8007de4:	e000ed04 	.word	0xe000ed04

08007de8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007dee:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <xTaskGetTickCount+0x1c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007df4:	687b      	ldr	r3, [r7, #4]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	24000cf4 	.word	0x24000cf4

08007e08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e12:	4b4f      	ldr	r3, [pc, #316]	; (8007f50 <xTaskIncrementTick+0x148>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f040 808f 	bne.w	8007f3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e1c:	4b4d      	ldr	r3, [pc, #308]	; (8007f54 <xTaskIncrementTick+0x14c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e24:	4a4b      	ldr	r2, [pc, #300]	; (8007f54 <xTaskIncrementTick+0x14c>)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d120      	bne.n	8007e72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e30:	4b49      	ldr	r3, [pc, #292]	; (8007f58 <xTaskIncrementTick+0x150>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	603b      	str	r3, [r7, #0]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <xTaskIncrementTick+0x46>
 8007e50:	4b41      	ldr	r3, [pc, #260]	; (8007f58 <xTaskIncrementTick+0x150>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <xTaskIncrementTick+0x154>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	; (8007f58 <xTaskIncrementTick+0x150>)
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	4a3f      	ldr	r2, [pc, #252]	; (8007f5c <xTaskIncrementTick+0x154>)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	4b3e      	ldr	r3, [pc, #248]	; (8007f60 <xTaskIncrementTick+0x158>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	4a3d      	ldr	r2, [pc, #244]	; (8007f60 <xTaskIncrementTick+0x158>)
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	f000 fadb 	bl	8008428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e72:	4b3c      	ldr	r3, [pc, #240]	; (8007f64 <xTaskIncrementTick+0x15c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d349      	bcc.n	8007f10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e7c:	4b36      	ldr	r3, [pc, #216]	; (8007f58 <xTaskIncrementTick+0x150>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d104      	bne.n	8007e90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e86:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <xTaskIncrementTick+0x15c>)
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	601a      	str	r2, [r3, #0]
					break;
 8007e8e:	e03f      	b.n	8007f10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e90:	4b31      	ldr	r3, [pc, #196]	; (8007f58 <xTaskIncrementTick+0x150>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d203      	bcs.n	8007eb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ea8:	4a2e      	ldr	r2, [pc, #184]	; (8007f64 <xTaskIncrementTick+0x15c>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eae:	e02f      	b.n	8007f10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe ff79 	bl	8006dac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3318      	adds	r3, #24
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe ff70 	bl	8006dac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	4b25      	ldr	r3, [pc, #148]	; (8007f68 <xTaskIncrementTick+0x160>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d903      	bls.n	8007ee0 <xTaskIncrementTick+0xd8>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	4a22      	ldr	r2, [pc, #136]	; (8007f68 <xTaskIncrementTick+0x160>)
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4a1f      	ldr	r2, [pc, #124]	; (8007f6c <xTaskIncrementTick+0x164>)
 8007eee:	441a      	add	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	f7fe fefb 	bl	8006cf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f00:	4b1b      	ldr	r3, [pc, #108]	; (8007f70 <xTaskIncrementTick+0x168>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d3b8      	bcc.n	8007e7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f0e:	e7b5      	b.n	8007e7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <xTaskIncrementTick+0x168>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f16:	4915      	ldr	r1, [pc, #84]	; (8007f6c <xTaskIncrementTick+0x164>)
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d901      	bls.n	8007f2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f2c:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <xTaskIncrementTick+0x16c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d007      	beq.n	8007f44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f34:	2301      	movs	r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e004      	b.n	8007f44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <xTaskIncrementTick+0x170>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	4a0d      	ldr	r2, [pc, #52]	; (8007f78 <xTaskIncrementTick+0x170>)
 8007f42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f44:	697b      	ldr	r3, [r7, #20]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	24000d18 	.word	0x24000d18
 8007f54:	24000cf4 	.word	0x24000cf4
 8007f58:	24000ca8 	.word	0x24000ca8
 8007f5c:	24000cac 	.word	0x24000cac
 8007f60:	24000d08 	.word	0x24000d08
 8007f64:	24000d10 	.word	0x24000d10
 8007f68:	24000cf8 	.word	0x24000cf8
 8007f6c:	24000820 	.word	0x24000820
 8007f70:	2400081c 	.word	0x2400081c
 8007f74:	24000d04 	.word	0x24000d04
 8007f78:	24000d00 	.word	0x24000d00

08007f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f82:	4b2a      	ldr	r3, [pc, #168]	; (800802c <vTaskSwitchContext+0xb0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f8a:	4b29      	ldr	r3, [pc, #164]	; (8008030 <vTaskSwitchContext+0xb4>)
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f90:	e046      	b.n	8008020 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007f92:	4b27      	ldr	r3, [pc, #156]	; (8008030 <vTaskSwitchContext+0xb4>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f98:	4b26      	ldr	r3, [pc, #152]	; (8008034 <vTaskSwitchContext+0xb8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e010      	b.n	8007fc2 <vTaskSwitchContext+0x46>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <vTaskSwitchContext+0x40>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	607b      	str	r3, [r7, #4]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <vTaskSwitchContext+0x3e>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	491d      	ldr	r1, [pc, #116]	; (8008038 <vTaskSwitchContext+0xbc>)
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0e4      	beq.n	8007fa0 <vTaskSwitchContext+0x24>
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4a15      	ldr	r2, [pc, #84]	; (8008038 <vTaskSwitchContext+0xbc>)
 8007fe2:	4413      	add	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	605a      	str	r2, [r3, #4]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d104      	bne.n	8008006 <vTaskSwitchContext+0x8a>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4a0b      	ldr	r2, [pc, #44]	; (800803c <vTaskSwitchContext+0xc0>)
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <vTaskSwitchContext+0xb8>)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008016:	4b09      	ldr	r3, [pc, #36]	; (800803c <vTaskSwitchContext+0xc0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3354      	adds	r3, #84	; 0x54
 800801c:	4a08      	ldr	r2, [pc, #32]	; (8008040 <vTaskSwitchContext+0xc4>)
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	24000d18 	.word	0x24000d18
 8008030:	24000d04 	.word	0x24000d04
 8008034:	24000cf8 	.word	0x24000cf8
 8008038:	24000820 	.word	0x24000820
 800803c:	2400081c 	.word	0x2400081c
 8008040:	24000014 	.word	0x24000014

08008044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800806a:	4b07      	ldr	r3, [pc, #28]	; (8008088 <vTaskPlaceOnEventList+0x44>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3318      	adds	r3, #24
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fe fe61 	bl	8006d3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008078:	2101      	movs	r1, #1
 800807a:	6838      	ldr	r0, [r7, #0]
 800807c:	f000 fa80 	bl	8008580 <prvAddCurrentTaskToDelayedList>
}
 8008080:	bf00      	nop
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	2400081c 	.word	0x2400081c

0800808c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	617b      	str	r3, [r7, #20]
}
 80080b0:	bf00      	nop
 80080b2:	e7fe      	b.n	80080b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3318      	adds	r3, #24
 80080ba:	4619      	mov	r1, r3
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7fe fe18 	bl	8006cf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80080c8:	f04f 33ff 	mov.w	r3, #4294967295
 80080cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	68b8      	ldr	r0, [r7, #8]
 80080d2:	f000 fa55 	bl	8008580 <prvAddCurrentTaskToDelayedList>
	}
 80080d6:	bf00      	nop
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	2400081c 	.word	0x2400081c

080080e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10a      	bne.n	8008110 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	60fb      	str	r3, [r7, #12]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3318      	adds	r3, #24
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fe49 	bl	8006dac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811a:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <xTaskRemoveFromEventList+0xb0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d11d      	bne.n	800815e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	3304      	adds	r3, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fe40 	bl	8006dac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	4b19      	ldr	r3, [pc, #100]	; (8008198 <xTaskRemoveFromEventList+0xb4>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	429a      	cmp	r2, r3
 8008136:	d903      	bls.n	8008140 <xTaskRemoveFromEventList+0x5c>
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4a16      	ldr	r2, [pc, #88]	; (8008198 <xTaskRemoveFromEventList+0xb4>)
 800813e:	6013      	str	r3, [r2, #0]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4a13      	ldr	r2, [pc, #76]	; (800819c <xTaskRemoveFromEventList+0xb8>)
 800814e:	441a      	add	r2, r3
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f7fe fdcb 	bl	8006cf2 <vListInsertEnd>
 800815c:	e005      	b.n	800816a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3318      	adds	r3, #24
 8008162:	4619      	mov	r1, r3
 8008164:	480e      	ldr	r0, [pc, #56]	; (80081a0 <xTaskRemoveFromEventList+0xbc>)
 8008166:	f7fe fdc4 	bl	8006cf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816e:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <xTaskRemoveFromEventList+0xc0>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	429a      	cmp	r2, r3
 8008176:	d905      	bls.n	8008184 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <xTaskRemoveFromEventList+0xc4>)
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e001      	b.n	8008188 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008188:	697b      	ldr	r3, [r7, #20]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	24000d18 	.word	0x24000d18
 8008198:	24000cf8 	.word	0x24000cf8
 800819c:	24000820 	.word	0x24000820
 80081a0:	24000cb0 	.word	0x24000cb0
 80081a4:	2400081c 	.word	0x2400081c
 80081a8:	24000d04 	.word	0x24000d04

080081ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <vTaskInternalSetTimeOutState+0x24>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <vTaskInternalSetTimeOutState+0x28>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	605a      	str	r2, [r3, #4]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	24000d08 	.word	0x24000d08
 80081d4:	24000cf4 	.word	0x24000cf4

080081d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10a      	bne.n	80081fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	613b      	str	r3, [r7, #16]
}
 80081fa:	bf00      	nop
 80081fc:	e7fe      	b.n	80081fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	60fb      	str	r3, [r7, #12]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800821a:	f000 fe83 	bl	8008f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <xTaskCheckForTimeOut+0xbc>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008236:	d102      	bne.n	800823e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008238:	2300      	movs	r3, #0
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	e023      	b.n	8008286 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4b15      	ldr	r3, [pc, #84]	; (8008298 <xTaskCheckForTimeOut+0xc0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d007      	beq.n	800825a <xTaskCheckForTimeOut+0x82>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	429a      	cmp	r2, r3
 8008252:	d302      	bcc.n	800825a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e015      	b.n	8008286 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	429a      	cmp	r2, r3
 8008262:	d20b      	bcs.n	800827c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	1ad2      	subs	r2, r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff ff9b 	bl	80081ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008276:	2300      	movs	r3, #0
 8008278:	61fb      	str	r3, [r7, #28]
 800827a:	e004      	b.n	8008286 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008286:	f000 fe7d 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 800828a:	69fb      	ldr	r3, [r7, #28]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	24000cf4 	.word	0x24000cf4
 8008298:	24000d08 	.word	0x24000d08

0800829c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082a0:	4b03      	ldr	r3, [pc, #12]	; (80082b0 <vTaskMissedYield+0x14>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
}
 80082a6:	bf00      	nop
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	24000d04 	.word	0x24000d04

080082b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082bc:	f000 f852 	bl	8008364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <prvIdleTask+0x28>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d9f9      	bls.n	80082bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <prvIdleTask+0x2c>)
 80082ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082d8:	e7f0      	b.n	80082bc <prvIdleTask+0x8>
 80082da:	bf00      	nop
 80082dc:	24000820 	.word	0x24000820
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	e00c      	b.n	800830a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4a12      	ldr	r2, [pc, #72]	; (8008344 <prvInitialiseTaskLists+0x60>)
 80082fc:	4413      	add	r3, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fcca 	bl	8006c98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3301      	adds	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b37      	cmp	r3, #55	; 0x37
 800830e:	d9ef      	bls.n	80082f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008310:	480d      	ldr	r0, [pc, #52]	; (8008348 <prvInitialiseTaskLists+0x64>)
 8008312:	f7fe fcc1 	bl	8006c98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008316:	480d      	ldr	r0, [pc, #52]	; (800834c <prvInitialiseTaskLists+0x68>)
 8008318:	f7fe fcbe 	bl	8006c98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800831c:	480c      	ldr	r0, [pc, #48]	; (8008350 <prvInitialiseTaskLists+0x6c>)
 800831e:	f7fe fcbb 	bl	8006c98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008322:	480c      	ldr	r0, [pc, #48]	; (8008354 <prvInitialiseTaskLists+0x70>)
 8008324:	f7fe fcb8 	bl	8006c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008328:	480b      	ldr	r0, [pc, #44]	; (8008358 <prvInitialiseTaskLists+0x74>)
 800832a:	f7fe fcb5 	bl	8006c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <prvInitialiseTaskLists+0x78>)
 8008330:	4a05      	ldr	r2, [pc, #20]	; (8008348 <prvInitialiseTaskLists+0x64>)
 8008332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008334:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <prvInitialiseTaskLists+0x7c>)
 8008336:	4a05      	ldr	r2, [pc, #20]	; (800834c <prvInitialiseTaskLists+0x68>)
 8008338:	601a      	str	r2, [r3, #0]
}
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	24000820 	.word	0x24000820
 8008348:	24000c80 	.word	0x24000c80
 800834c:	24000c94 	.word	0x24000c94
 8008350:	24000cb0 	.word	0x24000cb0
 8008354:	24000cc4 	.word	0x24000cc4
 8008358:	24000cdc 	.word	0x24000cdc
 800835c:	24000ca8 	.word	0x24000ca8
 8008360:	24000cac 	.word	0x24000cac

08008364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800836a:	e019      	b.n	80083a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800836c:	f000 fdda 	bl	8008f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008370:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <prvCheckTasksWaitingTermination+0x50>)
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3304      	adds	r3, #4
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe fd15 	bl	8006dac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <prvCheckTasksWaitingTermination+0x54>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3b01      	subs	r3, #1
 8008388:	4a0b      	ldr	r2, [pc, #44]	; (80083b8 <prvCheckTasksWaitingTermination+0x54>)
 800838a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800838c:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <prvCheckTasksWaitingTermination+0x58>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3b01      	subs	r3, #1
 8008392:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <prvCheckTasksWaitingTermination+0x58>)
 8008394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008396:	f000 fdf5 	bl	8008f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f810 	bl	80083c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <prvCheckTasksWaitingTermination+0x58>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e1      	bne.n	800836c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	24000cc4 	.word	0x24000cc4
 80083b8:	24000cf0 	.word	0x24000cf0
 80083bc:	24000cd8 	.word	0x24000cd8

080083c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3354      	adds	r3, #84	; 0x54
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 f95f 	bl	8009690 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d108      	bne.n	80083ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 ff8d 	bl	8009300 <vPortFree>
				vPortFree( pxTCB );
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 ff8a 	bl	8009300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083ec:	e018      	b.n	8008420 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d103      	bne.n	8008400 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 ff81 	bl	8009300 <vPortFree>
	}
 80083fe:	e00f      	b.n	8008420 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008406:	2b02      	cmp	r3, #2
 8008408:	d00a      	beq.n	8008420 <prvDeleteTCB+0x60>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	60fb      	str	r3, [r7, #12]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <prvDeleteTCB+0x5e>
	}
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842e:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <prvResetNextTaskUnblockTime+0x38>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008438:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <prvResetNextTaskUnblockTime+0x3c>)
 800843a:	f04f 32ff 	mov.w	r2, #4294967295
 800843e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008440:	e008      	b.n	8008454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <prvResetNextTaskUnblockTime+0x38>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4a04      	ldr	r2, [pc, #16]	; (8008464 <prvResetNextTaskUnblockTime+0x3c>)
 8008452:	6013      	str	r3, [r2, #0]
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	24000ca8 	.word	0x24000ca8
 8008464:	24000d10 	.word	0x24000d10

08008468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800846e:	4b0b      	ldr	r3, [pc, #44]	; (800849c <xTaskGetSchedulerState+0x34>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008476:	2301      	movs	r3, #1
 8008478:	607b      	str	r3, [r7, #4]
 800847a:	e008      	b.n	800848e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800847c:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <xTaskGetSchedulerState+0x38>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008484:	2302      	movs	r3, #2
 8008486:	607b      	str	r3, [r7, #4]
 8008488:	e001      	b.n	800848e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800848a:	2300      	movs	r3, #0
 800848c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800848e:	687b      	ldr	r3, [r7, #4]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	24000cfc 	.word	0x24000cfc
 80084a0:	24000d18 	.word	0x24000d18

080084a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d056      	beq.n	8008568 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084ba:	4b2e      	ldr	r3, [pc, #184]	; (8008574 <xTaskPriorityDisinherit+0xd0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d00a      	beq.n	80084da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	60fb      	str	r3, [r7, #12]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60bb      	str	r3, [r7, #8]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850a:	429a      	cmp	r2, r3
 800850c:	d02c      	beq.n	8008568 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008512:	2b00      	cmp	r3, #0
 8008514:	d128      	bne.n	8008568 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	3304      	adds	r3, #4
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fc46 	bl	8006dac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008538:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <xTaskPriorityDisinherit+0xd4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d903      	bls.n	8008548 <xTaskPriorityDisinherit+0xa4>
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	4a0c      	ldr	r2, [pc, #48]	; (8008578 <xTaskPriorityDisinherit+0xd4>)
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4a09      	ldr	r2, [pc, #36]	; (800857c <xTaskPriorityDisinherit+0xd8>)
 8008556:	441a      	add	r2, r3
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	3304      	adds	r3, #4
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7fe fbc7 	bl	8006cf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008564:	2301      	movs	r3, #1
 8008566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008568:	697b      	ldr	r3, [r7, #20]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	2400081c 	.word	0x2400081c
 8008578:	24000cf8 	.word	0x24000cf8
 800857c:	24000820 	.word	0x24000820

08008580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800858a:	4b21      	ldr	r3, [pc, #132]	; (8008610 <prvAddCurrentTaskToDelayedList+0x90>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008590:	4b20      	ldr	r3, [pc, #128]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3304      	adds	r3, #4
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fc08 	bl	8006dac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d10a      	bne.n	80085ba <prvAddCurrentTaskToDelayedList+0x3a>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d007      	beq.n	80085ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085aa:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4819      	ldr	r0, [pc, #100]	; (8008618 <prvAddCurrentTaskToDelayedList+0x98>)
 80085b4:	f7fe fb9d 	bl	8006cf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085b8:	e026      	b.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4413      	add	r3, r2
 80085c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085c2:	4b14      	ldr	r3, [pc, #80]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d209      	bcs.n	80085e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d2:	4b12      	ldr	r3, [pc, #72]	; (800861c <prvAddCurrentTaskToDelayedList+0x9c>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fe fbab 	bl	8006d3a <vListInsert>
}
 80085e4:	e010      	b.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085e6:	4b0e      	ldr	r3, [pc, #56]	; (8008620 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7fe fba1 	bl	8006d3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085f8:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d202      	bcs.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008602:	4a08      	ldr	r2, [pc, #32]	; (8008624 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6013      	str	r3, [r2, #0]
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	24000cf4 	.word	0x24000cf4
 8008614:	2400081c 	.word	0x2400081c
 8008618:	24000cdc 	.word	0x24000cdc
 800861c:	24000cac 	.word	0x24000cac
 8008620:	24000ca8 	.word	0x24000ca8
 8008624:	24000d10 	.word	0x24000d10

08008628 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	; 0x28
 800862c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008632:	f000 fb07 	bl	8008c44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008636:	4b1c      	ldr	r3, [pc, #112]	; (80086a8 <xTimerCreateTimerTask+0x80>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d021      	beq.n	8008682 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008646:	1d3a      	adds	r2, r7, #4
 8008648:	f107 0108 	add.w	r1, r7, #8
 800864c:	f107 030c 	add.w	r3, r7, #12
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fb07 	bl	8006c64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	9202      	str	r2, [sp, #8]
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	2302      	movs	r3, #2
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	460a      	mov	r2, r1
 8008668:	4910      	ldr	r1, [pc, #64]	; (80086ac <xTimerCreateTimerTask+0x84>)
 800866a:	4811      	ldr	r0, [pc, #68]	; (80086b0 <xTimerCreateTimerTask+0x88>)
 800866c:	f7ff f8b4 	bl	80077d8 <xTaskCreateStatic>
 8008670:	4603      	mov	r3, r0
 8008672:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <xTimerCreateTimerTask+0x8c>)
 8008674:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008676:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <xTimerCreateTimerTask+0x8c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800867e:	2301      	movs	r3, #1
 8008680:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	613b      	str	r3, [r7, #16]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800869e:	697b      	ldr	r3, [r7, #20]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	24000d4c 	.word	0x24000d4c
 80086ac:	08009f28 	.word	0x08009f28
 80086b0:	080087ed 	.word	0x080087ed
 80086b4:	24000d50 	.word	0x24000d50

080086b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	623b      	str	r3, [r7, #32]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086e6:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <xTimerGenericCommand+0x98>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02a      	beq.n	8008744 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b05      	cmp	r3, #5
 80086fe:	dc18      	bgt.n	8008732 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008700:	f7ff feb2 	bl	8008468 <xTaskGetSchedulerState>
 8008704:	4603      	mov	r3, r0
 8008706:	2b02      	cmp	r3, #2
 8008708:	d109      	bne.n	800871e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800870a:	4b11      	ldr	r3, [pc, #68]	; (8008750 <xTimerGenericCommand+0x98>)
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	f107 0110 	add.w	r1, r7, #16
 8008712:	2300      	movs	r3, #0
 8008714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008716:	f7fe fc77 	bl	8007008 <xQueueGenericSend>
 800871a:	6278      	str	r0, [r7, #36]	; 0x24
 800871c:	e012      	b.n	8008744 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800871e:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <xTimerGenericCommand+0x98>)
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f107 0110 	add.w	r1, r7, #16
 8008726:	2300      	movs	r3, #0
 8008728:	2200      	movs	r2, #0
 800872a:	f7fe fc6d 	bl	8007008 <xQueueGenericSend>
 800872e:	6278      	str	r0, [r7, #36]	; 0x24
 8008730:	e008      	b.n	8008744 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008732:	4b07      	ldr	r3, [pc, #28]	; (8008750 <xTimerGenericCommand+0x98>)
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f107 0110 	add.w	r1, r7, #16
 800873a:	2300      	movs	r3, #0
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	f7fe fd61 	bl	8007204 <xQueueGenericSendFromISR>
 8008742:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008746:	4618      	mov	r0, r3
 8008748:	3728      	adds	r7, #40	; 0x28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	24000d4c 	.word	0x24000d4c

08008754 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af02      	add	r7, sp, #8
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875e:	4b22      	ldr	r3, [pc, #136]	; (80087e8 <prvProcessExpiredTimer+0x94>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe fb1d 	bl	8006dac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d022      	beq.n	80087c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	18d1      	adds	r1, r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f000 f8d1 	bl	8008934 <prvInsertTimerInActiveList>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01f      	beq.n	80087d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008798:	2300      	movs	r3, #0
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	2300      	movs	r3, #0
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	2100      	movs	r1, #0
 80087a2:	6978      	ldr	r0, [r7, #20]
 80087a4:	f7ff ff88 	bl	80086b8 <xTimerGenericCommand>
 80087a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d113      	bne.n	80087d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	60fb      	str	r3, [r7, #12]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	6978      	ldr	r0, [r7, #20]
 80087de:	4798      	blx	r3
}
 80087e0:	bf00      	nop
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	24000d44 	.word	0x24000d44

080087ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087f4:	f107 0308 	add.w	r3, r7, #8
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f857 	bl	80088ac <prvGetNextExpireTime>
 80087fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4619      	mov	r1, r3
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f803 	bl	8008810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800880a:	f000 f8d5 	bl	80089b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800880e:	e7f1      	b.n	80087f4 <prvTimerTask+0x8>

08008810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800881a:	f7ff fa39 	bl	8007c90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800881e:	f107 0308 	add.w	r3, r7, #8
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f866 	bl	80088f4 <prvSampleTimeNow>
 8008828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d130      	bne.n	8008892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10a      	bne.n	800884c <prvProcessTimerOrBlockTask+0x3c>
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	429a      	cmp	r2, r3
 800883c:	d806      	bhi.n	800884c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800883e:	f7ff fa35 	bl	8007cac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff ff85 	bl	8008754 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800884a:	e024      	b.n	8008896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d008      	beq.n	8008864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <prvProcessTimerOrBlockTask+0x90>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <prvProcessTimerOrBlockTask+0x50>
 800885c:	2301      	movs	r3, #1
 800885e:	e000      	b.n	8008862 <prvProcessTimerOrBlockTask+0x52>
 8008860:	2300      	movs	r3, #0
 8008862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008864:	4b0f      	ldr	r3, [pc, #60]	; (80088a4 <prvProcessTimerOrBlockTask+0x94>)
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4619      	mov	r1, r3
 8008872:	f7fe ff7d 	bl	8007770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008876:	f7ff fa19 	bl	8007cac <xTaskResumeAll>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008880:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <prvProcessTimerOrBlockTask+0x98>)
 8008882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	f3bf 8f6f 	isb	sy
}
 8008890:	e001      	b.n	8008896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008892:	f7ff fa0b 	bl	8007cac <xTaskResumeAll>
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	24000d48 	.word	0x24000d48
 80088a4:	24000d4c 	.word	0x24000d4c
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088b4:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <prvGetNextExpireTime+0x44>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <prvGetNextExpireTime+0x16>
 80088be:	2201      	movs	r2, #1
 80088c0:	e000      	b.n	80088c4 <prvGetNextExpireTime+0x18>
 80088c2:	2200      	movs	r2, #0
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d105      	bne.n	80088dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <prvGetNextExpireTime+0x44>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60fb      	str	r3, [r7, #12]
 80088da:	e001      	b.n	80088e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088e0:	68fb      	ldr	r3, [r7, #12]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	24000d44 	.word	0x24000d44

080088f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088fc:	f7ff fa74 	bl	8007de8 <xTaskGetTickCount>
 8008900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008902:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <prvSampleTimeNow+0x3c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	429a      	cmp	r2, r3
 800890a:	d205      	bcs.n	8008918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800890c:	f000 f936 	bl	8008b7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	e002      	b.n	800891e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800891e:	4a04      	ldr	r2, [pc, #16]	; (8008930 <prvSampleTimeNow+0x3c>)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008924:	68fb      	ldr	r3, [r7, #12]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	24000d54 	.word	0x24000d54

08008934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008942:	2300      	movs	r3, #0
 8008944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d812      	bhi.n	8008980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	429a      	cmp	r2, r3
 8008966:	d302      	bcc.n	800896e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008968:	2301      	movs	r3, #1
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	e01b      	b.n	80089a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800896e:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <prvInsertTimerInActiveList+0x7c>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3304      	adds	r3, #4
 8008976:	4619      	mov	r1, r3
 8008978:	4610      	mov	r0, r2
 800897a:	f7fe f9de 	bl	8006d3a <vListInsert>
 800897e:	e012      	b.n	80089a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d206      	bcs.n	8008996 <prvInsertTimerInActiveList+0x62>
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d302      	bcc.n	8008996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	e007      	b.n	80089a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008996:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <prvInsertTimerInActiveList+0x80>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3304      	adds	r3, #4
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f7fe f9ca 	bl	8006d3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089a6:	697b      	ldr	r3, [r7, #20]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	24000d48 	.word	0x24000d48
 80089b4:	24000d44 	.word	0x24000d44

080089b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08e      	sub	sp, #56	; 0x38
 80089bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089be:	e0ca      	b.n	8008b56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	da18      	bge.n	80089f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089c6:	1d3b      	adds	r3, r7, #4
 80089c8:	3304      	adds	r3, #4
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	61fb      	str	r3, [r7, #28]
}
 80089e4:	bf00      	nop
 80089e6:	e7fe      	b.n	80089e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ee:	6850      	ldr	r0, [r2, #4]
 80089f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089f2:	6892      	ldr	r2, [r2, #8]
 80089f4:	4611      	mov	r1, r2
 80089f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f2c0 80aa 	blt.w	8008b54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	3304      	adds	r3, #4
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe f9cb 	bl	8006dac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a16:	463b      	mov	r3, r7
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff ff6b 	bl	80088f4 <prvSampleTimeNow>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b09      	cmp	r3, #9
 8008a24:	f200 8097 	bhi.w	8008b56 <prvProcessReceivedCommands+0x19e>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <prvProcessReceivedCommands+0x78>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008acd 	.word	0x08008acd
 8008a40:	08008ae1 	.word	0x08008ae1
 8008a44:	08008b2b 	.word	0x08008b2b
 8008a48:	08008a59 	.word	0x08008a59
 8008a4c:	08008a59 	.word	0x08008a59
 8008a50:	08008acd 	.word	0x08008acd
 8008a54:	08008ae1 	.word	0x08008ae1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a5e:	f043 0301 	orr.w	r3, r3, #1
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	18d1      	adds	r1, r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a78:	f7ff ff5c 	bl	8008934 <prvInsertTimerInActiveList>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d069      	beq.n	8008b56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d05e      	beq.n	8008b56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	441a      	add	r2, r3
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aaa:	f7ff fe05 	bl	80086b8 <xTimerGenericCommand>
 8008aae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d14f      	bne.n	8008b56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	61bb      	str	r3, [r7, #24]
}
 8008ac8:	bf00      	nop
 8008aca:	e7fe      	b.n	8008aca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ade:	e03a      	b.n	8008b56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	617b      	str	r3, [r7, #20]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	699a      	ldr	r2, [r3, #24]
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	18d1      	adds	r1, r2, r3
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b24:	f7ff ff06 	bl	8008934 <prvInsertTimerInActiveList>
					break;
 8008b28:	e015      	b.n	8008b56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b3a:	f000 fbe1 	bl	8009300 <vPortFree>
 8008b3e:	e00a      	b.n	8008b56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b46:	f023 0301 	bic.w	r3, r3, #1
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b52:	e000      	b.n	8008b56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b56:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <prvProcessReceivedCommands+0x1c0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	1d39      	adds	r1, r7, #4
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fbec 	bl	800733c <xQueueReceive>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f47f af2a 	bne.w	80089c0 <prvProcessReceivedCommands+0x8>
	}
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	3730      	adds	r7, #48	; 0x30
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	24000d4c 	.word	0x24000d4c

08008b7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b82:	e048      	b.n	8008c16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b84:	4b2d      	ldr	r3, [pc, #180]	; (8008c3c <prvSwitchTimerLists+0xc0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8e:	4b2b      	ldr	r3, [pc, #172]	; (8008c3c <prvSwitchTimerLists+0xc0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe f905 	bl	8006dac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d02e      	beq.n	8008c16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d90e      	bls.n	8008be8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bd6:	4b19      	ldr	r3, [pc, #100]	; (8008c3c <prvSwitchTimerLists+0xc0>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f7fe f8aa 	bl	8006d3a <vListInsert>
 8008be6:	e016      	b.n	8008c16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008be8:	2300      	movs	r3, #0
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	2300      	movs	r3, #0
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff fd60 	bl	80086b8 <xTimerGenericCommand>
 8008bf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	603b      	str	r3, [r7, #0]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <prvSwitchTimerLists+0xc0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1b1      	bne.n	8008b84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <prvSwitchTimerLists+0xc0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <prvSwitchTimerLists+0xc4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a04      	ldr	r2, [pc, #16]	; (8008c3c <prvSwitchTimerLists+0xc0>)
 8008c2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c2e:	4a04      	ldr	r2, [pc, #16]	; (8008c40 <prvSwitchTimerLists+0xc4>)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	6013      	str	r3, [r2, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	24000d44 	.word	0x24000d44
 8008c40:	24000d48 	.word	0x24000d48

08008c44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c4a:	f000 f96b 	bl	8008f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c4e:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d120      	bne.n	8008c98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c56:	4814      	ldr	r0, [pc, #80]	; (8008ca8 <prvCheckForValidListAndQueue+0x64>)
 8008c58:	f7fe f81e 	bl	8006c98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c5c:	4813      	ldr	r0, [pc, #76]	; (8008cac <prvCheckForValidListAndQueue+0x68>)
 8008c5e:	f7fe f81b 	bl	8006c98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c62:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <prvCheckForValidListAndQueue+0x6c>)
 8008c64:	4a10      	ldr	r2, [pc, #64]	; (8008ca8 <prvCheckForValidListAndQueue+0x64>)
 8008c66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <prvCheckForValidListAndQueue+0x70>)
 8008c6a:	4a10      	ldr	r2, [pc, #64]	; (8008cac <prvCheckForValidListAndQueue+0x68>)
 8008c6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <prvCheckForValidListAndQueue+0x74>)
 8008c74:	4a11      	ldr	r2, [pc, #68]	; (8008cbc <prvCheckForValidListAndQueue+0x78>)
 8008c76:	2110      	movs	r1, #16
 8008c78:	200a      	movs	r0, #10
 8008c7a:	f7fe f929 	bl	8006ed0 <xQueueGenericCreateStatic>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4a08      	ldr	r2, [pc, #32]	; (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c84:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c8c:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	490b      	ldr	r1, [pc, #44]	; (8008cc0 <prvCheckForValidListAndQueue+0x7c>)
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fd42 	bl	800771c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c98:	f000 f974 	bl	8008f84 <vPortExitCritical>
}
 8008c9c:	bf00      	nop
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	24000d4c 	.word	0x24000d4c
 8008ca8:	24000d1c 	.word	0x24000d1c
 8008cac:	24000d30 	.word	0x24000d30
 8008cb0:	24000d44 	.word	0x24000d44
 8008cb4:	24000d48 	.word	0x24000d48
 8008cb8:	24000df8 	.word	0x24000df8
 8008cbc:	24000d58 	.word	0x24000d58
 8008cc0:	08009f30 	.word	0x08009f30

08008cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f023 0201 	bic.w	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3b04      	subs	r3, #4
 8008cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cf4:	4a0c      	ldr	r2, [pc, #48]	; (8008d28 <pxPortInitialiseStack+0x64>)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3b14      	subs	r3, #20
 8008cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f06f 0202 	mvn.w	r2, #2
 8008d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3b20      	subs	r3, #32
 8008d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	08008d2d 	.word	0x08008d2d

08008d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d36:	4b12      	ldr	r3, [pc, #72]	; (8008d80 <prvTaskExitError+0x54>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d00a      	beq.n	8008d56 <prvTaskExitError+0x2a>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <prvTaskExitError+0x28>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60bb      	str	r3, [r7, #8]
}
 8008d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d6a:	bf00      	nop
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0fc      	beq.n	8008d6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	24000010 	.word	0x24000010
	...

08008d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <pxCurrentTCBConst2>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f380 8809 	msr	PSP, r0
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	4770      	bx	lr
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst2>:
 8008db0:	2400081c 	.word	0x2400081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008db8:	4808      	ldr	r0, [pc, #32]	; (8008ddc <prvPortStartFirstTask+0x24>)
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	f380 8808 	msr	MSP, r0
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8814 	msr	CONTROL, r0
 8008dca:	b662      	cpsie	i
 8008dcc:	b661      	cpsie	f
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	df00      	svc	0
 8008dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dda:	bf00      	nop
 8008ddc:	e000ed08 	.word	0xe000ed08

08008de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008de6:	4b46      	ldr	r3, [pc, #280]	; (8008f00 <xPortStartScheduler+0x120>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a46      	ldr	r2, [pc, #280]	; (8008f04 <xPortStartScheduler+0x124>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d10a      	bne.n	8008e06 <xPortStartScheduler+0x26>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	613b      	str	r3, [r7, #16]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e06:	4b3e      	ldr	r3, [pc, #248]	; (8008f00 <xPortStartScheduler+0x120>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a3f      	ldr	r2, [pc, #252]	; (8008f08 <xPortStartScheduler+0x128>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d10a      	bne.n	8008e26 <xPortStartScheduler+0x46>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	60fb      	str	r3, [r7, #12]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e26:	4b39      	ldr	r3, [pc, #228]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	22ff      	movs	r2, #255	; 0xff
 8008e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4b31      	ldr	r3, [pc, #196]	; (8008f10 <xPortStartScheduler+0x130>)
 8008e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e4e:	4b31      	ldr	r3, [pc, #196]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e50:	2207      	movs	r2, #7
 8008e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e54:	e009      	b.n	8008e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e56:	4b2f      	ldr	r3, [pc, #188]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	4a2d      	ldr	r2, [pc, #180]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e72:	2b80      	cmp	r3, #128	; 0x80
 8008e74:	d0ef      	beq.n	8008e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e76:	4b27      	ldr	r3, [pc, #156]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1c3 0307 	rsb	r3, r3, #7
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d00a      	beq.n	8008e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e98:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <xPortStartScheduler+0x134>)
 8008ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <xPortStartScheduler+0x134>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eaa:	4a1a      	ldr	r2, [pc, #104]	; (8008f14 <xPortStartScheduler+0x134>)
 8008eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008eb6:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <xPortStartScheduler+0x138>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a17      	ldr	r2, [pc, #92]	; (8008f18 <xPortStartScheduler+0x138>)
 8008ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <xPortStartScheduler+0x138>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a14      	ldr	r2, [pc, #80]	; (8008f18 <xPortStartScheduler+0x138>)
 8008ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ece:	f000 f8dd 	bl	800908c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ed2:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <xPortStartScheduler+0x13c>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ed8:	f000 f8fc 	bl	80090d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008edc:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <xPortStartScheduler+0x140>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0f      	ldr	r2, [pc, #60]	; (8008f20 <xPortStartScheduler+0x140>)
 8008ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ee8:	f7ff ff66 	bl	8008db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008eec:	f7ff f846 	bl	8007f7c <vTaskSwitchContext>
	prvTaskExitError();
 8008ef0:	f7ff ff1c 	bl	8008d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	e000ed00 	.word	0xe000ed00
 8008f04:	410fc271 	.word	0x410fc271
 8008f08:	410fc270 	.word	0x410fc270
 8008f0c:	e000e400 	.word	0xe000e400
 8008f10:	24000e48 	.word	0x24000e48
 8008f14:	24000e4c 	.word	0x24000e4c
 8008f18:	e000ed20 	.word	0xe000ed20
 8008f1c:	24000010 	.word	0x24000010
 8008f20:	e000ef34 	.word	0xe000ef34

08008f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	607b      	str	r3, [r7, #4]
}
 8008f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <vPortEnterCritical+0x58>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a0d      	ldr	r2, [pc, #52]	; (8008f7c <vPortEnterCritical+0x58>)
 8008f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f48:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <vPortEnterCritical+0x58>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d10f      	bne.n	8008f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f50:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <vPortEnterCritical+0x5c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	603b      	str	r3, [r7, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vPortEnterCritical+0x4a>
	}
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	24000010 	.word	0x24000010
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f8a:	4b12      	ldr	r3, [pc, #72]	; (8008fd4 <vPortExitCritical+0x50>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <vPortExitCritical+0x24>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	607b      	str	r3, [r7, #4]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <vPortExitCritical+0x50>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	4a09      	ldr	r2, [pc, #36]	; (8008fd4 <vPortExitCritical+0x50>)
 8008fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <vPortExitCritical+0x50>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d105      	bne.n	8008fc6 <vPortExitCritical+0x42>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	f383 8811 	msr	BASEPRI, r3
}
 8008fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	24000010 	.word	0x24000010
	...

08008fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fe0:	f3ef 8009 	mrs	r0, PSP
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	4b15      	ldr	r3, [pc, #84]	; (8009040 <pxCurrentTCBConst>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	f01e 0f10 	tst.w	lr, #16
 8008ff0:	bf08      	it	eq
 8008ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffa:	6010      	str	r0, [r2, #0]
 8008ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009004:	f380 8811 	msr	BASEPRI, r0
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f7fe ffb4 	bl	8007f7c <vTaskSwitchContext>
 8009014:	f04f 0000 	mov.w	r0, #0
 8009018:	f380 8811 	msr	BASEPRI, r0
 800901c:	bc09      	pop	{r0, r3}
 800901e:	6819      	ldr	r1, [r3, #0]
 8009020:	6808      	ldr	r0, [r1, #0]
 8009022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009026:	f01e 0f10 	tst.w	lr, #16
 800902a:	bf08      	it	eq
 800902c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009030:	f380 8809 	msr	PSP, r0
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w

08009040 <pxCurrentTCBConst>:
 8009040:	2400081c 	.word	0x2400081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009062:	f7fe fed1 	bl	8007e08 <xTaskIncrementTick>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <xPortSysTickHandler+0x40>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	2300      	movs	r3, #0
 8009076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f383 8811 	msr	BASEPRI, r3
}
 800907e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <vPortSetupTimerInterrupt+0x34>)
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009096:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <vPortSetupTimerInterrupt+0x38>)
 8009098:	2200      	movs	r2, #0
 800909a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800909c:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <vPortSetupTimerInterrupt+0x3c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <vPortSetupTimerInterrupt+0x40>)
 80090a2:	fba2 2303 	umull	r2, r3, r2, r3
 80090a6:	099b      	lsrs	r3, r3, #6
 80090a8:	4a09      	ldr	r2, [pc, #36]	; (80090d0 <vPortSetupTimerInterrupt+0x44>)
 80090aa:	3b01      	subs	r3, #1
 80090ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ae:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <vPortSetupTimerInterrupt+0x34>)
 80090b0:	2207      	movs	r2, #7
 80090b2:	601a      	str	r2, [r3, #0]
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	e000e010 	.word	0xe000e010
 80090c4:	e000e018 	.word	0xe000e018
 80090c8:	24000000 	.word	0x24000000
 80090cc:	10624dd3 	.word	0x10624dd3
 80090d0:	e000e014 	.word	0xe000e014

080090d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090e4 <vPortEnableVFP+0x10>
 80090d8:	6801      	ldr	r1, [r0, #0]
 80090da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090de:	6001      	str	r1, [r0, #0]
 80090e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090e2:	bf00      	nop
 80090e4:	e000ed88 	.word	0xe000ed88

080090e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090ee:	f3ef 8305 	mrs	r3, IPSR
 80090f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b0f      	cmp	r3, #15
 80090f8:	d914      	bls.n	8009124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090fa:	4a17      	ldr	r2, [pc, #92]	; (8009158 <vPortValidateInterruptPriority+0x70>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009104:	4b15      	ldr	r3, [pc, #84]	; (800915c <vPortValidateInterruptPriority+0x74>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	7afa      	ldrb	r2, [r7, #11]
 800910a:	429a      	cmp	r2, r3
 800910c:	d20a      	bcs.n	8009124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	607b      	str	r3, [r7, #4]
}
 8009120:	bf00      	nop
 8009122:	e7fe      	b.n	8009122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <vPortValidateInterruptPriority+0x78>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800912c:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <vPortValidateInterruptPriority+0x7c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	429a      	cmp	r2, r3
 8009132:	d90a      	bls.n	800914a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	603b      	str	r3, [r7, #0]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <vPortValidateInterruptPriority+0x60>
	}
 800914a:	bf00      	nop
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	e000e3f0 	.word	0xe000e3f0
 800915c:	24000e48 	.word	0x24000e48
 8009160:	e000ed0c 	.word	0xe000ed0c
 8009164:	24000e4c 	.word	0x24000e4c

08009168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	; 0x28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009174:	f7fe fd8c 	bl	8007c90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009178:	4b5b      	ldr	r3, [pc, #364]	; (80092e8 <pvPortMalloc+0x180>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009180:	f000 f920 	bl	80093c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009184:	4b59      	ldr	r3, [pc, #356]	; (80092ec <pvPortMalloc+0x184>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4013      	ands	r3, r2
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 8093 	bne.w	80092b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01d      	beq.n	80091d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009198:	2208      	movs	r2, #8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4413      	add	r3, r2
 800919e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d014      	beq.n	80091d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	3308      	adds	r3, #8
 80091b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <pvPortMalloc+0x6c>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	617b      	str	r3, [r7, #20]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d06e      	beq.n	80092b8 <pvPortMalloc+0x150>
 80091da:	4b45      	ldr	r3, [pc, #276]	; (80092f0 <pvPortMalloc+0x188>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d869      	bhi.n	80092b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091e4:	4b43      	ldr	r3, [pc, #268]	; (80092f4 <pvPortMalloc+0x18c>)
 80091e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091e8:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <pvPortMalloc+0x18c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ee:	e004      	b.n	80091fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	429a      	cmp	r2, r3
 8009202:	d903      	bls.n	800920c <pvPortMalloc+0xa4>
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f1      	bne.n	80091f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800920c:	4b36      	ldr	r3, [pc, #216]	; (80092e8 <pvPortMalloc+0x180>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009212:	429a      	cmp	r2, r3
 8009214:	d050      	beq.n	80092b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2208      	movs	r2, #8
 800921c:	4413      	add	r3, r2
 800921e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	1ad2      	subs	r2, r2, r3
 8009230:	2308      	movs	r3, #8
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	429a      	cmp	r2, r3
 8009236:	d91f      	bls.n	8009278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4413      	add	r3, r2
 800923e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	f003 0307 	and.w	r3, r3, #7
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <pvPortMalloc+0xf8>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	613b      	str	r3, [r7, #16]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009272:	69b8      	ldr	r0, [r7, #24]
 8009274:	f000 f908 	bl	8009488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009278:	4b1d      	ldr	r3, [pc, #116]	; (80092f0 <pvPortMalloc+0x188>)
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	4a1b      	ldr	r2, [pc, #108]	; (80092f0 <pvPortMalloc+0x188>)
 8009284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009286:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <pvPortMalloc+0x188>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <pvPortMalloc+0x190>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d203      	bcs.n	800929a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009292:	4b17      	ldr	r3, [pc, #92]	; (80092f0 <pvPortMalloc+0x188>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a18      	ldr	r2, [pc, #96]	; (80092f8 <pvPortMalloc+0x190>)
 8009298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	4b13      	ldr	r3, [pc, #76]	; (80092ec <pvPortMalloc+0x184>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	431a      	orrs	r2, r3
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092ae:	4b13      	ldr	r3, [pc, #76]	; (80092fc <pvPortMalloc+0x194>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3301      	adds	r3, #1
 80092b4:	4a11      	ldr	r2, [pc, #68]	; (80092fc <pvPortMalloc+0x194>)
 80092b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092b8:	f7fe fcf8 	bl	8007cac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	f003 0307 	and.w	r3, r3, #7
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <pvPortMalloc+0x174>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	60fb      	str	r3, [r7, #12]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <pvPortMalloc+0x172>
	return pvReturn;
 80092dc:	69fb      	ldr	r3, [r7, #28]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3728      	adds	r7, #40	; 0x28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	24004a58 	.word	0x24004a58
 80092ec:	24004a6c 	.word	0x24004a6c
 80092f0:	24004a5c 	.word	0x24004a5c
 80092f4:	24004a50 	.word	0x24004a50
 80092f8:	24004a60 	.word	0x24004a60
 80092fc:	24004a64 	.word	0x24004a64

08009300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d04d      	beq.n	80093ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009312:	2308      	movs	r3, #8
 8009314:	425b      	negs	r3, r3
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	4413      	add	r3, r2
 800931a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	4b24      	ldr	r3, [pc, #144]	; (80093b8 <vPortFree+0xb8>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4013      	ands	r3, r2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <vPortFree+0x44>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	60fb      	str	r3, [r7, #12]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <vPortFree+0x62>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	60bb      	str	r3, [r7, #8]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <vPortFree+0xb8>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4013      	ands	r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d01e      	beq.n	80093ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d11a      	bne.n	80093ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <vPortFree+0xb8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	43db      	mvns	r3, r3
 8009382:	401a      	ands	r2, r3
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009388:	f7fe fc82 	bl	8007c90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <vPortFree+0xbc>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4413      	add	r3, r2
 8009396:	4a09      	ldr	r2, [pc, #36]	; (80093bc <vPortFree+0xbc>)
 8009398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800939a:	6938      	ldr	r0, [r7, #16]
 800939c:	f000 f874 	bl	8009488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093a0:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <vPortFree+0xc0>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	4a06      	ldr	r2, [pc, #24]	; (80093c0 <vPortFree+0xc0>)
 80093a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093aa:	f7fe fc7f 	bl	8007cac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093ae:	bf00      	nop
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	24004a6c 	.word	0x24004a6c
 80093bc:	24004a5c 	.word	0x24004a5c
 80093c0:	24004a68 	.word	0x24004a68

080093c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093d0:	4b27      	ldr	r3, [pc, #156]	; (8009470 <prvHeapInit+0xac>)
 80093d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00c      	beq.n	80093f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3307      	adds	r3, #7
 80093e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0307 	bic.w	r3, r3, #7
 80093ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	4a1f      	ldr	r2, [pc, #124]	; (8009470 <prvHeapInit+0xac>)
 80093f4:	4413      	add	r3, r2
 80093f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093fc:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <prvHeapInit+0xb0>)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009402:	4b1c      	ldr	r3, [pc, #112]	; (8009474 <prvHeapInit+0xb0>)
 8009404:	2200      	movs	r2, #0
 8009406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009410:	2208      	movs	r2, #8
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0307 	bic.w	r3, r3, #7
 800941e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a15      	ldr	r2, [pc, #84]	; (8009478 <prvHeapInit+0xb4>)
 8009424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <prvHeapInit+0xb4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2200      	movs	r2, #0
 800942c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800942e:	4b12      	ldr	r3, [pc, #72]	; (8009478 <prvHeapInit+0xb4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009444:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <prvHeapInit+0xb4>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	4a0a      	ldr	r2, [pc, #40]	; (800947c <prvHeapInit+0xb8>)
 8009452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	4a09      	ldr	r2, [pc, #36]	; (8009480 <prvHeapInit+0xbc>)
 800945a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800945c:	4b09      	ldr	r3, [pc, #36]	; (8009484 <prvHeapInit+0xc0>)
 800945e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009462:	601a      	str	r2, [r3, #0]
}
 8009464:	bf00      	nop
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	24000e50 	.word	0x24000e50
 8009474:	24004a50 	.word	0x24004a50
 8009478:	24004a58 	.word	0x24004a58
 800947c:	24004a60 	.word	0x24004a60
 8009480:	24004a5c 	.word	0x24004a5c
 8009484:	24004a6c 	.word	0x24004a6c

08009488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009490:	4b28      	ldr	r3, [pc, #160]	; (8009534 <prvInsertBlockIntoFreeList+0xac>)
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	e002      	b.n	800949c <prvInsertBlockIntoFreeList+0x14>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d8f7      	bhi.n	8009496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4413      	add	r3, r2
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d108      	bne.n	80094ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	441a      	add	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	441a      	add	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d118      	bne.n	8009510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b15      	ldr	r3, [pc, #84]	; (8009538 <prvInsertBlockIntoFreeList+0xb0>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d00d      	beq.n	8009506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	441a      	add	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	e008      	b.n	8009518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009506:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <prvInsertBlockIntoFreeList+0xb0>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	e003      	b.n	8009518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d002      	beq.n	8009526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	24004a50 	.word	0x24004a50
 8009538:	24004a58 	.word	0x24004a58

0800953c <__errno>:
 800953c:	4b01      	ldr	r3, [pc, #4]	; (8009544 <__errno+0x8>)
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	24000014 	.word	0x24000014

08009548 <__libc_init_array>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4d0d      	ldr	r5, [pc, #52]	; (8009580 <__libc_init_array+0x38>)
 800954c:	4c0d      	ldr	r4, [pc, #52]	; (8009584 <__libc_init_array+0x3c>)
 800954e:	1b64      	subs	r4, r4, r5
 8009550:	10a4      	asrs	r4, r4, #2
 8009552:	2600      	movs	r6, #0
 8009554:	42a6      	cmp	r6, r4
 8009556:	d109      	bne.n	800956c <__libc_init_array+0x24>
 8009558:	4d0b      	ldr	r5, [pc, #44]	; (8009588 <__libc_init_array+0x40>)
 800955a:	4c0c      	ldr	r4, [pc, #48]	; (800958c <__libc_init_array+0x44>)
 800955c:	f000 fcb8 	bl	8009ed0 <_init>
 8009560:	1b64      	subs	r4, r4, r5
 8009562:	10a4      	asrs	r4, r4, #2
 8009564:	2600      	movs	r6, #0
 8009566:	42a6      	cmp	r6, r4
 8009568:	d105      	bne.n	8009576 <__libc_init_array+0x2e>
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009570:	4798      	blx	r3
 8009572:	3601      	adds	r6, #1
 8009574:	e7ee      	b.n	8009554 <__libc_init_array+0xc>
 8009576:	f855 3b04 	ldr.w	r3, [r5], #4
 800957a:	4798      	blx	r3
 800957c:	3601      	adds	r6, #1
 800957e:	e7f2      	b.n	8009566 <__libc_init_array+0x1e>
 8009580:	0800a030 	.word	0x0800a030
 8009584:	0800a030 	.word	0x0800a030
 8009588:	0800a030 	.word	0x0800a030
 800958c:	0800a034 	.word	0x0800a034

08009590 <__retarget_lock_acquire_recursive>:
 8009590:	4770      	bx	lr

08009592 <__retarget_lock_release_recursive>:
 8009592:	4770      	bx	lr

08009594 <memcpy>:
 8009594:	440a      	add	r2, r1
 8009596:	4291      	cmp	r1, r2
 8009598:	f100 33ff 	add.w	r3, r0, #4294967295
 800959c:	d100      	bne.n	80095a0 <memcpy+0xc>
 800959e:	4770      	bx	lr
 80095a0:	b510      	push	{r4, lr}
 80095a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095aa:	4291      	cmp	r1, r2
 80095ac:	d1f9      	bne.n	80095a2 <memcpy+0xe>
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <memset>:
 80095b0:	4402      	add	r2, r0
 80095b2:	4603      	mov	r3, r0
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d100      	bne.n	80095ba <memset+0xa>
 80095b8:	4770      	bx	lr
 80095ba:	f803 1b01 	strb.w	r1, [r3], #1
 80095be:	e7f9      	b.n	80095b4 <memset+0x4>

080095c0 <_malloc_r>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	1ccd      	adds	r5, r1, #3
 80095c4:	f025 0503 	bic.w	r5, r5, #3
 80095c8:	3508      	adds	r5, #8
 80095ca:	2d0c      	cmp	r5, #12
 80095cc:	bf38      	it	cc
 80095ce:	250c      	movcc	r5, #12
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	4606      	mov	r6, r0
 80095d4:	db01      	blt.n	80095da <_malloc_r+0x1a>
 80095d6:	42a9      	cmp	r1, r5
 80095d8:	d903      	bls.n	80095e2 <_malloc_r+0x22>
 80095da:	230c      	movs	r3, #12
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	2000      	movs	r0, #0
 80095e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e2:	f000 f8e1 	bl	80097a8 <__malloc_lock>
 80095e6:	4921      	ldr	r1, [pc, #132]	; (800966c <_malloc_r+0xac>)
 80095e8:	680a      	ldr	r2, [r1, #0]
 80095ea:	4614      	mov	r4, r2
 80095ec:	b99c      	cbnz	r4, 8009616 <_malloc_r+0x56>
 80095ee:	4f20      	ldr	r7, [pc, #128]	; (8009670 <_malloc_r+0xb0>)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	b923      	cbnz	r3, 80095fe <_malloc_r+0x3e>
 80095f4:	4621      	mov	r1, r4
 80095f6:	4630      	mov	r0, r6
 80095f8:	f000 f8a6 	bl	8009748 <_sbrk_r>
 80095fc:	6038      	str	r0, [r7, #0]
 80095fe:	4629      	mov	r1, r5
 8009600:	4630      	mov	r0, r6
 8009602:	f000 f8a1 	bl	8009748 <_sbrk_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d123      	bne.n	8009652 <_malloc_r+0x92>
 800960a:	230c      	movs	r3, #12
 800960c:	6033      	str	r3, [r6, #0]
 800960e:	4630      	mov	r0, r6
 8009610:	f000 f8d0 	bl	80097b4 <__malloc_unlock>
 8009614:	e7e3      	b.n	80095de <_malloc_r+0x1e>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	1b5b      	subs	r3, r3, r5
 800961a:	d417      	bmi.n	800964c <_malloc_r+0x8c>
 800961c:	2b0b      	cmp	r3, #11
 800961e:	d903      	bls.n	8009628 <_malloc_r+0x68>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	441c      	add	r4, r3
 8009624:	6025      	str	r5, [r4, #0]
 8009626:	e004      	b.n	8009632 <_malloc_r+0x72>
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	42a2      	cmp	r2, r4
 800962c:	bf0c      	ite	eq
 800962e:	600b      	streq	r3, [r1, #0]
 8009630:	6053      	strne	r3, [r2, #4]
 8009632:	4630      	mov	r0, r6
 8009634:	f000 f8be 	bl	80097b4 <__malloc_unlock>
 8009638:	f104 000b 	add.w	r0, r4, #11
 800963c:	1d23      	adds	r3, r4, #4
 800963e:	f020 0007 	bic.w	r0, r0, #7
 8009642:	1ac2      	subs	r2, r0, r3
 8009644:	d0cc      	beq.n	80095e0 <_malloc_r+0x20>
 8009646:	1a1b      	subs	r3, r3, r0
 8009648:	50a3      	str	r3, [r4, r2]
 800964a:	e7c9      	b.n	80095e0 <_malloc_r+0x20>
 800964c:	4622      	mov	r2, r4
 800964e:	6864      	ldr	r4, [r4, #4]
 8009650:	e7cc      	b.n	80095ec <_malloc_r+0x2c>
 8009652:	1cc4      	adds	r4, r0, #3
 8009654:	f024 0403 	bic.w	r4, r4, #3
 8009658:	42a0      	cmp	r0, r4
 800965a:	d0e3      	beq.n	8009624 <_malloc_r+0x64>
 800965c:	1a21      	subs	r1, r4, r0
 800965e:	4630      	mov	r0, r6
 8009660:	f000 f872 	bl	8009748 <_sbrk_r>
 8009664:	3001      	adds	r0, #1
 8009666:	d1dd      	bne.n	8009624 <_malloc_r+0x64>
 8009668:	e7cf      	b.n	800960a <_malloc_r+0x4a>
 800966a:	bf00      	nop
 800966c:	24004a70 	.word	0x24004a70
 8009670:	24004a74 	.word	0x24004a74

08009674 <cleanup_glue>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	460c      	mov	r4, r1
 8009678:	6809      	ldr	r1, [r1, #0]
 800967a:	4605      	mov	r5, r0
 800967c:	b109      	cbz	r1, 8009682 <cleanup_glue+0xe>
 800967e:	f7ff fff9 	bl	8009674 <cleanup_glue>
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800968a:	f000 b899 	b.w	80097c0 <_free_r>
	...

08009690 <_reclaim_reent>:
 8009690:	4b2c      	ldr	r3, [pc, #176]	; (8009744 <_reclaim_reent+0xb4>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4283      	cmp	r3, r0
 8009696:	b570      	push	{r4, r5, r6, lr}
 8009698:	4604      	mov	r4, r0
 800969a:	d051      	beq.n	8009740 <_reclaim_reent+0xb0>
 800969c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800969e:	b143      	cbz	r3, 80096b2 <_reclaim_reent+0x22>
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d14a      	bne.n	800973c <_reclaim_reent+0xac>
 80096a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a8:	6819      	ldr	r1, [r3, #0]
 80096aa:	b111      	cbz	r1, 80096b2 <_reclaim_reent+0x22>
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 f887 	bl	80097c0 <_free_r>
 80096b2:	6961      	ldr	r1, [r4, #20]
 80096b4:	b111      	cbz	r1, 80096bc <_reclaim_reent+0x2c>
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 f882 	bl	80097c0 <_free_r>
 80096bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096be:	b111      	cbz	r1, 80096c6 <_reclaim_reent+0x36>
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 f87d 	bl	80097c0 <_free_r>
 80096c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096c8:	b111      	cbz	r1, 80096d0 <_reclaim_reent+0x40>
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 f878 	bl	80097c0 <_free_r>
 80096d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80096d2:	b111      	cbz	r1, 80096da <_reclaim_reent+0x4a>
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 f873 	bl	80097c0 <_free_r>
 80096da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096dc:	b111      	cbz	r1, 80096e4 <_reclaim_reent+0x54>
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 f86e 	bl	80097c0 <_free_r>
 80096e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096e6:	b111      	cbz	r1, 80096ee <_reclaim_reent+0x5e>
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 f869 	bl	80097c0 <_free_r>
 80096ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80096f0:	b111      	cbz	r1, 80096f8 <_reclaim_reent+0x68>
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 f864 	bl	80097c0 <_free_r>
 80096f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096fa:	b111      	cbz	r1, 8009702 <_reclaim_reent+0x72>
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 f85f 	bl	80097c0 <_free_r>
 8009702:	69a3      	ldr	r3, [r4, #24]
 8009704:	b1e3      	cbz	r3, 8009740 <_reclaim_reent+0xb0>
 8009706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009708:	4620      	mov	r0, r4
 800970a:	4798      	blx	r3
 800970c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800970e:	b1b9      	cbz	r1, 8009740 <_reclaim_reent+0xb0>
 8009710:	4620      	mov	r0, r4
 8009712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009716:	f7ff bfad 	b.w	8009674 <cleanup_glue>
 800971a:	5949      	ldr	r1, [r1, r5]
 800971c:	b941      	cbnz	r1, 8009730 <_reclaim_reent+0xa0>
 800971e:	3504      	adds	r5, #4
 8009720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009722:	2d80      	cmp	r5, #128	; 0x80
 8009724:	68d9      	ldr	r1, [r3, #12]
 8009726:	d1f8      	bne.n	800971a <_reclaim_reent+0x8a>
 8009728:	4620      	mov	r0, r4
 800972a:	f000 f849 	bl	80097c0 <_free_r>
 800972e:	e7ba      	b.n	80096a6 <_reclaim_reent+0x16>
 8009730:	680e      	ldr	r6, [r1, #0]
 8009732:	4620      	mov	r0, r4
 8009734:	f000 f844 	bl	80097c0 <_free_r>
 8009738:	4631      	mov	r1, r6
 800973a:	e7ef      	b.n	800971c <_reclaim_reent+0x8c>
 800973c:	2500      	movs	r5, #0
 800973e:	e7ef      	b.n	8009720 <_reclaim_reent+0x90>
 8009740:	bd70      	pop	{r4, r5, r6, pc}
 8009742:	bf00      	nop
 8009744:	24000014 	.word	0x24000014

08009748 <_sbrk_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d06      	ldr	r5, [pc, #24]	; (8009764 <_sbrk_r+0x1c>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	f7f7 fc84 	bl	8001060 <_sbrk>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d102      	bne.n	8009762 <_sbrk_r+0x1a>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	b103      	cbz	r3, 8009762 <_sbrk_r+0x1a>
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	24004c64 	.word	0x24004c64

08009768 <siprintf>:
 8009768:	b40e      	push	{r1, r2, r3}
 800976a:	b500      	push	{lr}
 800976c:	b09c      	sub	sp, #112	; 0x70
 800976e:	ab1d      	add	r3, sp, #116	; 0x74
 8009770:	9002      	str	r0, [sp, #8]
 8009772:	9006      	str	r0, [sp, #24]
 8009774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009778:	4809      	ldr	r0, [pc, #36]	; (80097a0 <siprintf+0x38>)
 800977a:	9107      	str	r1, [sp, #28]
 800977c:	9104      	str	r1, [sp, #16]
 800977e:	4909      	ldr	r1, [pc, #36]	; (80097a4 <siprintf+0x3c>)
 8009780:	f853 2b04 	ldr.w	r2, [r3], #4
 8009784:	9105      	str	r1, [sp, #20]
 8009786:	6800      	ldr	r0, [r0, #0]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	a902      	add	r1, sp, #8
 800978c:	f000 f8c4 	bl	8009918 <_svfiprintf_r>
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	b01c      	add	sp, #112	; 0x70
 8009798:	f85d eb04 	ldr.w	lr, [sp], #4
 800979c:	b003      	add	sp, #12
 800979e:	4770      	bx	lr
 80097a0:	24000014 	.word	0x24000014
 80097a4:	ffff0208 	.word	0xffff0208

080097a8 <__malloc_lock>:
 80097a8:	4801      	ldr	r0, [pc, #4]	; (80097b0 <__malloc_lock+0x8>)
 80097aa:	f7ff bef1 	b.w	8009590 <__retarget_lock_acquire_recursive>
 80097ae:	bf00      	nop
 80097b0:	24004c5c 	.word	0x24004c5c

080097b4 <__malloc_unlock>:
 80097b4:	4801      	ldr	r0, [pc, #4]	; (80097bc <__malloc_unlock+0x8>)
 80097b6:	f7ff beec 	b.w	8009592 <__retarget_lock_release_recursive>
 80097ba:	bf00      	nop
 80097bc:	24004c5c 	.word	0x24004c5c

080097c0 <_free_r>:
 80097c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097c2:	2900      	cmp	r1, #0
 80097c4:	d048      	beq.n	8009858 <_free_r+0x98>
 80097c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ca:	9001      	str	r0, [sp, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f1a1 0404 	sub.w	r4, r1, #4
 80097d2:	bfb8      	it	lt
 80097d4:	18e4      	addlt	r4, r4, r3
 80097d6:	f7ff ffe7 	bl	80097a8 <__malloc_lock>
 80097da:	4a20      	ldr	r2, [pc, #128]	; (800985c <_free_r+0x9c>)
 80097dc:	9801      	ldr	r0, [sp, #4]
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	4615      	mov	r5, r2
 80097e2:	b933      	cbnz	r3, 80097f2 <_free_r+0x32>
 80097e4:	6063      	str	r3, [r4, #4]
 80097e6:	6014      	str	r4, [r2, #0]
 80097e8:	b003      	add	sp, #12
 80097ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097ee:	f7ff bfe1 	b.w	80097b4 <__malloc_unlock>
 80097f2:	42a3      	cmp	r3, r4
 80097f4:	d90b      	bls.n	800980e <_free_r+0x4e>
 80097f6:	6821      	ldr	r1, [r4, #0]
 80097f8:	1862      	adds	r2, r4, r1
 80097fa:	4293      	cmp	r3, r2
 80097fc:	bf04      	itt	eq
 80097fe:	681a      	ldreq	r2, [r3, #0]
 8009800:	685b      	ldreq	r3, [r3, #4]
 8009802:	6063      	str	r3, [r4, #4]
 8009804:	bf04      	itt	eq
 8009806:	1852      	addeq	r2, r2, r1
 8009808:	6022      	streq	r2, [r4, #0]
 800980a:	602c      	str	r4, [r5, #0]
 800980c:	e7ec      	b.n	80097e8 <_free_r+0x28>
 800980e:	461a      	mov	r2, r3
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	b10b      	cbz	r3, 8009818 <_free_r+0x58>
 8009814:	42a3      	cmp	r3, r4
 8009816:	d9fa      	bls.n	800980e <_free_r+0x4e>
 8009818:	6811      	ldr	r1, [r2, #0]
 800981a:	1855      	adds	r5, r2, r1
 800981c:	42a5      	cmp	r5, r4
 800981e:	d10b      	bne.n	8009838 <_free_r+0x78>
 8009820:	6824      	ldr	r4, [r4, #0]
 8009822:	4421      	add	r1, r4
 8009824:	1854      	adds	r4, r2, r1
 8009826:	42a3      	cmp	r3, r4
 8009828:	6011      	str	r1, [r2, #0]
 800982a:	d1dd      	bne.n	80097e8 <_free_r+0x28>
 800982c:	681c      	ldr	r4, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	6053      	str	r3, [r2, #4]
 8009832:	4421      	add	r1, r4
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	e7d7      	b.n	80097e8 <_free_r+0x28>
 8009838:	d902      	bls.n	8009840 <_free_r+0x80>
 800983a:	230c      	movs	r3, #12
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	e7d3      	b.n	80097e8 <_free_r+0x28>
 8009840:	6825      	ldr	r5, [r4, #0]
 8009842:	1961      	adds	r1, r4, r5
 8009844:	428b      	cmp	r3, r1
 8009846:	bf04      	itt	eq
 8009848:	6819      	ldreq	r1, [r3, #0]
 800984a:	685b      	ldreq	r3, [r3, #4]
 800984c:	6063      	str	r3, [r4, #4]
 800984e:	bf04      	itt	eq
 8009850:	1949      	addeq	r1, r1, r5
 8009852:	6021      	streq	r1, [r4, #0]
 8009854:	6054      	str	r4, [r2, #4]
 8009856:	e7c7      	b.n	80097e8 <_free_r+0x28>
 8009858:	b003      	add	sp, #12
 800985a:	bd30      	pop	{r4, r5, pc}
 800985c:	24004a70 	.word	0x24004a70

08009860 <__ssputs_r>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	688e      	ldr	r6, [r1, #8]
 8009866:	429e      	cmp	r6, r3
 8009868:	4682      	mov	sl, r0
 800986a:	460c      	mov	r4, r1
 800986c:	4690      	mov	r8, r2
 800986e:	461f      	mov	r7, r3
 8009870:	d838      	bhi.n	80098e4 <__ssputs_r+0x84>
 8009872:	898a      	ldrh	r2, [r1, #12]
 8009874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009878:	d032      	beq.n	80098e0 <__ssputs_r+0x80>
 800987a:	6825      	ldr	r5, [r4, #0]
 800987c:	6909      	ldr	r1, [r1, #16]
 800987e:	eba5 0901 	sub.w	r9, r5, r1
 8009882:	6965      	ldr	r5, [r4, #20]
 8009884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800988c:	3301      	adds	r3, #1
 800988e:	444b      	add	r3, r9
 8009890:	106d      	asrs	r5, r5, #1
 8009892:	429d      	cmp	r5, r3
 8009894:	bf38      	it	cc
 8009896:	461d      	movcc	r5, r3
 8009898:	0553      	lsls	r3, r2, #21
 800989a:	d531      	bpl.n	8009900 <__ssputs_r+0xa0>
 800989c:	4629      	mov	r1, r5
 800989e:	f7ff fe8f 	bl	80095c0 <_malloc_r>
 80098a2:	4606      	mov	r6, r0
 80098a4:	b950      	cbnz	r0, 80098bc <__ssputs_r+0x5c>
 80098a6:	230c      	movs	r3, #12
 80098a8:	f8ca 3000 	str.w	r3, [sl]
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098bc:	6921      	ldr	r1, [r4, #16]
 80098be:	464a      	mov	r2, r9
 80098c0:	f7ff fe68 	bl	8009594 <memcpy>
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	6126      	str	r6, [r4, #16]
 80098d2:	6165      	str	r5, [r4, #20]
 80098d4:	444e      	add	r6, r9
 80098d6:	eba5 0509 	sub.w	r5, r5, r9
 80098da:	6026      	str	r6, [r4, #0]
 80098dc:	60a5      	str	r5, [r4, #8]
 80098de:	463e      	mov	r6, r7
 80098e0:	42be      	cmp	r6, r7
 80098e2:	d900      	bls.n	80098e6 <__ssputs_r+0x86>
 80098e4:	463e      	mov	r6, r7
 80098e6:	4632      	mov	r2, r6
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	4641      	mov	r1, r8
 80098ec:	f000 faa8 	bl	8009e40 <memmove>
 80098f0:	68a3      	ldr	r3, [r4, #8]
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	1b9b      	subs	r3, r3, r6
 80098f6:	4432      	add	r2, r6
 80098f8:	60a3      	str	r3, [r4, #8]
 80098fa:	6022      	str	r2, [r4, #0]
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7db      	b.n	80098b8 <__ssputs_r+0x58>
 8009900:	462a      	mov	r2, r5
 8009902:	f000 fab7 	bl	8009e74 <_realloc_r>
 8009906:	4606      	mov	r6, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d1e1      	bne.n	80098d0 <__ssputs_r+0x70>
 800990c:	6921      	ldr	r1, [r4, #16]
 800990e:	4650      	mov	r0, sl
 8009910:	f7ff ff56 	bl	80097c0 <_free_r>
 8009914:	e7c7      	b.n	80098a6 <__ssputs_r+0x46>
	...

08009918 <_svfiprintf_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	4698      	mov	r8, r3
 800991e:	898b      	ldrh	r3, [r1, #12]
 8009920:	061b      	lsls	r3, r3, #24
 8009922:	b09d      	sub	sp, #116	; 0x74
 8009924:	4607      	mov	r7, r0
 8009926:	460d      	mov	r5, r1
 8009928:	4614      	mov	r4, r2
 800992a:	d50e      	bpl.n	800994a <_svfiprintf_r+0x32>
 800992c:	690b      	ldr	r3, [r1, #16]
 800992e:	b963      	cbnz	r3, 800994a <_svfiprintf_r+0x32>
 8009930:	2140      	movs	r1, #64	; 0x40
 8009932:	f7ff fe45 	bl	80095c0 <_malloc_r>
 8009936:	6028      	str	r0, [r5, #0]
 8009938:	6128      	str	r0, [r5, #16]
 800993a:	b920      	cbnz	r0, 8009946 <_svfiprintf_r+0x2e>
 800993c:	230c      	movs	r3, #12
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e0d1      	b.n	8009aea <_svfiprintf_r+0x1d2>
 8009946:	2340      	movs	r3, #64	; 0x40
 8009948:	616b      	str	r3, [r5, #20]
 800994a:	2300      	movs	r3, #0
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	2320      	movs	r3, #32
 8009950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009954:	f8cd 800c 	str.w	r8, [sp, #12]
 8009958:	2330      	movs	r3, #48	; 0x30
 800995a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b04 <_svfiprintf_r+0x1ec>
 800995e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009962:	f04f 0901 	mov.w	r9, #1
 8009966:	4623      	mov	r3, r4
 8009968:	469a      	mov	sl, r3
 800996a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800996e:	b10a      	cbz	r2, 8009974 <_svfiprintf_r+0x5c>
 8009970:	2a25      	cmp	r2, #37	; 0x25
 8009972:	d1f9      	bne.n	8009968 <_svfiprintf_r+0x50>
 8009974:	ebba 0b04 	subs.w	fp, sl, r4
 8009978:	d00b      	beq.n	8009992 <_svfiprintf_r+0x7a>
 800997a:	465b      	mov	r3, fp
 800997c:	4622      	mov	r2, r4
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ff6d 	bl	8009860 <__ssputs_r>
 8009986:	3001      	adds	r0, #1
 8009988:	f000 80aa 	beq.w	8009ae0 <_svfiprintf_r+0x1c8>
 800998c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800998e:	445a      	add	r2, fp
 8009990:	9209      	str	r2, [sp, #36]	; 0x24
 8009992:	f89a 3000 	ldrb.w	r3, [sl]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 80a2 	beq.w	8009ae0 <_svfiprintf_r+0x1c8>
 800999c:	2300      	movs	r3, #0
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a6:	f10a 0a01 	add.w	sl, sl, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	9307      	str	r3, [sp, #28]
 80099ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b2:	931a      	str	r3, [sp, #104]	; 0x68
 80099b4:	4654      	mov	r4, sl
 80099b6:	2205      	movs	r2, #5
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	4851      	ldr	r0, [pc, #324]	; (8009b04 <_svfiprintf_r+0x1ec>)
 80099be:	f7f6 fc97 	bl	80002f0 <memchr>
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	b9d8      	cbnz	r0, 80099fe <_svfiprintf_r+0xe6>
 80099c6:	06d0      	lsls	r0, r2, #27
 80099c8:	bf44      	itt	mi
 80099ca:	2320      	movmi	r3, #32
 80099cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d0:	0711      	lsls	r1, r2, #28
 80099d2:	bf44      	itt	mi
 80099d4:	232b      	movmi	r3, #43	; 0x2b
 80099d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099da:	f89a 3000 	ldrb.w	r3, [sl]
 80099de:	2b2a      	cmp	r3, #42	; 0x2a
 80099e0:	d015      	beq.n	8009a0e <_svfiprintf_r+0xf6>
 80099e2:	9a07      	ldr	r2, [sp, #28]
 80099e4:	4654      	mov	r4, sl
 80099e6:	2000      	movs	r0, #0
 80099e8:	f04f 0c0a 	mov.w	ip, #10
 80099ec:	4621      	mov	r1, r4
 80099ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f2:	3b30      	subs	r3, #48	; 0x30
 80099f4:	2b09      	cmp	r3, #9
 80099f6:	d94e      	bls.n	8009a96 <_svfiprintf_r+0x17e>
 80099f8:	b1b0      	cbz	r0, 8009a28 <_svfiprintf_r+0x110>
 80099fa:	9207      	str	r2, [sp, #28]
 80099fc:	e014      	b.n	8009a28 <_svfiprintf_r+0x110>
 80099fe:	eba0 0308 	sub.w	r3, r0, r8
 8009a02:	fa09 f303 	lsl.w	r3, r9, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	46a2      	mov	sl, r4
 8009a0c:	e7d2      	b.n	80099b4 <_svfiprintf_r+0x9c>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	1d19      	adds	r1, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	9103      	str	r1, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbb      	ittet	lt
 8009a1a:	425b      	neglt	r3, r3
 8009a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a20:	9307      	strge	r3, [sp, #28]
 8009a22:	9307      	strlt	r3, [sp, #28]
 8009a24:	bfb8      	it	lt
 8009a26:	9204      	strlt	r2, [sp, #16]
 8009a28:	7823      	ldrb	r3, [r4, #0]
 8009a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a2c:	d10c      	bne.n	8009a48 <_svfiprintf_r+0x130>
 8009a2e:	7863      	ldrb	r3, [r4, #1]
 8009a30:	2b2a      	cmp	r3, #42	; 0x2a
 8009a32:	d135      	bne.n	8009aa0 <_svfiprintf_r+0x188>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	9203      	str	r2, [sp, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	bfb8      	it	lt
 8009a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a44:	3402      	adds	r4, #2
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b14 <_svfiprintf_r+0x1fc>
 8009a4c:	7821      	ldrb	r1, [r4, #0]
 8009a4e:	2203      	movs	r2, #3
 8009a50:	4650      	mov	r0, sl
 8009a52:	f7f6 fc4d 	bl	80002f0 <memchr>
 8009a56:	b140      	cbz	r0, 8009a6a <_svfiprintf_r+0x152>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	eba0 000a 	sub.w	r0, r0, sl
 8009a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	4303      	orrs	r3, r0
 8009a66:	3401      	adds	r4, #1
 8009a68:	9304      	str	r3, [sp, #16]
 8009a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6e:	4826      	ldr	r0, [pc, #152]	; (8009b08 <_svfiprintf_r+0x1f0>)
 8009a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a74:	2206      	movs	r2, #6
 8009a76:	f7f6 fc3b 	bl	80002f0 <memchr>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d038      	beq.n	8009af0 <_svfiprintf_r+0x1d8>
 8009a7e:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <_svfiprintf_r+0x1f4>)
 8009a80:	bb1b      	cbnz	r3, 8009aca <_svfiprintf_r+0x1b2>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	3307      	adds	r3, #7
 8009a86:	f023 0307 	bic.w	r3, r3, #7
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	9303      	str	r3, [sp, #12]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	4433      	add	r3, r6
 8009a92:	9309      	str	r3, [sp, #36]	; 0x24
 8009a94:	e767      	b.n	8009966 <_svfiprintf_r+0x4e>
 8009a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	2001      	movs	r0, #1
 8009a9e:	e7a5      	b.n	80099ec <_svfiprintf_r+0xd4>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	3401      	adds	r4, #1
 8009aa4:	9305      	str	r3, [sp, #20]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	f04f 0c0a 	mov.w	ip, #10
 8009aac:	4620      	mov	r0, r4
 8009aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab2:	3a30      	subs	r2, #48	; 0x30
 8009ab4:	2a09      	cmp	r2, #9
 8009ab6:	d903      	bls.n	8009ac0 <_svfiprintf_r+0x1a8>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0c5      	beq.n	8009a48 <_svfiprintf_r+0x130>
 8009abc:	9105      	str	r1, [sp, #20]
 8009abe:	e7c3      	b.n	8009a48 <_svfiprintf_r+0x130>
 8009ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e7f0      	b.n	8009aac <_svfiprintf_r+0x194>
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	462a      	mov	r2, r5
 8009ad0:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <_svfiprintf_r+0x1f8>)
 8009ad2:	a904      	add	r1, sp, #16
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f3af 8000 	nop.w
 8009ada:	1c42      	adds	r2, r0, #1
 8009adc:	4606      	mov	r6, r0
 8009ade:	d1d6      	bne.n	8009a8e <_svfiprintf_r+0x176>
 8009ae0:	89ab      	ldrh	r3, [r5, #12]
 8009ae2:	065b      	lsls	r3, r3, #25
 8009ae4:	f53f af2c 	bmi.w	8009940 <_svfiprintf_r+0x28>
 8009ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aea:	b01d      	add	sp, #116	; 0x74
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	ab03      	add	r3, sp, #12
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	462a      	mov	r2, r5
 8009af6:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <_svfiprintf_r+0x1f8>)
 8009af8:	a904      	add	r1, sp, #16
 8009afa:	4638      	mov	r0, r7
 8009afc:	f000 f87a 	bl	8009bf4 <_printf_i>
 8009b00:	e7eb      	b.n	8009ada <_svfiprintf_r+0x1c2>
 8009b02:	bf00      	nop
 8009b04:	08009ff4 	.word	0x08009ff4
 8009b08:	08009ffe 	.word	0x08009ffe
 8009b0c:	00000000 	.word	0x00000000
 8009b10:	08009861 	.word	0x08009861
 8009b14:	08009ffa 	.word	0x08009ffa

08009b18 <_printf_common>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	4699      	mov	r9, r3
 8009b20:	688a      	ldr	r2, [r1, #8]
 8009b22:	690b      	ldr	r3, [r1, #16]
 8009b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bfb8      	it	lt
 8009b2c:	4613      	movlt	r3, r2
 8009b2e:	6033      	str	r3, [r6, #0]
 8009b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b34:	4607      	mov	r7, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	b10a      	cbz	r2, 8009b3e <_printf_common+0x26>
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	6033      	str	r3, [r6, #0]
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	0699      	lsls	r1, r3, #26
 8009b42:	bf42      	ittt	mi
 8009b44:	6833      	ldrmi	r3, [r6, #0]
 8009b46:	3302      	addmi	r3, #2
 8009b48:	6033      	strmi	r3, [r6, #0]
 8009b4a:	6825      	ldr	r5, [r4, #0]
 8009b4c:	f015 0506 	ands.w	r5, r5, #6
 8009b50:	d106      	bne.n	8009b60 <_printf_common+0x48>
 8009b52:	f104 0a19 	add.w	sl, r4, #25
 8009b56:	68e3      	ldr	r3, [r4, #12]
 8009b58:	6832      	ldr	r2, [r6, #0]
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	42ab      	cmp	r3, r5
 8009b5e:	dc26      	bgt.n	8009bae <_printf_common+0x96>
 8009b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b64:	1e13      	subs	r3, r2, #0
 8009b66:	6822      	ldr	r2, [r4, #0]
 8009b68:	bf18      	it	ne
 8009b6a:	2301      	movne	r3, #1
 8009b6c:	0692      	lsls	r2, r2, #26
 8009b6e:	d42b      	bmi.n	8009bc8 <_printf_common+0xb0>
 8009b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b74:	4649      	mov	r1, r9
 8009b76:	4638      	mov	r0, r7
 8009b78:	47c0      	blx	r8
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	d01e      	beq.n	8009bbc <_printf_common+0xa4>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	68e5      	ldr	r5, [r4, #12]
 8009b82:	6832      	ldr	r2, [r6, #0]
 8009b84:	f003 0306 	and.w	r3, r3, #6
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	bf08      	it	eq
 8009b8c:	1aad      	subeq	r5, r5, r2
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	bf0c      	ite	eq
 8009b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b98:	2500      	movne	r5, #0
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	bfc4      	itt	gt
 8009b9e:	1a9b      	subgt	r3, r3, r2
 8009ba0:	18ed      	addgt	r5, r5, r3
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	341a      	adds	r4, #26
 8009ba6:	42b5      	cmp	r5, r6
 8009ba8:	d11a      	bne.n	8009be0 <_printf_common+0xc8>
 8009baa:	2000      	movs	r0, #0
 8009bac:	e008      	b.n	8009bc0 <_printf_common+0xa8>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4652      	mov	r2, sl
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	47c0      	blx	r8
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d103      	bne.n	8009bc4 <_printf_common+0xac>
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	e7c6      	b.n	8009b56 <_printf_common+0x3e>
 8009bc8:	18e1      	adds	r1, r4, r3
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	2030      	movs	r0, #48	; 0x30
 8009bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd2:	4422      	add	r2, r4
 8009bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bdc:	3302      	adds	r3, #2
 8009bde:	e7c7      	b.n	8009b70 <_printf_common+0x58>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4622      	mov	r2, r4
 8009be4:	4649      	mov	r1, r9
 8009be6:	4638      	mov	r0, r7
 8009be8:	47c0      	blx	r8
 8009bea:	3001      	adds	r0, #1
 8009bec:	d0e6      	beq.n	8009bbc <_printf_common+0xa4>
 8009bee:	3601      	adds	r6, #1
 8009bf0:	e7d9      	b.n	8009ba6 <_printf_common+0x8e>
	...

08009bf4 <_printf_i>:
 8009bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	4691      	mov	r9, r2
 8009bfc:	7e27      	ldrb	r7, [r4, #24]
 8009bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c00:	2f78      	cmp	r7, #120	; 0x78
 8009c02:	4680      	mov	r8, r0
 8009c04:	469a      	mov	sl, r3
 8009c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c0a:	d807      	bhi.n	8009c1c <_printf_i+0x28>
 8009c0c:	2f62      	cmp	r7, #98	; 0x62
 8009c0e:	d80a      	bhi.n	8009c26 <_printf_i+0x32>
 8009c10:	2f00      	cmp	r7, #0
 8009c12:	f000 80d8 	beq.w	8009dc6 <_printf_i+0x1d2>
 8009c16:	2f58      	cmp	r7, #88	; 0x58
 8009c18:	f000 80a3 	beq.w	8009d62 <_printf_i+0x16e>
 8009c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c24:	e03a      	b.n	8009c9c <_printf_i+0xa8>
 8009c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c2a:	2b15      	cmp	r3, #21
 8009c2c:	d8f6      	bhi.n	8009c1c <_printf_i+0x28>
 8009c2e:	a001      	add	r0, pc, #4	; (adr r0, 8009c34 <_printf_i+0x40>)
 8009c30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c34:	08009c8d 	.word	0x08009c8d
 8009c38:	08009ca1 	.word	0x08009ca1
 8009c3c:	08009c1d 	.word	0x08009c1d
 8009c40:	08009c1d 	.word	0x08009c1d
 8009c44:	08009c1d 	.word	0x08009c1d
 8009c48:	08009c1d 	.word	0x08009c1d
 8009c4c:	08009ca1 	.word	0x08009ca1
 8009c50:	08009c1d 	.word	0x08009c1d
 8009c54:	08009c1d 	.word	0x08009c1d
 8009c58:	08009c1d 	.word	0x08009c1d
 8009c5c:	08009c1d 	.word	0x08009c1d
 8009c60:	08009dad 	.word	0x08009dad
 8009c64:	08009cd1 	.word	0x08009cd1
 8009c68:	08009d8f 	.word	0x08009d8f
 8009c6c:	08009c1d 	.word	0x08009c1d
 8009c70:	08009c1d 	.word	0x08009c1d
 8009c74:	08009dcf 	.word	0x08009dcf
 8009c78:	08009c1d 	.word	0x08009c1d
 8009c7c:	08009cd1 	.word	0x08009cd1
 8009c80:	08009c1d 	.word	0x08009c1d
 8009c84:	08009c1d 	.word	0x08009c1d
 8009c88:	08009d97 	.word	0x08009d97
 8009c8c:	680b      	ldr	r3, [r1, #0]
 8009c8e:	1d1a      	adds	r2, r3, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	600a      	str	r2, [r1, #0]
 8009c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e0a3      	b.n	8009de8 <_printf_i+0x1f4>
 8009ca0:	6825      	ldr	r5, [r4, #0]
 8009ca2:	6808      	ldr	r0, [r1, #0]
 8009ca4:	062e      	lsls	r6, r5, #24
 8009ca6:	f100 0304 	add.w	r3, r0, #4
 8009caa:	d50a      	bpl.n	8009cc2 <_printf_i+0xce>
 8009cac:	6805      	ldr	r5, [r0, #0]
 8009cae:	600b      	str	r3, [r1, #0]
 8009cb0:	2d00      	cmp	r5, #0
 8009cb2:	da03      	bge.n	8009cbc <_printf_i+0xc8>
 8009cb4:	232d      	movs	r3, #45	; 0x2d
 8009cb6:	426d      	negs	r5, r5
 8009cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cbc:	485e      	ldr	r0, [pc, #376]	; (8009e38 <_printf_i+0x244>)
 8009cbe:	230a      	movs	r3, #10
 8009cc0:	e019      	b.n	8009cf6 <_printf_i+0x102>
 8009cc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009cc6:	6805      	ldr	r5, [r0, #0]
 8009cc8:	600b      	str	r3, [r1, #0]
 8009cca:	bf18      	it	ne
 8009ccc:	b22d      	sxthne	r5, r5
 8009cce:	e7ef      	b.n	8009cb0 <_printf_i+0xbc>
 8009cd0:	680b      	ldr	r3, [r1, #0]
 8009cd2:	6825      	ldr	r5, [r4, #0]
 8009cd4:	1d18      	adds	r0, r3, #4
 8009cd6:	6008      	str	r0, [r1, #0]
 8009cd8:	0628      	lsls	r0, r5, #24
 8009cda:	d501      	bpl.n	8009ce0 <_printf_i+0xec>
 8009cdc:	681d      	ldr	r5, [r3, #0]
 8009cde:	e002      	b.n	8009ce6 <_printf_i+0xf2>
 8009ce0:	0669      	lsls	r1, r5, #25
 8009ce2:	d5fb      	bpl.n	8009cdc <_printf_i+0xe8>
 8009ce4:	881d      	ldrh	r5, [r3, #0]
 8009ce6:	4854      	ldr	r0, [pc, #336]	; (8009e38 <_printf_i+0x244>)
 8009ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8009cea:	bf0c      	ite	eq
 8009cec:	2308      	moveq	r3, #8
 8009cee:	230a      	movne	r3, #10
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cf6:	6866      	ldr	r6, [r4, #4]
 8009cf8:	60a6      	str	r6, [r4, #8]
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	bfa2      	ittt	ge
 8009cfe:	6821      	ldrge	r1, [r4, #0]
 8009d00:	f021 0104 	bicge.w	r1, r1, #4
 8009d04:	6021      	strge	r1, [r4, #0]
 8009d06:	b90d      	cbnz	r5, 8009d0c <_printf_i+0x118>
 8009d08:	2e00      	cmp	r6, #0
 8009d0a:	d04d      	beq.n	8009da8 <_printf_i+0x1b4>
 8009d0c:	4616      	mov	r6, r2
 8009d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d12:	fb03 5711 	mls	r7, r3, r1, r5
 8009d16:	5dc7      	ldrb	r7, [r0, r7]
 8009d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d1c:	462f      	mov	r7, r5
 8009d1e:	42bb      	cmp	r3, r7
 8009d20:	460d      	mov	r5, r1
 8009d22:	d9f4      	bls.n	8009d0e <_printf_i+0x11a>
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d10b      	bne.n	8009d40 <_printf_i+0x14c>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	07df      	lsls	r7, r3, #31
 8009d2c:	d508      	bpl.n	8009d40 <_printf_i+0x14c>
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	6861      	ldr	r1, [r4, #4]
 8009d32:	4299      	cmp	r1, r3
 8009d34:	bfde      	ittt	le
 8009d36:	2330      	movle	r3, #48	; 0x30
 8009d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d40:	1b92      	subs	r2, r2, r6
 8009d42:	6122      	str	r2, [r4, #16]
 8009d44:	f8cd a000 	str.w	sl, [sp]
 8009d48:	464b      	mov	r3, r9
 8009d4a:	aa03      	add	r2, sp, #12
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4640      	mov	r0, r8
 8009d50:	f7ff fee2 	bl	8009b18 <_printf_common>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d14c      	bne.n	8009df2 <_printf_i+0x1fe>
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5c:	b004      	add	sp, #16
 8009d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d62:	4835      	ldr	r0, [pc, #212]	; (8009e38 <_printf_i+0x244>)
 8009d64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	680e      	ldr	r6, [r1, #0]
 8009d6c:	061f      	lsls	r7, r3, #24
 8009d6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d72:	600e      	str	r6, [r1, #0]
 8009d74:	d514      	bpl.n	8009da0 <_printf_i+0x1ac>
 8009d76:	07d9      	lsls	r1, r3, #31
 8009d78:	bf44      	itt	mi
 8009d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d7e:	6023      	strmi	r3, [r4, #0]
 8009d80:	b91d      	cbnz	r5, 8009d8a <_printf_i+0x196>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	f023 0320 	bic.w	r3, r3, #32
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	2310      	movs	r3, #16
 8009d8c:	e7b0      	b.n	8009cf0 <_printf_i+0xfc>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f043 0320 	orr.w	r3, r3, #32
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	2378      	movs	r3, #120	; 0x78
 8009d98:	4828      	ldr	r0, [pc, #160]	; (8009e3c <_printf_i+0x248>)
 8009d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d9e:	e7e3      	b.n	8009d68 <_printf_i+0x174>
 8009da0:	065e      	lsls	r6, r3, #25
 8009da2:	bf48      	it	mi
 8009da4:	b2ad      	uxthmi	r5, r5
 8009da6:	e7e6      	b.n	8009d76 <_printf_i+0x182>
 8009da8:	4616      	mov	r6, r2
 8009daa:	e7bb      	b.n	8009d24 <_printf_i+0x130>
 8009dac:	680b      	ldr	r3, [r1, #0]
 8009dae:	6826      	ldr	r6, [r4, #0]
 8009db0:	6960      	ldr	r0, [r4, #20]
 8009db2:	1d1d      	adds	r5, r3, #4
 8009db4:	600d      	str	r5, [r1, #0]
 8009db6:	0635      	lsls	r5, r6, #24
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	d501      	bpl.n	8009dc0 <_printf_i+0x1cc>
 8009dbc:	6018      	str	r0, [r3, #0]
 8009dbe:	e002      	b.n	8009dc6 <_printf_i+0x1d2>
 8009dc0:	0671      	lsls	r1, r6, #25
 8009dc2:	d5fb      	bpl.n	8009dbc <_printf_i+0x1c8>
 8009dc4:	8018      	strh	r0, [r3, #0]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6123      	str	r3, [r4, #16]
 8009dca:	4616      	mov	r6, r2
 8009dcc:	e7ba      	b.n	8009d44 <_printf_i+0x150>
 8009dce:	680b      	ldr	r3, [r1, #0]
 8009dd0:	1d1a      	adds	r2, r3, #4
 8009dd2:	600a      	str	r2, [r1, #0]
 8009dd4:	681e      	ldr	r6, [r3, #0]
 8009dd6:	6862      	ldr	r2, [r4, #4]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f7f6 fa88 	bl	80002f0 <memchr>
 8009de0:	b108      	cbz	r0, 8009de6 <_printf_i+0x1f2>
 8009de2:	1b80      	subs	r0, r0, r6
 8009de4:	6060      	str	r0, [r4, #4]
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	2300      	movs	r3, #0
 8009dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df0:	e7a8      	b.n	8009d44 <_printf_i+0x150>
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	4632      	mov	r2, r6
 8009df6:	4649      	mov	r1, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	47d0      	blx	sl
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d0ab      	beq.n	8009d58 <_printf_i+0x164>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	079b      	lsls	r3, r3, #30
 8009e04:	d413      	bmi.n	8009e2e <_printf_i+0x23a>
 8009e06:	68e0      	ldr	r0, [r4, #12]
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	4298      	cmp	r0, r3
 8009e0c:	bfb8      	it	lt
 8009e0e:	4618      	movlt	r0, r3
 8009e10:	e7a4      	b.n	8009d5c <_printf_i+0x168>
 8009e12:	2301      	movs	r3, #1
 8009e14:	4632      	mov	r2, r6
 8009e16:	4649      	mov	r1, r9
 8009e18:	4640      	mov	r0, r8
 8009e1a:	47d0      	blx	sl
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d09b      	beq.n	8009d58 <_printf_i+0x164>
 8009e20:	3501      	adds	r5, #1
 8009e22:	68e3      	ldr	r3, [r4, #12]
 8009e24:	9903      	ldr	r1, [sp, #12]
 8009e26:	1a5b      	subs	r3, r3, r1
 8009e28:	42ab      	cmp	r3, r5
 8009e2a:	dcf2      	bgt.n	8009e12 <_printf_i+0x21e>
 8009e2c:	e7eb      	b.n	8009e06 <_printf_i+0x212>
 8009e2e:	2500      	movs	r5, #0
 8009e30:	f104 0619 	add.w	r6, r4, #25
 8009e34:	e7f5      	b.n	8009e22 <_printf_i+0x22e>
 8009e36:	bf00      	nop
 8009e38:	0800a005 	.word	0x0800a005
 8009e3c:	0800a016 	.word	0x0800a016

08009e40 <memmove>:
 8009e40:	4288      	cmp	r0, r1
 8009e42:	b510      	push	{r4, lr}
 8009e44:	eb01 0402 	add.w	r4, r1, r2
 8009e48:	d902      	bls.n	8009e50 <memmove+0x10>
 8009e4a:	4284      	cmp	r4, r0
 8009e4c:	4623      	mov	r3, r4
 8009e4e:	d807      	bhi.n	8009e60 <memmove+0x20>
 8009e50:	1e43      	subs	r3, r0, #1
 8009e52:	42a1      	cmp	r1, r4
 8009e54:	d008      	beq.n	8009e68 <memmove+0x28>
 8009e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e5e:	e7f8      	b.n	8009e52 <memmove+0x12>
 8009e60:	4402      	add	r2, r0
 8009e62:	4601      	mov	r1, r0
 8009e64:	428a      	cmp	r2, r1
 8009e66:	d100      	bne.n	8009e6a <memmove+0x2a>
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e72:	e7f7      	b.n	8009e64 <memmove+0x24>

08009e74 <_realloc_r>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	4607      	mov	r7, r0
 8009e78:	4614      	mov	r4, r2
 8009e7a:	460e      	mov	r6, r1
 8009e7c:	b921      	cbnz	r1, 8009e88 <_realloc_r+0x14>
 8009e7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e82:	4611      	mov	r1, r2
 8009e84:	f7ff bb9c 	b.w	80095c0 <_malloc_r>
 8009e88:	b922      	cbnz	r2, 8009e94 <_realloc_r+0x20>
 8009e8a:	f7ff fc99 	bl	80097c0 <_free_r>
 8009e8e:	4625      	mov	r5, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e94:	f000 f814 	bl	8009ec0 <_malloc_usable_size_r>
 8009e98:	42a0      	cmp	r0, r4
 8009e9a:	d20f      	bcs.n	8009ebc <_realloc_r+0x48>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff fb8e 	bl	80095c0 <_malloc_r>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0f2      	beq.n	8009e90 <_realloc_r+0x1c>
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4622      	mov	r2, r4
 8009eae:	f7ff fb71 	bl	8009594 <memcpy>
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	f7ff fc83 	bl	80097c0 <_free_r>
 8009eba:	e7e9      	b.n	8009e90 <_realloc_r+0x1c>
 8009ebc:	4635      	mov	r5, r6
 8009ebe:	e7e7      	b.n	8009e90 <_realloc_r+0x1c>

08009ec0 <_malloc_usable_size_r>:
 8009ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec4:	1f18      	subs	r0, r3, #4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfbc      	itt	lt
 8009eca:	580b      	ldrlt	r3, [r1, r0]
 8009ecc:	18c0      	addlt	r0, r0, r3
 8009ece:	4770      	bx	lr

08009ed0 <_init>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr

08009edc <_fini>:
 8009edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ede:	bf00      	nop
 8009ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee2:	bc08      	pop	{r3}
 8009ee4:	469e      	mov	lr, r3
 8009ee6:	4770      	bx	lr
